
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009a  00800100  0000118c  00001220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000118c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080019a  0080019a  000012ba  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000148  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002ec  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010e8  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a7  00000000  00000000  00002f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000167e  00000000  00000000  00003423  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  00004aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000522  00000000  00000000  00004cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000118a  00000000  00000000  000051f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  00006380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR3AH = 0x00;
	OCR3AL = 0x00; // Register used by 8bit pwm
	OCR3BH = 0x00;
	OCR3BL = 0x00; // Register used by 8bit pwm
	OCR3CH = 0x00;
	OCR3CL = 0x00; // Register used by 8bit pwm
       0:	16 c1       	rjmp	.+556    	; 0x22e <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
       2:	00 00       	nop
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
	sei();
}

uint8_t adc_available(void)
{
       4:	31 c1       	rjmp	.+610    	; 0x268 <__bad_interrupt>
       6:	00 00       	nop
       8:	2f c1       	rjmp	.+606    	; 0x268 <__bad_interrupt>
       a:	00 00       	nop
       c:	2d c1       	rjmp	.+602    	; 0x268 <__bad_interrupt>
       e:	00 00       	nop
      10:	2b c1       	rjmp	.+598    	; 0x268 <__bad_interrupt>
      12:	00 00       	nop
      14:	29 c1       	rjmp	.+594    	; 0x268 <__bad_interrupt>
      16:	00 00       	nop
      18:	27 c1       	rjmp	.+590    	; 0x268 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	25 c1       	rjmp	.+586    	; 0x268 <__bad_interrupt>
      1e:	00 00       	nop
      20:	23 c1       	rjmp	.+582    	; 0x268 <__bad_interrupt>
      22:	00 00       	nop
      24:	21 c1       	rjmp	.+578    	; 0x268 <__bad_interrupt>
      26:	00 00       	nop
      28:	a7 c6       	rjmp	.+3406   	; 0xd78 <__vector_10>
      2a:	00 00       	nop
      2c:	e0 c6       	rjmp	.+3520   	; 0xdee <__vector_11>
      2e:	00 00       	nop
      30:	1b c1       	rjmp	.+566    	; 0x268 <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c1       	rjmp	.+562    	; 0x268 <__bad_interrupt>
      36:	00 00       	nop
      38:	17 c1       	rjmp	.+558    	; 0x268 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c1       	rjmp	.+554    	; 0x268 <__bad_interrupt>
      3e:	00 00       	nop
      40:	13 c1       	rjmp	.+550    	; 0x268 <__bad_interrupt>
      42:	00 00       	nop
      44:	11 c1       	rjmp	.+546    	; 0x268 <__bad_interrupt>
      46:	00 00       	nop
      48:	0f c1       	rjmp	.+542    	; 0x268 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0d c1       	rjmp	.+538    	; 0x268 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0b c1       	rjmp	.+534    	; 0x268 <__bad_interrupt>
      52:	00 00       	nop
      54:	09 c1       	rjmp	.+530    	; 0x268 <__bad_interrupt>
      56:	00 00       	nop
      58:	07 c1       	rjmp	.+526    	; 0x268 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	05 c1       	rjmp	.+522    	; 0x268 <__bad_interrupt>
      5e:	00 00       	nop
      60:	03 c1       	rjmp	.+518    	; 0x268 <__bad_interrupt>
      62:	00 00       	nop
      64:	01 c1       	rjmp	.+514    	; 0x268 <__bad_interrupt>
      66:	00 00       	nop
      68:	ff c0       	rjmp	.+510    	; 0x268 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fd c0       	rjmp	.+506    	; 0x268 <__bad_interrupt>
      6e:	00 00       	nop
      70:	fb c0       	rjmp	.+502    	; 0x268 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_29>
      78:	f7 c0       	rjmp	.+494    	; 0x268 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f5 c0       	rjmp	.+490    	; 0x268 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f3 c0       	rjmp	.+486    	; 0x268 <__bad_interrupt>
      82:	00 00       	nop
      84:	f1 c0       	rjmp	.+482    	; 0x268 <__bad_interrupt>
      86:	00 00       	nop
      88:	ef c0       	rjmp	.+478    	; 0x268 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed c0       	rjmp	.+474    	; 0x268 <__bad_interrupt>
      8e:	00 00       	nop
      90:	eb c0       	rjmp	.+470    	; 0x268 <__bad_interrupt>
      92:	00 00       	nop
      94:	e9 c0       	rjmp	.+466    	; 0x268 <__bad_interrupt>
      96:	00 00       	nop
      98:	9f 06       	cpc	r9, r31
      9a:	9c 06       	cpc	r9, r28
      9c:	99 06       	cpc	r9, r25
      9e:	96 06       	cpc	r9, r22
      a0:	93 06       	cpc	r9, r19
      a2:	90 06       	cpc	r9, r16
      a4:	8d 06       	cpc	r8, r29
      a6:	8a 06       	cpc	r8, r26
      a8:	87 06       	cpc	r8, r23
      aa:	84 06       	cpc	r8, r20
      ac:	81 06       	cpc	r8, r17
      ae:	7e 06       	cpc	r7, r30
      b0:	7b 06       	cpc	r7, r27
      b2:	78 06       	cpc	r7, r24
      b4:	75 06       	cpc	r7, r21
      b6:	72 06       	cpc	r7, r18
      b8:	6f 06       	cpc	r6, r31
      ba:	6c 06       	cpc	r6, r28
      bc:	69 06       	cpc	r6, r25
      be:	66 06       	cpc	r6, r22
      c0:	63 06       	cpc	r6, r19
      c2:	60 06       	cpc	r6, r16
      c4:	5d 06       	cpc	r5, r29
      c6:	5a 06       	cpc	r5, r26
      c8:	57 06       	cpc	r5, r23
      ca:	54 06       	cpc	r5, r20
      cc:	51 06       	cpc	r5, r17
      ce:	4e 06       	cpc	r4, r30
      d0:	4b 06       	cpc	r4, r27
      d2:	48 06       	cpc	r4, r24
      d4:	45 06       	cpc	r4, r21
      d6:	42 06       	cpc	r4, r18
      d8:	3f 06       	cpc	r3, r31
      da:	3c 06       	cpc	r3, r28
      dc:	39 06       	cpc	r3, r25
      de:	36 06       	cpc	r3, r22
      e0:	33 06       	cpc	r3, r19
      e2:	30 06       	cpc	r3, r16
      e4:	2d 06       	cpc	r2, r29
      e6:	2a 06       	cpc	r2, r26
      e8:	27 06       	cpc	r2, r23
      ea:	24 06       	cpc	r2, r20
      ec:	21 06       	cpc	r2, r17
      ee:	1e 06       	cpc	r1, r30
      f0:	1b 06       	cpc	r1, r27
      f2:	18 06       	cpc	r1, r24
      f4:	15 06       	cpc	r1, r21
      f6:	12 06       	cpc	r1, r18
      f8:	0f 06       	cpc	r0, r31
      fa:	0c 06       	cpc	r0, r28
      fc:	09 06       	cpc	r0, r25
      fe:	06 06       	cpc	r0, r22
     100:	03 06       	cpc	r0, r19
     102:	00 06       	cpc	r0, r16
     104:	fd 05       	cpc	r31, r13
     106:	fa 05       	cpc	r31, r10
     108:	f7 05       	cpc	r31, r7
     10a:	f4 05       	cpc	r31, r4
     10c:	f1 05       	cpc	r31, r1
     10e:	ee 05       	cpc	r30, r14
     110:	eb 05       	cpc	r30, r11
     112:	e8 05       	cpc	r30, r8
     114:	e5 05       	cpc	r30, r5
     116:	e2 05       	cpc	r30, r2
     118:	df 05       	cpc	r29, r15

0000011a <__c.1581>:
     11a:	49 4e 56 41 4c 49 44 5f 43 4f 4d 4d 41 4e 44 5f     INVALID_COMMAND_
     12a:	43 4f 44 45 00                                      CODE.

0000012f <__c.1572>:
     12f:	76 20 3d 3e 20 76 65 72 73 69 6f 6e 0d 0a 00        v => version...

0000013e <__c.1564>:
     13e:	01 02 03 04 05 06 07 08 0a 00                       ..........

00000148 <__c.1547>:
     148:	57 61 6d 73 65 72 20 4c 61 6d 70 20 43 6f 6e 74     Wamser Lamp Cont
     158:	72 6f 6c 6c 65 72 20 31 2e 30 0a 00                 roller 1.0..

00000164 <descriptor_list>:
     164:	00 01 00 00 98 01 12 00 02 00 00 aa 01 43 00 03     .............C..
     174:	00 00 ed 01 04 01 03 09 04 f1 01 14 02 03 09 04     ................
     184:	07 02 16 03 03 09 04 1f 02 0c                       ..........

0000018e <endpoint_config_table>:
     18e:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000198 <device_descriptor>:
     198:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     1a8:	03 01                                               ..

000001aa <config1_descriptor>:
     1aa:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     1ba:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     1ca:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     1da:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     1ea:	40 00 00                                            @..

000001ed <string0>:
     1ed:	04 03 09 04                                         ....

000001f1 <string1>:
     1f1:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     201:	6d 00 65 00 00 00                                   m.e...

00000207 <string2>:
     207:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     217:	69 00 61 00 6c 00 00 00                             i.a.l...

0000021f <string3>:
     21f:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00 00        ..1.2.3.4.5....

0000022e <__ctors_end>:
     22e:	11 24       	eor	r1, r1
     230:	1f be       	out	0x3f, r1	; 63
     232:	cf ef       	ldi	r28, 0xFF	; 255
     234:	d0 e2       	ldi	r29, 0x20	; 32
     236:	de bf       	out	0x3e, r29	; 62
     238:	cd bf       	out	0x3d, r28	; 61

0000023a <__do_copy_data>:
     23a:	11 e0       	ldi	r17, 0x01	; 1
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b1 e0       	ldi	r27, 0x01	; 1
     240:	ec e8       	ldi	r30, 0x8C	; 140
     242:	f1 e1       	ldi	r31, 0x11	; 17
     244:	00 e0       	ldi	r16, 0x00	; 0
     246:	0b bf       	out	0x3b, r16	; 59
     248:	02 c0       	rjmp	.+4      	; 0x24e <__do_copy_data+0x14>
     24a:	07 90       	elpm	r0, Z+
     24c:	0d 92       	st	X+, r0
     24e:	aa 39       	cpi	r26, 0x9A	; 154
     250:	b1 07       	cpc	r27, r17
     252:	d9 f7       	brne	.-10     	; 0x24a <__do_copy_data+0x10>

00000254 <__do_clear_bss>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	aa e9       	ldi	r26, 0x9A	; 154
     258:	b1 e0       	ldi	r27, 0x01	; 1
     25a:	01 c0       	rjmp	.+2      	; 0x25e <.do_clear_bss_start>

0000025c <.do_clear_bss_loop>:
     25c:	1d 92       	st	X+, r1

0000025e <.do_clear_bss_start>:
     25e:	a4 3a       	cpi	r26, 0xA4	; 164
     260:	b1 07       	cpc	r27, r17
     262:	e1 f7       	brne	.-8      	; 0x25c <.do_clear_bss_loop>
     264:	9e d3       	rcall	.+1852   	; 0x9a2 <main>
     266:	90 c7       	rjmp	.+3872   	; 0x1188 <_exit>

00000268 <__bad_interrupt>:
     268:	cb ce       	rjmp	.-618    	; 0x0 <__vectors>

0000026a <setup_pwms>:

void setup_pwms(void)
{
	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
     26a:	84 b1       	in	r24, 0x04	; 4
     26c:	80 6f       	ori	r24, 0xF0	; 240
     26e:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
     270:	87 b1       	in	r24, 0x07	; 7
     272:	80 67       	ori	r24, 0x70	; 112
     274:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDD0) | (1 << DDD1);
     276:	8a b1       	in	r24, 0x0a	; 10
     278:	83 60       	ori	r24, 0x03	; 3
     27a:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
     27c:	93 ea       	ldi	r25, 0xA3	; 163
     27e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
     284:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
     288:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
     28c:	91 ea       	ldi	r25, 0xA1	; 161
     28e:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
     292:	89 e0       	ldi	r24, 0x09	; 9
     294:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
     298:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
     29c:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
     2a0:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
     2a4:	10 92 92 00 	sts	0x0092, r1
}
     2a8:	08 95       	ret

000002aa <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ec 01       	movw	r28, r24
     2b4:	06 2f       	mov	r16, r22
     2b6:	10 e0       	ldi	r17, 0x00	; 0
     2b8:	14 c0       	rjmp	.+40     	; 0x2e2 <recv_str+0x38>
	int16_t r;
	uint8_t count=0;

	while (count < size) {
		r = usb_serial_getchar();
     2ba:	bf d3       	rcall	.+1918   	; 0xa3a <usb_serial_getchar>
		if (r != -1) {
     2bc:	2f ef       	ldi	r18, 0xFF	; 255
     2be:	8f 3f       	cpi	r24, 0xFF	; 255
     2c0:	92 07       	cpc	r25, r18
     2c2:	49 f0       	breq	.+18     	; 0x2d6 <recv_str+0x2c>
			if (r == '\r' || r == '\n') return count;
     2c4:	8d 30       	cpi	r24, 0x0D	; 13
     2c6:	91 05       	cpc	r25, r1
     2c8:	81 f0       	breq	.+32     	; 0x2ea <recv_str+0x40>
     2ca:	8a 30       	cpi	r24, 0x0A	; 10
     2cc:	91 05       	cpc	r25, r1
     2ce:	69 f0       	breq	.+26     	; 0x2ea <recv_str+0x40>
			*buf++ = r;
     2d0:	89 93       	st	Y+, r24
			//usb_serial_putchar(r);
			count++;
     2d2:	1f 5f       	subi	r17, 0xFF	; 255
     2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <recv_str+0x38>
		} else {
			if (!usb_configured() ||
     2d6:	ae d3       	rcall	.+1884   	; 0xa34 <usb_configured>
     2d8:	88 23       	and	r24, r24
     2da:	31 f0       	breq	.+12     	; 0x2e8 <recv_str+0x3e>
     2dc:	4a d5       	rcall	.+2708   	; 0xd72 <usb_serial_get_control>
     2de:	80 ff       	sbrs	r24, 0
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <recv_str+0x3e>
uint8_t recv_str(char *buf, uint8_t size)
{
	int16_t r;
	uint8_t count=0;

	while (count < size) {
     2e2:	10 17       	cp	r17, r16
     2e4:	50 f3       	brcs	.-44     	; 0x2ba <recv_str+0x10>
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <recv_str+0x40>
     2e8:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
     2ea:	81 2f       	mov	r24, r17
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	1f 91       	pop	r17
     2f2:	0f 91       	pop	r16
     2f4:	08 95       	ret

000002f6 <send_PSTR>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_PSTR(const char *s)
{
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
     2fe:	21 96       	adiw	r28, 0x01	; 1
     300:	84 91       	lpm	r24, Z+
		if (!c) break;
     302:	88 23       	and	r24, r24
     304:	11 f0       	breq	.+4      	; 0x30a <send_PSTR+0x14>
		usb_serial_putchar(c);
     306:	cb d3       	rcall	.+1942   	; 0xa9e <usb_serial_putchar>
     308:	f9 cf       	rjmp	.-14     	; 0x2fc <send_PSTR+0x6>
	}
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <handle_version_command>:
//#############################################################

void handle_version_command(void)
{
//	usb_serial_putchar('\x00');
	send_PSTR(PSTR("Wamser Lamp Controller 1.0\n"));
     310:	88 e4       	ldi	r24, 0x48	; 72
     312:	91 e0       	ldi	r25, 0x01	; 1
}
     314:	f0 cf       	rjmp	.-32     	; 0x2f6 <send_PSTR>

00000316 <handle_pwm_ports_command>:
}
//#############################################################

void handle_pwm_ports_command(void)
{
	usb_serial_putchar('\x03');
     316:	83 e0       	ldi	r24, 0x03	; 3
     318:	c2 d3       	rcall	.+1924   	; 0xa9e <usb_serial_putchar>
	usb_serial_putchar('\x00');
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	c0 d3       	rcall	.+1920   	; 0xa9e <usb_serial_putchar>
	send_PSTR(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
     31e:	8e e3       	ldi	r24, 0x3E	; 62
     320:	91 e0       	ldi	r25, 0x01	; 1
}
     322:	e9 cf       	rjmp	.-46     	; 0x2f6 <send_PSTR>

00000324 <handle_ping_command>:
	send_PSTR(PSTR("Wamser Lamp Controller 1.0\n"));
}
//#############################################################

void handle_ping_command(const char *str, uint8_t len)
{
     324:	0f 93       	push	r16
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	06 2f       	mov	r16, r22
     32e:	ec 01       	movw	r28, r24
     330:	11 e0       	ldi	r17, 0x01	; 1
     332:	03 c0       	rjmp	.+6      	; 0x33a <handle_ping_command+0x16>
	data_itr = str;

//	usb_serial_putchar('\x02');
	while(ndx < len)
	{
		usb_serial_putchar(data_itr[ndx]);
     334:	88 81       	ld	r24, Y
     336:	b3 d3       	rcall	.+1894   	; 0xa9e <usb_serial_putchar>
		++ndx;
     338:	1f 5f       	subi	r17, 0xFF	; 255
     33a:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ndx = 1;

	data_itr = str;

//	usb_serial_putchar('\x02');
	while(ndx < len)
     33c:	10 17       	cp	r17, r16
     33e:	d0 f3       	brcs	.-12     	; 0x334 <handle_ping_command+0x10>
	{
		usb_serial_putchar(data_itr[ndx]);
		++ndx;
	}
	usb_serial_putchar('\n');
     340:	8a e0       	ldi	r24, 0x0A	; 10
     342:	ad d3       	rcall	.+1882   	; 0xa9e <usb_serial_putchar>
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <handle_set_pwm_command>:
/**
 * @breif Handle a set pwm command
 */

void handle_set_pwm_command(uint8_t port, uint8_t val)
{
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	18 2f       	mov	r17, r24
     354:	06 2f       	mov	r16, r22
	usb_serial_putchar('\x04');
     356:	84 e0       	ldi	r24, 0x04	; 4
     358:	a2 d3       	rcall	.+1860   	; 0xa9e <usb_serial_putchar>
	usb_serial_putchar(port);
     35a:	81 2f       	mov	r24, r17
     35c:	a0 d3       	rcall	.+1856   	; 0xa9e <usb_serial_putchar>
	switch(port)
     35e:	14 30       	cpi	r17, 0x04	; 4
     360:	31 f1       	breq	.+76     	; 0x3ae <handle_set_pwm_command+0x60>
     362:	15 30       	cpi	r17, 0x05	; 5
     364:	48 f4       	brcc	.+18     	; 0x378 <handle_set_pwm_command+0x2a>
     366:	11 30       	cpi	r17, 0x01	; 1
     368:	91 f0       	breq	.+36     	; 0x38e <handle_set_pwm_command+0x40>
     36a:	11 30       	cpi	r17, 0x01	; 1
     36c:	70 f0       	brcs	.+28     	; 0x38a <handle_set_pwm_command+0x3c>
     36e:	12 30       	cpi	r17, 0x02	; 2
     370:	81 f0       	breq	.+32     	; 0x392 <handle_set_pwm_command+0x44>
     372:	13 30       	cpi	r17, 0x03	; 3
     374:	b9 f5       	brne	.+110    	; 0x3e4 <handle_set_pwm_command+0x96>
     376:	14 c0       	rjmp	.+40     	; 0x3a0 <handle_set_pwm_command+0x52>
     378:	16 30       	cpi	r17, 0x06	; 6
     37a:	f9 f0       	breq	.+62     	; 0x3ba <handle_set_pwm_command+0x6c>
     37c:	16 30       	cpi	r17, 0x06	; 6
     37e:	d0 f0       	brcs	.+52     	; 0x3b4 <handle_set_pwm_command+0x66>
     380:	17 30       	cpi	r17, 0x07	; 7
     382:	11 f1       	breq	.+68     	; 0x3c8 <handle_set_pwm_command+0x7a>
     384:	18 30       	cpi	r17, 0x08	; 8
     386:	71 f5       	brne	.+92     	; 0x3e4 <handle_set_pwm_command+0x96>
     388:	26 c0       	rjmp	.+76     	; 0x3d6 <handle_set_pwm_command+0x88>
	{
		case 0:
			OCR0A = val;
     38a:	07 bd       	out	0x27, r16	; 39
     38c:	2d c0       	rjmp	.+90     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 1:
			OCR0B = val;
     38e:	08 bd       	out	0x28, r16	; 40
     390:	2b c0       	rjmp	.+86     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 2:
			OCR1A = val;
     392:	80 2f       	mov	r24, r16
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	90 93 89 00 	sts	0x0089, r25
     39a:	80 93 88 00 	sts	0x0088, r24
     39e:	24 c0       	rjmp	.+72     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 3:
			OCR1B = val;
     3a0:	80 2f       	mov	r24, r16
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	90 93 8b 00 	sts	0x008B, r25
     3a8:	80 93 8a 00 	sts	0x008A, r24
     3ac:	1d c0       	rjmp	.+58     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 4:
			OCR2A = val;
     3ae:	00 93 b3 00 	sts	0x00B3, r16
     3b2:	1a c0       	rjmp	.+52     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 5:
			OCR2B = val;
     3b4:	00 93 b4 00 	sts	0x00B4, r16
     3b8:	17 c0       	rjmp	.+46     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 6:
			OCR3A = val;
     3ba:	80 2f       	mov	r24, r16
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	90 93 99 00 	sts	0x0099, r25
     3c2:	80 93 98 00 	sts	0x0098, r24
     3c6:	10 c0       	rjmp	.+32     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 7:
			OCR3B = val;
     3c8:	80 2f       	mov	r24, r16
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 9b 00 	sts	0x009B, r25
     3d0:	80 93 9a 00 	sts	0x009A, r24
     3d4:	09 c0       	rjmp	.+18     	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		case 8:
			OCR3C = val;
     3d6:	80 2f       	mov	r24, r16
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	90 93 9d 00 	sts	0x009D, r25
     3de:	80 93 9c 00 	sts	0x009C, r24
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <handle_set_pwm_command+0x9a>
			break;
		default:
			usb_serial_putchar('\x01');
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	01 c0       	rjmp	.+2      	; 0x3ea <handle_set_pwm_command+0x9c>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	59 d3       	rcall	.+1714   	; 0xa9e <usb_serial_putchar>
	usb_serial_putchar('\n');
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	57 d3       	rcall	.+1710   	; 0xa9e <usb_serial_putchar>
}
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret

000003f6 <handle_sensor_query>:
//#############################################################

void handle_sensor_query(uint8_t port)
{
     3f6:	df 92       	push	r13
     3f8:	ef 92       	push	r14
     3fa:	ff 92       	push	r15
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	00 d0       	rcall	.+0      	; 0x406 <handle_sensor_query+0x10>
     406:	00 d0       	rcall	.+0      	; 0x408 <handle_sensor_query+0x12>
     408:	cd b7       	in	r28, 0x3d	; 61
     40a:	de b7       	in	r29, 0x3e	; 62
     40c:	18 2f       	mov	r17, r24
	int i;
    uint16_t val;
    char buf[4];
    int readings = 10;

    usb_serial_putchar('\x07');
     40e:	87 e0       	ldi	r24, 0x07	; 7
     410:	46 d3       	rcall	.+1676   	; 0xa9e <usb_serial_putchar>
    usb_serial_putchar(port);
     412:	81 2f       	mov	r24, r17
     414:	44 d3       	rcall	.+1672   	; 0xa9e <usb_serial_putchar>

	switch(port)
     416:	13 30       	cpi	r17, 0x03	; 3
     418:	09 f4       	brne	.+2      	; 0x41c <handle_sensor_query+0x26>
     41a:	fa c0       	rjmp	.+500    	; 0x610 <handle_sensor_query+0x21a>
     41c:	14 30       	cpi	r17, 0x04	; 4
     41e:	38 f4       	brcc	.+14     	; 0x42e <handle_sensor_query+0x38>
     420:	11 30       	cpi	r17, 0x01	; 1
     422:	09 f4       	brne	.+2      	; 0x426 <handle_sensor_query+0x30>
     424:	5d c0       	rjmp	.+186    	; 0x4e0 <handle_sensor_query+0xea>
     426:	12 30       	cpi	r17, 0x02	; 2
     428:	08 f0       	brcs	.+2      	; 0x42c <handle_sensor_query+0x36>
     42a:	a6 c0       	rjmp	.+332    	; 0x578 <handle_sensor_query+0x182>
     42c:	0d c0       	rjmp	.+26     	; 0x448 <handle_sensor_query+0x52>
     42e:	15 30       	cpi	r17, 0x05	; 5
     430:	09 f4       	brne	.+2      	; 0x434 <handle_sensor_query+0x3e>
     432:	86 c1       	rjmp	.+780    	; 0x740 <handle_sensor_query+0x34a>
     434:	15 30       	cpi	r17, 0x05	; 5
     436:	08 f4       	brcc	.+2      	; 0x43a <handle_sensor_query+0x44>
     438:	37 c1       	rjmp	.+622    	; 0x6a8 <handle_sensor_query+0x2b2>
     43a:	16 30       	cpi	r17, 0x06	; 6
     43c:	09 f4       	brne	.+2      	; 0x440 <handle_sensor_query+0x4a>
     43e:	cc c1       	rjmp	.+920    	; 0x7d8 <handle_sensor_query+0x3e2>
     440:	17 30       	cpi	r17, 0x07	; 7
     442:	09 f0       	breq	.+2      	; 0x446 <handle_sensor_query+0x50>
     444:	61 c2       	rjmp	.+1218   	; 0x908 <handle_sensor_query+0x512>
     446:	14 c2       	rjmp	.+1064   	; 0x870 <handle_sensor_query+0x47a>
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	60 e4       	ldi	r22, 0x40	; 64
     44c:	3f d6       	rcall	.+3198   	; 0x10cc <adc_start>
     44e:	88 e8       	ldi	r24, 0x88	; 136
     450:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     452:	20 e9       	ldi	r18, 0x90	; 144
     454:	31 e0       	ldi	r19, 0x01	; 1
     456:	f9 01       	movw	r30, r18
     458:	31 97       	sbiw	r30, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <handle_sensor_query+0x62>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     45c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     45e:	d9 f7       	brne	.-10     	; 0x456 <handle_sensor_query+0x60>
     460:	01 e0       	ldi	r16, 0x01	; 1
     462:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     464:	f0 e2       	ldi	r31, 0x20	; 32
     466:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     468:	7e 01       	movw	r14, r28
     46a:	08 94       	sec
     46c:	e1 1c       	adc	r14, r1
     46e:	f1 1c       	adc	r15, r1
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
     470:	42 d6       	rcall	.+3204   	; 0x10f6 <adc_read>
     472:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     474:	89 2f       	mov	r24, r25
     476:	99 27       	eor	r25, r25
     478:	48 2f       	mov	r20, r24
     47a:	4f 70       	andi	r20, 0x0F	; 15
     47c:	8f 70       	andi	r24, 0x0F	; 15
     47e:	90 70       	andi	r25, 0x00	; 0
     480:	0a 97       	sbiw	r24, 0x0a	; 10
     482:	18 f4       	brcc	.+6      	; 0x48a <handle_sensor_query+0x94>
     484:	54 2f       	mov	r21, r20
     486:	50 5d       	subi	r21, 0xD0	; 208
     488:	02 c0       	rjmp	.+4      	; 0x48e <handle_sensor_query+0x98>
     48a:	54 2f       	mov	r21, r20
     48c:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     48e:	c9 01       	movw	r24, r18
     490:	74 e0       	ldi	r23, 0x04	; 4
     492:	96 95       	lsr	r25
     494:	87 95       	ror	r24
     496:	7a 95       	dec	r23
     498:	e1 f7       	brne	.-8      	; 0x492 <handle_sensor_query+0x9c>
     49a:	48 2f       	mov	r20, r24
     49c:	4f 70       	andi	r20, 0x0F	; 15
     49e:	8f 70       	andi	r24, 0x0F	; 15
     4a0:	90 70       	andi	r25, 0x00	; 0
     4a2:	0a 97       	sbiw	r24, 0x0a	; 10
     4a4:	18 f4       	brcc	.+6      	; 0x4ac <handle_sensor_query+0xb6>
     4a6:	84 2f       	mov	r24, r20
     4a8:	80 5d       	subi	r24, 0xD0	; 208
     4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <handle_sensor_query+0xba>
     4ac:	84 2f       	mov	r24, r20
     4ae:	89 5c       	subi	r24, 0xC9	; 201
     4b0:	92 2f       	mov	r25, r18
     4b2:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     4b4:	2f 70       	andi	r18, 0x0F	; 15
     4b6:	30 70       	andi	r19, 0x00	; 0
     4b8:	2a 30       	cpi	r18, 0x0A	; 10
     4ba:	31 05       	cpc	r19, r1
     4bc:	10 f4       	brcc	.+4      	; 0x4c2 <handle_sensor_query+0xcc>
     4be:	90 5d       	subi	r25, 0xD0	; 208
     4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <handle_sensor_query+0xce>
     4c2:	99 5c       	subi	r25, 0xC9	; 201
     4c4:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     4c6:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     4c8:	8a 83       	std	Y+2, r24	; 0x02
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     4ca:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     4cc:	c7 01       	movw	r24, r14
     4ce:	64 e0       	ldi	r22, 0x04	; 4
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	27 d3       	rcall	.+1614   	; 0xb22 <usb_serial_write>
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
     4d4:	0f 5f       	subi	r16, 0xFF	; 255
     4d6:	1f 4f       	sbci	r17, 0xFF	; 255
     4d8:	0a 30       	cpi	r16, 0x0A	; 10
     4da:	11 05       	cpc	r17, r1
     4dc:	49 f6       	brne	.-110    	; 0x470 <handle_sensor_query+0x7a>
     4de:	16 c2       	rjmp	.+1068   	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	60 e4       	ldi	r22, 0x40	; 64
     4e4:	f3 d5       	rcall	.+3046   	; 0x10cc <adc_start>
     4e6:	88 e8       	ldi	r24, 0x88	; 136
     4e8:	93 e1       	ldi	r25, 0x13	; 19
     4ea:	20 e9       	ldi	r18, 0x90	; 144
     4ec:	31 e0       	ldi	r19, 0x01	; 1
     4ee:	f9 01       	movw	r30, r18
     4f0:	31 97       	sbiw	r30, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <handle_sensor_query+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4f6:	d9 f7       	brne	.-10     	; 0x4ee <handle_sensor_query+0xf8>
     4f8:	01 e0       	ldi	r16, 0x01	; 1
     4fa:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     4fc:	60 e2       	ldi	r22, 0x20	; 32
     4fe:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     500:	7e 01       	movw	r14, r28
     502:	08 94       	sec
     504:	e1 1c       	adc	r14, r1
     506:	f1 1c       	adc	r15, r1
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
     508:	f6 d5       	rcall	.+3052   	; 0x10f6 <adc_read>
     50a:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     50c:	89 2f       	mov	r24, r25
     50e:	99 27       	eor	r25, r25
     510:	48 2f       	mov	r20, r24
     512:	4f 70       	andi	r20, 0x0F	; 15
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	90 70       	andi	r25, 0x00	; 0
     518:	0a 97       	sbiw	r24, 0x0a	; 10
     51a:	18 f4       	brcc	.+6      	; 0x522 <handle_sensor_query+0x12c>
     51c:	54 2f       	mov	r21, r20
     51e:	50 5d       	subi	r21, 0xD0	; 208
     520:	02 c0       	rjmp	.+4      	; 0x526 <handle_sensor_query+0x130>
     522:	54 2f       	mov	r21, r20
     524:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     526:	c9 01       	movw	r24, r18
     528:	44 e0       	ldi	r20, 0x04	; 4
     52a:	96 95       	lsr	r25
     52c:	87 95       	ror	r24
     52e:	4a 95       	dec	r20
     530:	e1 f7       	brne	.-8      	; 0x52a <handle_sensor_query+0x134>
     532:	48 2f       	mov	r20, r24
     534:	4f 70       	andi	r20, 0x0F	; 15
     536:	8f 70       	andi	r24, 0x0F	; 15
     538:	90 70       	andi	r25, 0x00	; 0
     53a:	0a 97       	sbiw	r24, 0x0a	; 10
     53c:	18 f4       	brcc	.+6      	; 0x544 <handle_sensor_query+0x14e>
     53e:	84 2f       	mov	r24, r20
     540:	80 5d       	subi	r24, 0xD0	; 208
     542:	02 c0       	rjmp	.+4      	; 0x548 <handle_sensor_query+0x152>
     544:	84 2f       	mov	r24, r20
     546:	89 5c       	subi	r24, 0xC9	; 201
     548:	92 2f       	mov	r25, r18
     54a:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     54c:	2f 70       	andi	r18, 0x0F	; 15
     54e:	30 70       	andi	r19, 0x00	; 0
     550:	2a 30       	cpi	r18, 0x0A	; 10
     552:	31 05       	cpc	r19, r1
     554:	10 f4       	brcc	.+4      	; 0x55a <handle_sensor_query+0x164>
     556:	90 5d       	subi	r25, 0xD0	; 208
     558:	01 c0       	rjmp	.+2      	; 0x55c <handle_sensor_query+0x166>
     55a:	99 5c       	subi	r25, 0xC9	; 201
     55c:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     55e:	dc 82       	std	Y+4, r13	; 0x04
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     560:	8a 83       	std	Y+2, r24	; 0x02
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     562:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     564:	c7 01       	movw	r24, r14
     566:	64 e0       	ldi	r22, 0x04	; 4
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	db d2       	rcall	.+1462   	; 0xb22 <usb_serial_write>
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
     56c:	0f 5f       	subi	r16, 0xFF	; 255
     56e:	1f 4f       	sbci	r17, 0xFF	; 255
     570:	0a 30       	cpi	r16, 0x0A	; 10
     572:	11 05       	cpc	r17, r1
     574:	49 f6       	brne	.-110    	; 0x508 <handle_sensor_query+0x112>
     576:	ca c1       	rjmp	.+916    	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
     578:	82 e0       	ldi	r24, 0x02	; 2
     57a:	60 e4       	ldi	r22, 0x40	; 64
     57c:	a7 d5       	rcall	.+2894   	; 0x10cc <adc_start>
     57e:	88 e8       	ldi	r24, 0x88	; 136
     580:	93 e1       	ldi	r25, 0x13	; 19
     582:	20 e9       	ldi	r18, 0x90	; 144
     584:	31 e0       	ldi	r19, 0x01	; 1
     586:	f9 01       	movw	r30, r18
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <handle_sensor_query+0x192>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     58c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     58e:	d9 f7       	brne	.-10     	; 0x586 <handle_sensor_query+0x190>
     590:	01 e0       	ldi	r16, 0x01	; 1
     592:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     594:	80 e2       	ldi	r24, 0x20	; 32
     596:	d8 2e       	mov	r13, r24
	        	usb_serial_write((unsigned char *)buf, 4);
     598:	7e 01       	movw	r14, r28
     59a:	08 94       	sec
     59c:	e1 1c       	adc	r14, r1
     59e:	f1 1c       	adc	r15, r1
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     5a0:	aa d5       	rcall	.+2900   	; 0x10f6 <adc_read>
     5a2:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     5a4:	89 2f       	mov	r24, r25
     5a6:	99 27       	eor	r25, r25
     5a8:	48 2f       	mov	r20, r24
     5aa:	4f 70       	andi	r20, 0x0F	; 15
     5ac:	8f 70       	andi	r24, 0x0F	; 15
     5ae:	90 70       	andi	r25, 0x00	; 0
     5b0:	0a 97       	sbiw	r24, 0x0a	; 10
     5b2:	18 f4       	brcc	.+6      	; 0x5ba <handle_sensor_query+0x1c4>
     5b4:	54 2f       	mov	r21, r20
     5b6:	50 5d       	subi	r21, 0xD0	; 208
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <handle_sensor_query+0x1c8>
     5ba:	54 2f       	mov	r21, r20
     5bc:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     5be:	c9 01       	movw	r24, r18
     5c0:	a4 e0       	ldi	r26, 0x04	; 4
     5c2:	96 95       	lsr	r25
     5c4:	87 95       	ror	r24
     5c6:	aa 95       	dec	r26
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <handle_sensor_query+0x1cc>
     5ca:	48 2f       	mov	r20, r24
     5cc:	4f 70       	andi	r20, 0x0F	; 15
     5ce:	8f 70       	andi	r24, 0x0F	; 15
     5d0:	90 70       	andi	r25, 0x00	; 0
     5d2:	0a 97       	sbiw	r24, 0x0a	; 10
     5d4:	18 f4       	brcc	.+6      	; 0x5dc <handle_sensor_query+0x1e6>
     5d6:	84 2f       	mov	r24, r20
     5d8:	80 5d       	subi	r24, 0xD0	; 208
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <handle_sensor_query+0x1ea>
     5dc:	84 2f       	mov	r24, r20
     5de:	89 5c       	subi	r24, 0xC9	; 201
     5e0:	92 2f       	mov	r25, r18
     5e2:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     5e4:	2f 70       	andi	r18, 0x0F	; 15
     5e6:	30 70       	andi	r19, 0x00	; 0
     5e8:	2a 30       	cpi	r18, 0x0A	; 10
     5ea:	31 05       	cpc	r19, r1
     5ec:	10 f4       	brcc	.+4      	; 0x5f2 <handle_sensor_query+0x1fc>
     5ee:	90 5d       	subi	r25, 0xD0	; 208
     5f0:	01 c0       	rjmp	.+2      	; 0x5f4 <handle_sensor_query+0x1fe>
     5f2:	99 5c       	subi	r25, 0xC9	; 201
     5f4:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     5f6:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     5f8:	8a 83       	std	Y+2, r24	; 0x02
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     5fa:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     5fc:	c7 01       	movw	r24, r14
     5fe:	64 e0       	ldi	r22, 0x04	; 4
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	8f d2       	rcall	.+1310   	; 0xb22 <usb_serial_write>
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     604:	0f 5f       	subi	r16, 0xFF	; 255
     606:	1f 4f       	sbci	r17, 0xFF	; 255
     608:	0a 30       	cpi	r16, 0x0A	; 10
     60a:	11 05       	cpc	r17, r1
     60c:	49 f6       	brne	.-110    	; 0x5a0 <handle_sensor_query+0x1aa>
     60e:	7e c1       	rjmp	.+764    	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
     610:	83 e0       	ldi	r24, 0x03	; 3
     612:	60 e4       	ldi	r22, 0x40	; 64
     614:	5b d5       	rcall	.+2742   	; 0x10cc <adc_start>
     616:	88 e8       	ldi	r24, 0x88	; 136
     618:	93 e1       	ldi	r25, 0x13	; 19
     61a:	20 e9       	ldi	r18, 0x90	; 144
     61c:	31 e0       	ldi	r19, 0x01	; 1
     61e:	f9 01       	movw	r30, r18
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <handle_sensor_query+0x22a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     624:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     626:	d9 f7       	brne	.-10     	; 0x61e <handle_sensor_query+0x228>
     628:	01 e0       	ldi	r16, 0x01	; 1
     62a:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     62c:	f0 e2       	ldi	r31, 0x20	; 32
     62e:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     630:	7e 01       	movw	r14, r28
     632:	08 94       	sec
     634:	e1 1c       	adc	r14, r1
     636:	f1 1c       	adc	r15, r1
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     638:	5e d5       	rcall	.+2748   	; 0x10f6 <adc_read>
     63a:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     63c:	89 2f       	mov	r24, r25
     63e:	99 27       	eor	r25, r25
     640:	48 2f       	mov	r20, r24
     642:	4f 70       	andi	r20, 0x0F	; 15
     644:	8f 70       	andi	r24, 0x0F	; 15
     646:	90 70       	andi	r25, 0x00	; 0
     648:	0a 97       	sbiw	r24, 0x0a	; 10
     64a:	18 f4       	brcc	.+6      	; 0x652 <handle_sensor_query+0x25c>
     64c:	54 2f       	mov	r21, r20
     64e:	50 5d       	subi	r21, 0xD0	; 208
     650:	02 c0       	rjmp	.+4      	; 0x656 <handle_sensor_query+0x260>
     652:	54 2f       	mov	r21, r20
     654:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     656:	c9 01       	movw	r24, r18
     658:	74 e0       	ldi	r23, 0x04	; 4
     65a:	96 95       	lsr	r25
     65c:	87 95       	ror	r24
     65e:	7a 95       	dec	r23
     660:	e1 f7       	brne	.-8      	; 0x65a <handle_sensor_query+0x264>
     662:	48 2f       	mov	r20, r24
     664:	4f 70       	andi	r20, 0x0F	; 15
     666:	8f 70       	andi	r24, 0x0F	; 15
     668:	90 70       	andi	r25, 0x00	; 0
     66a:	0a 97       	sbiw	r24, 0x0a	; 10
     66c:	18 f4       	brcc	.+6      	; 0x674 <handle_sensor_query+0x27e>
     66e:	84 2f       	mov	r24, r20
     670:	80 5d       	subi	r24, 0xD0	; 208
     672:	02 c0       	rjmp	.+4      	; 0x678 <handle_sensor_query+0x282>
     674:	84 2f       	mov	r24, r20
     676:	89 5c       	subi	r24, 0xC9	; 201
     678:	92 2f       	mov	r25, r18
     67a:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     67c:	2f 70       	andi	r18, 0x0F	; 15
     67e:	30 70       	andi	r19, 0x00	; 0
     680:	2a 30       	cpi	r18, 0x0A	; 10
     682:	31 05       	cpc	r19, r1
     684:	10 f4       	brcc	.+4      	; 0x68a <handle_sensor_query+0x294>
     686:	90 5d       	subi	r25, 0xD0	; 208
     688:	01 c0       	rjmp	.+2      	; 0x68c <handle_sensor_query+0x296>
     68a:	99 5c       	subi	r25, 0xC9	; 201
     68c:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     68e:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     690:	8a 83       	std	Y+2, r24	; 0x02
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     692:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     694:	c7 01       	movw	r24, r14
     696:	64 e0       	ldi	r22, 0x04	; 4
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	43 d2       	rcall	.+1158   	; 0xb22 <usb_serial_write>
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     69c:	0f 5f       	subi	r16, 0xFF	; 255
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	0a 30       	cpi	r16, 0x0A	; 10
     6a2:	11 05       	cpc	r17, r1
     6a4:	49 f6       	brne	.-110    	; 0x638 <handle_sensor_query+0x242>
     6a6:	32 c1       	rjmp	.+612    	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
     6a8:	84 e0       	ldi	r24, 0x04	; 4
     6aa:	60 e4       	ldi	r22, 0x40	; 64
     6ac:	0f d5       	rcall	.+2590   	; 0x10cc <adc_start>
     6ae:	88 e8       	ldi	r24, 0x88	; 136
     6b0:	93 e1       	ldi	r25, 0x13	; 19
     6b2:	20 e9       	ldi	r18, 0x90	; 144
     6b4:	31 e0       	ldi	r19, 0x01	; 1
     6b6:	f9 01       	movw	r30, r18
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	f1 f7       	brne	.-4      	; 0x6b8 <handle_sensor_query+0x2c2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6be:	d9 f7       	brne	.-10     	; 0x6b6 <handle_sensor_query+0x2c0>
     6c0:	01 e0       	ldi	r16, 0x01	; 1
     6c2:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     6c4:	60 e2       	ldi	r22, 0x20	; 32
     6c6:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     6c8:	7e 01       	movw	r14, r28
     6ca:	08 94       	sec
     6cc:	e1 1c       	adc	r14, r1
     6ce:	f1 1c       	adc	r15, r1
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     6d0:	12 d5       	rcall	.+2596   	; 0x10f6 <adc_read>
     6d2:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     6d4:	89 2f       	mov	r24, r25
     6d6:	99 27       	eor	r25, r25
     6d8:	48 2f       	mov	r20, r24
     6da:	4f 70       	andi	r20, 0x0F	; 15
     6dc:	8f 70       	andi	r24, 0x0F	; 15
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	0a 97       	sbiw	r24, 0x0a	; 10
     6e2:	18 f4       	brcc	.+6      	; 0x6ea <handle_sensor_query+0x2f4>
     6e4:	54 2f       	mov	r21, r20
     6e6:	50 5d       	subi	r21, 0xD0	; 208
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <handle_sensor_query+0x2f8>
     6ea:	54 2f       	mov	r21, r20
     6ec:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     6ee:	c9 01       	movw	r24, r18
     6f0:	44 e0       	ldi	r20, 0x04	; 4
     6f2:	96 95       	lsr	r25
     6f4:	87 95       	ror	r24
     6f6:	4a 95       	dec	r20
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <handle_sensor_query+0x2fc>
     6fa:	48 2f       	mov	r20, r24
     6fc:	4f 70       	andi	r20, 0x0F	; 15
     6fe:	8f 70       	andi	r24, 0x0F	; 15
     700:	90 70       	andi	r25, 0x00	; 0
     702:	0a 97       	sbiw	r24, 0x0a	; 10
     704:	18 f4       	brcc	.+6      	; 0x70c <handle_sensor_query+0x316>
     706:	84 2f       	mov	r24, r20
     708:	80 5d       	subi	r24, 0xD0	; 208
     70a:	02 c0       	rjmp	.+4      	; 0x710 <handle_sensor_query+0x31a>
     70c:	84 2f       	mov	r24, r20
     70e:	89 5c       	subi	r24, 0xC9	; 201
     710:	92 2f       	mov	r25, r18
     712:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     714:	2f 70       	andi	r18, 0x0F	; 15
     716:	30 70       	andi	r19, 0x00	; 0
     718:	2a 30       	cpi	r18, 0x0A	; 10
     71a:	31 05       	cpc	r19, r1
     71c:	10 f4       	brcc	.+4      	; 0x722 <handle_sensor_query+0x32c>
     71e:	90 5d       	subi	r25, 0xD0	; 208
     720:	01 c0       	rjmp	.+2      	; 0x724 <handle_sensor_query+0x32e>
     722:	99 5c       	subi	r25, 0xC9	; 201
     724:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     726:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     728:	8a 83       	std	Y+2, r24	; 0x02
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     72a:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     72c:	c7 01       	movw	r24, r14
     72e:	64 e0       	ldi	r22, 0x04	; 4
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	f7 d1       	rcall	.+1006   	; 0xb22 <usb_serial_write>
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     734:	0f 5f       	subi	r16, 0xFF	; 255
     736:	1f 4f       	sbci	r17, 0xFF	; 255
     738:	0a 30       	cpi	r16, 0x0A	; 10
     73a:	11 05       	cpc	r17, r1
     73c:	49 f6       	brne	.-110    	; 0x6d0 <handle_sensor_query+0x2da>
     73e:	e6 c0       	rjmp	.+460    	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
     740:	85 e0       	ldi	r24, 0x05	; 5
     742:	60 e4       	ldi	r22, 0x40	; 64
     744:	c3 d4       	rcall	.+2438   	; 0x10cc <adc_start>
     746:	88 e8       	ldi	r24, 0x88	; 136
     748:	93 e1       	ldi	r25, 0x13	; 19
     74a:	20 e9       	ldi	r18, 0x90	; 144
     74c:	31 e0       	ldi	r19, 0x01	; 1
     74e:	f9 01       	movw	r30, r18
     750:	31 97       	sbiw	r30, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <handle_sensor_query+0x35a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     754:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     756:	d9 f7       	brne	.-10     	; 0x74e <handle_sensor_query+0x358>
     758:	01 e0       	ldi	r16, 0x01	; 1
     75a:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     75c:	80 e2       	ldi	r24, 0x20	; 32
     75e:	d8 2e       	mov	r13, r24
	        	usb_serial_write((unsigned char *)buf, 4);
     760:	7e 01       	movw	r14, r28
     762:	08 94       	sec
     764:	e1 1c       	adc	r14, r1
     766:	f1 1c       	adc	r15, r1
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     768:	c6 d4       	rcall	.+2444   	; 0x10f6 <adc_read>
     76a:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     76c:	89 2f       	mov	r24, r25
     76e:	99 27       	eor	r25, r25
     770:	48 2f       	mov	r20, r24
     772:	4f 70       	andi	r20, 0x0F	; 15
     774:	8f 70       	andi	r24, 0x0F	; 15
     776:	90 70       	andi	r25, 0x00	; 0
     778:	0a 97       	sbiw	r24, 0x0a	; 10
     77a:	18 f4       	brcc	.+6      	; 0x782 <handle_sensor_query+0x38c>
     77c:	54 2f       	mov	r21, r20
     77e:	50 5d       	subi	r21, 0xD0	; 208
     780:	02 c0       	rjmp	.+4      	; 0x786 <handle_sensor_query+0x390>
     782:	54 2f       	mov	r21, r20
     784:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     786:	c9 01       	movw	r24, r18
     788:	a4 e0       	ldi	r26, 0x04	; 4
     78a:	96 95       	lsr	r25
     78c:	87 95       	ror	r24
     78e:	aa 95       	dec	r26
     790:	e1 f7       	brne	.-8      	; 0x78a <handle_sensor_query+0x394>
     792:	48 2f       	mov	r20, r24
     794:	4f 70       	andi	r20, 0x0F	; 15
     796:	8f 70       	andi	r24, 0x0F	; 15
     798:	90 70       	andi	r25, 0x00	; 0
     79a:	0a 97       	sbiw	r24, 0x0a	; 10
     79c:	18 f4       	brcc	.+6      	; 0x7a4 <handle_sensor_query+0x3ae>
     79e:	84 2f       	mov	r24, r20
     7a0:	80 5d       	subi	r24, 0xD0	; 208
     7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <handle_sensor_query+0x3b2>
     7a4:	84 2f       	mov	r24, r20
     7a6:	89 5c       	subi	r24, 0xC9	; 201
     7a8:	92 2f       	mov	r25, r18
     7aa:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     7ac:	2f 70       	andi	r18, 0x0F	; 15
     7ae:	30 70       	andi	r19, 0x00	; 0
     7b0:	2a 30       	cpi	r18, 0x0A	; 10
     7b2:	31 05       	cpc	r19, r1
     7b4:	10 f4       	brcc	.+4      	; 0x7ba <handle_sensor_query+0x3c4>
     7b6:	90 5d       	subi	r25, 0xD0	; 208
     7b8:	01 c0       	rjmp	.+2      	; 0x7bc <handle_sensor_query+0x3c6>
     7ba:	99 5c       	subi	r25, 0xC9	; 201
     7bc:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     7be:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     7c0:	8a 83       	std	Y+2, r24	; 0x02
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     7c2:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     7c4:	c7 01       	movw	r24, r14
     7c6:	64 e0       	ldi	r22, 0x04	; 4
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	ab d1       	rcall	.+854    	; 0xb22 <usb_serial_write>
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     7cc:	0f 5f       	subi	r16, 0xFF	; 255
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	0a 30       	cpi	r16, 0x0A	; 10
     7d2:	11 05       	cpc	r17, r1
     7d4:	49 f6       	brne	.-110    	; 0x768 <handle_sensor_query+0x372>
     7d6:	9a c0       	rjmp	.+308    	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	60 e4       	ldi	r22, 0x40	; 64
     7dc:	77 d4       	rcall	.+2286   	; 0x10cc <adc_start>
     7de:	88 e8       	ldi	r24, 0x88	; 136
     7e0:	93 e1       	ldi	r25, 0x13	; 19
     7e2:	20 e9       	ldi	r18, 0x90	; 144
     7e4:	31 e0       	ldi	r19, 0x01	; 1
     7e6:	f9 01       	movw	r30, r18
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	f1 f7       	brne	.-4      	; 0x7e8 <handle_sensor_query+0x3f2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7ee:	d9 f7       	brne	.-10     	; 0x7e6 <handle_sensor_query+0x3f0>
     7f0:	01 e0       	ldi	r16, 0x01	; 1
     7f2:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     7f4:	f0 e2       	ldi	r31, 0x20	; 32
     7f6:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     7f8:	7e 01       	movw	r14, r28
     7fa:	08 94       	sec
     7fc:	e1 1c       	adc	r14, r1
     7fe:	f1 1c       	adc	r15, r1
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     800:	7a d4       	rcall	.+2292   	; 0x10f6 <adc_read>
     802:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     804:	89 2f       	mov	r24, r25
     806:	99 27       	eor	r25, r25
     808:	48 2f       	mov	r20, r24
     80a:	4f 70       	andi	r20, 0x0F	; 15
     80c:	8f 70       	andi	r24, 0x0F	; 15
     80e:	90 70       	andi	r25, 0x00	; 0
     810:	0a 97       	sbiw	r24, 0x0a	; 10
     812:	18 f4       	brcc	.+6      	; 0x81a <handle_sensor_query+0x424>
     814:	54 2f       	mov	r21, r20
     816:	50 5d       	subi	r21, 0xD0	; 208
     818:	02 c0       	rjmp	.+4      	; 0x81e <handle_sensor_query+0x428>
     81a:	54 2f       	mov	r21, r20
     81c:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     81e:	c9 01       	movw	r24, r18
     820:	74 e0       	ldi	r23, 0x04	; 4
     822:	96 95       	lsr	r25
     824:	87 95       	ror	r24
     826:	7a 95       	dec	r23
     828:	e1 f7       	brne	.-8      	; 0x822 <handle_sensor_query+0x42c>
     82a:	48 2f       	mov	r20, r24
     82c:	4f 70       	andi	r20, 0x0F	; 15
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	90 70       	andi	r25, 0x00	; 0
     832:	0a 97       	sbiw	r24, 0x0a	; 10
     834:	18 f4       	brcc	.+6      	; 0x83c <handle_sensor_query+0x446>
     836:	84 2f       	mov	r24, r20
     838:	80 5d       	subi	r24, 0xD0	; 208
     83a:	02 c0       	rjmp	.+4      	; 0x840 <handle_sensor_query+0x44a>
     83c:	84 2f       	mov	r24, r20
     83e:	89 5c       	subi	r24, 0xC9	; 201
     840:	92 2f       	mov	r25, r18
     842:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     844:	2f 70       	andi	r18, 0x0F	; 15
     846:	30 70       	andi	r19, 0x00	; 0
     848:	2a 30       	cpi	r18, 0x0A	; 10
     84a:	31 05       	cpc	r19, r1
     84c:	10 f4       	brcc	.+4      	; 0x852 <handle_sensor_query+0x45c>
     84e:	90 5d       	subi	r25, 0xD0	; 208
     850:	01 c0       	rjmp	.+2      	; 0x854 <handle_sensor_query+0x45e>
     852:	99 5c       	subi	r25, 0xC9	; 201
     854:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     856:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     858:	8a 83       	std	Y+2, r24	; 0x02
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     85a:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     85c:	c7 01       	movw	r24, r14
     85e:	64 e0       	ldi	r22, 0x04	; 4
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	5f d1       	rcall	.+702    	; 0xb22 <usb_serial_write>
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     864:	0f 5f       	subi	r16, 0xFF	; 255
     866:	1f 4f       	sbci	r17, 0xFF	; 255
     868:	0a 30       	cpi	r16, 0x0A	; 10
     86a:	11 05       	cpc	r17, r1
     86c:	49 f6       	brne	.-110    	; 0x800 <handle_sensor_query+0x40a>
     86e:	4e c0       	rjmp	.+156    	; 0x90c <handle_sensor_query+0x516>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
     870:	87 e0       	ldi	r24, 0x07	; 7
     872:	60 e4       	ldi	r22, 0x40	; 64
     874:	2b d4       	rcall	.+2134   	; 0x10cc <adc_start>
     876:	88 e8       	ldi	r24, 0x88	; 136
     878:	93 e1       	ldi	r25, 0x13	; 19
     87a:	20 e9       	ldi	r18, 0x90	; 144
     87c:	31 e0       	ldi	r19, 0x01	; 1
     87e:	f9 01       	movw	r30, r18
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <handle_sensor_query+0x48a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     884:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     886:	d9 f7       	brne	.-10     	; 0x87e <handle_sensor_query+0x488>
     888:	01 e0       	ldi	r16, 0x01	; 1
     88a:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     88c:	60 e2       	ldi	r22, 0x20	; 32
     88e:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     890:	7e 01       	movw	r14, r28
     892:	08 94       	sec
     894:	e1 1c       	adc	r14, r1
     896:	f1 1c       	adc	r15, r1
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     898:	2e d4       	rcall	.+2140   	; 0x10f6 <adc_read>
     89a:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     89c:	89 2f       	mov	r24, r25
     89e:	99 27       	eor	r25, r25
     8a0:	48 2f       	mov	r20, r24
     8a2:	4f 70       	andi	r20, 0x0F	; 15
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	90 70       	andi	r25, 0x00	; 0
     8a8:	0a 97       	sbiw	r24, 0x0a	; 10
     8aa:	18 f4       	brcc	.+6      	; 0x8b2 <handle_sensor_query+0x4bc>
     8ac:	54 2f       	mov	r21, r20
     8ae:	50 5d       	subi	r21, 0xD0	; 208
     8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <handle_sensor_query+0x4c0>
     8b2:	54 2f       	mov	r21, r20
     8b4:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     8b6:	c9 01       	movw	r24, r18
     8b8:	44 e0       	ldi	r20, 0x04	; 4
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	4a 95       	dec	r20
     8c0:	e1 f7       	brne	.-8      	; 0x8ba <handle_sensor_query+0x4c4>
     8c2:	48 2f       	mov	r20, r24
     8c4:	4f 70       	andi	r20, 0x0F	; 15
     8c6:	8f 70       	andi	r24, 0x0F	; 15
     8c8:	90 70       	andi	r25, 0x00	; 0
     8ca:	0a 97       	sbiw	r24, 0x0a	; 10
     8cc:	18 f4       	brcc	.+6      	; 0x8d4 <handle_sensor_query+0x4de>
     8ce:	84 2f       	mov	r24, r20
     8d0:	80 5d       	subi	r24, 0xD0	; 208
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <handle_sensor_query+0x4e2>
     8d4:	84 2f       	mov	r24, r20
     8d6:	89 5c       	subi	r24, 0xC9	; 201
     8d8:	92 2f       	mov	r25, r18
     8da:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     8dc:	2f 70       	andi	r18, 0x0F	; 15
     8de:	30 70       	andi	r19, 0x00	; 0
     8e0:	2a 30       	cpi	r18, 0x0A	; 10
     8e2:	31 05       	cpc	r19, r1
     8e4:	10 f4       	brcc	.+4      	; 0x8ea <handle_sensor_query+0x4f4>
     8e6:	90 5d       	subi	r25, 0xD0	; 208
     8e8:	01 c0       	rjmp	.+2      	; 0x8ec <handle_sensor_query+0x4f6>
     8ea:	99 5c       	subi	r25, 0xC9	; 201
     8ec:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     8ee:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     8f0:	8a 83       	std	Y+2, r24	; 0x02
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     8f2:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     8f4:	c7 01       	movw	r24, r14
     8f6:	64 e0       	ldi	r22, 0x04	; 4
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	13 d1       	rcall	.+550    	; 0xb22 <usb_serial_write>
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     8fc:	0f 5f       	subi	r16, 0xFF	; 255
     8fe:	1f 4f       	sbci	r17, 0xFF	; 255
     900:	0a 30       	cpi	r16, 0x0A	; 10
     902:	11 05       	cpc	r17, r1
     904:	49 f6       	brne	.-110    	; 0x898 <handle_sensor_query+0x4a2>
     906:	02 c0       	rjmp	.+4      	; 0x90c <handle_sensor_query+0x516>
           }
			break;

#endif
		default:
			usb_serial_putchar('\x01');
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	c9 d0       	rcall	.+402    	; 0xa9e <usb_serial_putchar>
			usb_serial_putchar('\n');
			return;
	}
//	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
     90c:	8a e0       	ldi	r24, 0x0A	; 10
     90e:	c7 d0       	rcall	.+398    	; 0xa9e <usb_serial_putchar>
}
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	cf 91       	pop	r28
     91a:	df 91       	pop	r29
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	08 95       	ret

00000928 <handle_command>:
	send_PSTR(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
}
//#############################################################

void handle_command(const char *str, uint8_t len)
{
     928:	fc 01       	movw	r30, r24
	if( len == 0 )
     92a:	66 23       	and	r22, r22
     92c:	19 f4       	brne	.+6      	; 0x934 <handle_command+0xc>
            {
	    send_PSTR( "\r\n"  );
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	36 c0       	rjmp	.+108    	; 0x9a0 <handle_command+0x78>
	    return;
	    }
#if 1
	switch( str[0] )
     934:	80 81       	ld	r24, Z
     936:	81 37       	cpi	r24, 0x71	; 113
     938:	61 f1       	breq	.+88     	; 0x992 <handle_command+0x6a>
     93a:	82 37       	cpi	r24, 0x72	; 114
     93c:	38 f4       	brcc	.+14     	; 0x94c <handle_command+0x24>
     93e:	87 36       	cpi	r24, 0x67	; 103
     940:	11 f1       	breq	.+68     	; 0x986 <handle_command+0x5e>
     942:	88 36       	cpi	r24, 0x68	; 104
     944:	51 f0       	breq	.+20     	; 0x95a <handle_command+0x32>
     946:	8f 33       	cpi	r24, 0x3F	; 63
     948:	31 f5       	brne	.+76     	; 0x996 <handle_command+0x6e>
     94a:	07 c0       	rjmp	.+14     	; 0x95a <handle_command+0x32>
     94c:	86 37       	cpi	r24, 0x76	; 118
     94e:	d1 f0       	breq	.+52     	; 0x984 <handle_command+0x5c>
     950:	8a 37       	cpi	r24, 0x7A	; 122
     952:	d9 f0       	breq	.+54     	; 0x98a <handle_command+0x62>
     954:	83 37       	cpi	r24, 0x73	; 115
     956:	f9 f4       	brne	.+62     	; 0x996 <handle_command+0x6e>
     958:	19 c0       	rjmp	.+50     	; 0x98c <handle_command+0x64>
	{
                case '?':
		case 'h':
			send_PSTR( FILE_ID_STR      "\r\n" );
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	cb dc       	rcall	.-1642   	; 0x2f6 <send_PSTR>
			send_PSTR( COMPILED_MSG     "\r\n" );
     960:	86 e2       	ldi	r24, 0x26	; 38
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	c8 dc       	rcall	.-1648   	; 0x2f6 <send_PSTR>
			send_PSTR( PSTR( "v => version"      "\r\n") );
     966:	8f e2       	ldi	r24, 0x2F	; 47
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	c5 dc       	rcall	.-1654   	; 0x2f6 <send_PSTR>
			send_PSTR(       "g => ping"         "\r\n"  );
     96c:	87 e5       	ldi	r24, 0x57	; 87
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	c2 dc       	rcall	.-1660   	; 0x2f6 <send_PSTR>
			send_PSTR(       "z => ports"        "\r\n"  );
     972:	83 e6       	ldi	r24, 0x63	; 99
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	bf dc       	rcall	.-1666   	; 0x2f6 <send_PSTR>
			send_PSTR(       "s => set PWM"      "\r\n"  );
     978:	80 e7       	ldi	r24, 0x70	; 112
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	bc dc       	rcall	.-1672   	; 0x2f6 <send_PSTR>
			send_PSTR(       "q => query sensor" "\r\n"  );
     97e:	8f e7       	ldi	r24, 0x7F	; 127
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	0e c0       	rjmp	.+28     	; 0x9a0 <handle_command+0x78>
			break;

		case 'v':
			handle_version_command();
     984:	c5 cc       	rjmp	.-1654   	; 0x310 <handle_version_command>
			break;

		case 'g':
			handle_ping_command(str, len);
     986:	cf 01       	movw	r24, r30
     988:	cd cc       	rjmp	.-1638   	; 0x324 <handle_ping_command>
			break;

		case 'z':
			handle_pwm_ports_command();
     98a:	c5 cc       	rjmp	.-1654   	; 0x316 <handle_pwm_ports_command>
			break;

		case 's':
			handle_set_pwm_command(str[1], str[2]);
     98c:	81 81       	ldd	r24, Z+1	; 0x01
     98e:	62 81       	ldd	r22, Z+2	; 0x02
     990:	de cc       	rjmp	.-1604   	; 0x34e <handle_set_pwm_command>
			break;

        	case 'q':
            		handle_sensor_query(str[1]);
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	30 cd       	rjmp	.-1440   	; 0x3f6 <handle_sensor_query>
            		break;

		default:
			send_PSTR(PSTR("INVALID_COMMAND_CODE"));
     996:	8a e1       	ldi	r24, 0x1A	; 26
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	ad dc       	rcall	.-1702   	; 0x2f6 <send_PSTR>
			send_PSTR( COMPILED_MSG     "\r\n" );
     99c:	86 e2       	ldi	r24, 0x26	; 38
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	aa cc       	rjmp	.-1708   	; 0x2f6 <send_PSTR>

000009a2 <main>:
#endif
}
//#############################################################

int main(void)
{
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	df 93       	push	r29
     9a8:	cf 93       	push	r28
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	a0 97       	sbiw	r28, 0x20	; 32
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(2);
     9ba:	80 e8       	ldi	r24, 0x80	; 128
     9bc:	80 93 61 00 	sts	0x0061, r24
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();
     9c6:	51 dc       	rcall	.-1886   	; 0x26a <setup_pwms>

	usb_init();
     9c8:	1c d0       	rcall	.+56     	; 0xa02 <usb_init>
	while (!usb_configured()) /* wait */ ;
     9ca:	34 d0       	rcall	.+104    	; 0xa34 <usb_configured>
     9cc:	88 23       	and	r24, r24
     9ce:	e9 f3       	breq	.-6      	; 0x9ca <main+0x28>
     9d0:	80 e1       	ldi	r24, 0x10	; 16
     9d2:	97 e2       	ldi	r25, 0x27	; 39
     9d4:	20 e9       	ldi	r18, 0x90	; 144
     9d6:	31 e0       	ldi	r19, 0x01	; 1
     9d8:	f9 01       	movw	r30, r18
     9da:	31 97       	sbiw	r30, 0x01	; 1
     9dc:	f1 f7       	brne	.-4      	; 0x9da <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e0:	d9 f7       	brne	.-10     	; 0x9d8 <main+0x36>
	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
		usb_serial_flush_input();

		while (1) {
			n = recv_str(buf, sizeof(buf));
     9e2:	8e 01       	movw	r16, r28
     9e4:	0f 5f       	subi	r16, 0xFF	; 255
     9e6:	1f 4f       	sbci	r17, 0xFF	; 255
	usb_init();
	while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);

	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
     9e8:	c4 d1       	rcall	.+904    	; 0xd72 <usb_serial_get_control>
     9ea:	80 ff       	sbrs	r24, 0
     9ec:	fd cf       	rjmp	.-6      	; 0x9e8 <main+0x46>
		usb_serial_flush_input();
     9ee:	44 d0       	rcall	.+136    	; 0xa78 <usb_serial_flush_input>

		while (1) {
			n = recv_str(buf, sizeof(buf));
     9f0:	c8 01       	movw	r24, r16
     9f2:	60 e2       	ldi	r22, 0x20	; 32
     9f4:	5a dc       	rcall	.-1868   	; 0x2aa <recv_str>
     9f6:	68 2f       	mov	r22, r24
			if (n == 255) break;
     9f8:	8f 3f       	cpi	r24, 0xFF	; 255
     9fa:	b1 f3       	breq	.-20     	; 0x9e8 <main+0x46>
			handle_command(buf, n);
     9fc:	c8 01       	movw	r24, r16
     9fe:	94 df       	rcall	.-216    	; 0x928 <handle_command>
     a00:	f7 cf       	rjmp	.-18     	; 0x9f0 <main+0x4e>

00000a02 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
     a02:	81 e8       	ldi	r24, 0x81	; 129
     a04:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     a08:	80 ea       	ldi	r24, 0xA0	; 160
     a0a:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     a0e:	86 e1       	ldi	r24, 0x16	; 22
     a10:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     a12:	09 b4       	in	r0, 0x29	; 41
     a14:	00 fe       	sbrs	r0, 0
     a16:	fd cf       	rjmp	.-6      	; 0xa12 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     a18:	80 e9       	ldi	r24, 0x90	; 144
     a1a:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     a1e:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     a22:	10 92 9a 01 	sts	0x019A, r1
	cdc_line_rtsdtr = 0;
     a26:	10 92 9b 01 	sts	0x019B, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     a2a:	8c e0       	ldi	r24, 0x0C	; 12
     a2c:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     a30:	78 94       	sei
}
     a32:	08 95       	ret

00000a34 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     a34:	80 91 9a 01 	lds	r24, 0x019A
}
     a38:	08 95       	ret

00000a3a <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     a3a:	2f b7       	in	r18, 0x3f	; 63
	cli();
     a3c:	f8 94       	cli
	if (!usb_configuration) {
     a3e:	80 91 9a 01 	lds	r24, 0x019A
     a42:	88 23       	and	r24, r24
     a44:	39 f0       	breq	.+14     	; 0xa54 <usb_serial_getchar+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     a46:	83 e0       	ldi	r24, 0x03	; 3
     a48:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     a4c:	80 91 e8 00 	lds	r24, 0x00E8
     a50:	85 fd       	sbrc	r24, 5
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <usb_serial_getchar+0x22>
		// no data in buffer
		SREG = intr_state;
     a54:	2f bf       	out	0x3f, r18	; 63
     a56:	2f ef       	ldi	r18, 0xFF	; 255
     a58:	3f ef       	ldi	r19, 0xFF	; 255
     a5a:	0c c0       	rjmp	.+24     	; 0xa74 <usb_serial_getchar+0x3a>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     a5c:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     a60:	80 91 e8 00 	lds	r24, 0x00E8
     a64:	85 fd       	sbrc	r24, 5
     a66:	03 c0       	rjmp	.+6      	; 0xa6e <usb_serial_getchar+0x34>
     a68:	8b e6       	ldi	r24, 0x6B	; 107
     a6a:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     a6e:	2f bf       	out	0x3f, r18	; 63
	return c;
     a70:	29 2f       	mov	r18, r25
     a72:	30 e0       	ldi	r19, 0x00	; 0
}
     a74:	c9 01       	movw	r24, r18
     a76:	08 95       	ret

00000a78 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     a78:	80 91 9a 01 	lds	r24, 0x019A
     a7c:	88 23       	and	r24, r24
     a7e:	71 f0       	breq	.+28     	; 0xa9c <usb_serial_flush_input+0x24>
		intr_state = SREG;
     a80:	9f b7       	in	r25, 0x3f	; 63
		cli();
     a82:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     a84:	83 e0       	ldi	r24, 0x03	; 3
     a86:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     a8a:	2b e6       	ldi	r18, 0x6B	; 107
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <usb_serial_flush_input+0x1a>
     a8e:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     a92:	80 91 e8 00 	lds	r24, 0x00E8
     a96:	85 fd       	sbrc	r24, 5
     a98:	fa cf       	rjmp	.-12     	; 0xa8e <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     a9a:	9f bf       	out	0x3f, r25	; 63
     a9c:	08 95       	ret

00000a9e <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
     a9e:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     aa0:	80 91 9a 01 	lds	r24, 0x019A
     aa4:	88 23       	and	r24, r24
     aa6:	d9 f1       	breq	.+118    	; 0xb1e <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     aa8:	2f b7       	in	r18, 0x3f	; 63
	cli();
     aaa:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     aac:	84 e0       	ldi	r24, 0x04	; 4
     aae:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     ab2:	80 91 9d 01 	lds	r24, 0x019D
     ab6:	88 23       	and	r24, r24
     ab8:	41 f0       	breq	.+16     	; 0xaca <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     aba:	80 91 e8 00 	lds	r24, 0x00E8
     abe:	85 fd       	sbrc	r24, 5
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <usb_serial_putchar+0x28>
			SREG = intr_state;
     ac2:	2f bf       	out	0x3f, r18	; 63
     ac4:	12 c0       	rjmp	.+36     	; 0xaea <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     ac6:	10 92 9d 01 	sts	0x019D, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     aca:	90 91 e4 00 	lds	r25, 0x00E4
     ace:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     ad0:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     ad2:	80 91 e8 00 	lds	r24, 0x00E8
     ad6:	85 fd       	sbrc	r24, 5
     ad8:	13 c0       	rjmp	.+38     	; 0xb00 <usb_serial_putchar+0x62>
		SREG = intr_state;
     ada:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     adc:	80 91 e4 00 	lds	r24, 0x00E4
     ae0:	89 17       	cp	r24, r25
     ae2:	29 f4       	brne	.+10     	; 0xaee <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 9d 01 	sts	0x019D, r24
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     aee:	80 91 9a 01 	lds	r24, 0x019A
     af2:	88 23       	and	r24, r24
     af4:	a1 f0       	breq	.+40     	; 0xb1e <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
     af6:	2f b7       	in	r18, 0x3f	; 63
		cli();
     af8:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     afa:	30 93 e9 00 	sts	0x00E9, r19
     afe:	e9 cf       	rjmp	.-46     	; 0xad2 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     b00:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     b04:	80 91 e8 00 	lds	r24, 0x00E8
     b08:	85 fd       	sbrc	r24, 5
     b0a:	03 c0       	rjmp	.+6      	; 0xb12 <usb_serial_putchar+0x74>
     b0c:	8a e3       	ldi	r24, 0x3A	; 58
     b0e:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     b12:	85 e0       	ldi	r24, 0x05	; 5
     b14:	80 93 9c 01 	sts	0x019C, r24
	SREG = intr_state;
     b18:	2f bf       	out	0x3f, r18	; 63
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	08 95       	ret
	return 0;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
}
     b20:	08 95       	ret

00000b22 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     b22:	cf 93       	push	r28
     b24:	df 93       	push	r29
     b26:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     b28:	80 91 9a 01 	lds	r24, 0x019A
     b2c:	88 23       	and	r24, r24
     b2e:	09 f4       	brne	.+2      	; 0xb32 <usb_serial_write+0x10>
     b30:	1c c1       	rjmp	.+568    	; 0xd6a <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     b32:	3f b7       	in	r19, 0x3f	; 63
	cli();
     b34:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     b3c:	80 91 9d 01 	lds	r24, 0x019D
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <usb_serial_write+0x24>
     b44:	07 c1       	rjmp	.+526    	; 0xd54 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
     b46:	80 91 e8 00 	lds	r24, 0x00E8
     b4a:	85 fd       	sbrc	r24, 5
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <usb_serial_write+0x30>
			SREG = intr_state;
     b4e:	3f bf       	out	0x3f, r19	; 63
     b50:	0c c1       	rjmp	.+536    	; 0xd6a <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     b52:	10 92 9d 01 	sts	0x019D, r1
     b56:	fe c0       	rjmp	.+508    	; 0xd54 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     b58:	90 91 e4 00 	lds	r25, 0x00E4
     b5c:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     b5e:	80 91 e8 00 	lds	r24, 0x00E8
     b62:	85 fd       	sbrc	r24, 5
     b64:	13 c0       	rjmp	.+38     	; 0xb8c <usb_serial_write+0x6a>
			SREG = intr_state;
     b66:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     b68:	80 91 e4 00 	lds	r24, 0x00E4
     b6c:	89 17       	cp	r24, r25
     b6e:	21 f4       	brne	.+8      	; 0xb78 <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 9d 01 	sts	0x019D, r24
     b76:	f9 c0       	rjmp	.+498    	; 0xd6a <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     b78:	80 91 9a 01 	lds	r24, 0x019A
     b7c:	88 23       	and	r24, r24
     b7e:	09 f4       	brne	.+2      	; 0xb82 <usb_serial_write+0x60>
     b80:	f4 c0       	rjmp	.+488    	; 0xd6a <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     b82:	3f b7       	in	r19, 0x3f	; 63
			cli();
     b84:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     b86:	50 93 e9 00 	sts	0x00E9, r21
     b8a:	e9 cf       	rjmp	.-46     	; 0xb5e <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     b8c:	80 91 f2 00 	lds	r24, 0x00F2
     b90:	2a 2f       	mov	r18, r26
     b92:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     b94:	82 2f       	mov	r24, r18
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	68 17       	cp	r22, r24
     b9a:	79 07       	cpc	r23, r25
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <usb_serial_write+0x7e>
     b9e:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     ba0:	82 2f       	mov	r24, r18
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	81 34       	cpi	r24, 0x41	; 65
     ba6:	91 05       	cpc	r25, r1
     ba8:	08 f0       	brcs	.+2      	; 0xbac <usb_serial_write+0x8a>
     baa:	c6 c0       	rjmp	.+396    	; 0xd38 <usb_serial_write+0x216>
     bac:	84 5b       	subi	r24, 0xB4	; 180
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	fc 01       	movw	r30, r24
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	05 90       	lpm	r0, Z+
     bb8:	f4 91       	lpm	r31, Z+
     bba:	e0 2d       	mov	r30, r0
     bbc:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     bbe:	89 91       	ld	r24, Y+
     bc0:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
     bc4:	89 91       	ld	r24, Y+
     bc6:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
     bca:	89 91       	ld	r24, Y+
     bcc:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
     bd0:	89 91       	ld	r24, Y+
     bd2:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
     bd6:	89 91       	ld	r24, Y+
     bd8:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
     bdc:	89 91       	ld	r24, Y+
     bde:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
     be2:	89 91       	ld	r24, Y+
     be4:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
     be8:	89 91       	ld	r24, Y+
     bea:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
     bee:	89 91       	ld	r24, Y+
     bf0:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
     bf4:	89 91       	ld	r24, Y+
     bf6:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
     bfa:	89 91       	ld	r24, Y+
     bfc:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
     c00:	89 91       	ld	r24, Y+
     c02:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
     c06:	89 91       	ld	r24, Y+
     c08:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
     c0c:	89 91       	ld	r24, Y+
     c0e:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
     c12:	89 91       	ld	r24, Y+
     c14:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
     c18:	89 91       	ld	r24, Y+
     c1a:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
     c1e:	89 91       	ld	r24, Y+
     c20:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
     c24:	89 91       	ld	r24, Y+
     c26:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
     c2a:	89 91       	ld	r24, Y+
     c2c:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
     c30:	89 91       	ld	r24, Y+
     c32:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
     c36:	89 91       	ld	r24, Y+
     c38:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
     c3c:	89 91       	ld	r24, Y+
     c3e:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
     c42:	89 91       	ld	r24, Y+
     c44:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
     c48:	89 91       	ld	r24, Y+
     c4a:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
     c4e:	89 91       	ld	r24, Y+
     c50:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
     c54:	89 91       	ld	r24, Y+
     c56:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
     c5a:	89 91       	ld	r24, Y+
     c5c:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
     c60:	89 91       	ld	r24, Y+
     c62:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
     c66:	89 91       	ld	r24, Y+
     c68:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
     c6c:	89 91       	ld	r24, Y+
     c6e:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
     c72:	89 91       	ld	r24, Y+
     c74:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
     c78:	89 91       	ld	r24, Y+
     c7a:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     c7e:	89 91       	ld	r24, Y+
     c80:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
     c84:	89 91       	ld	r24, Y+
     c86:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
     c8a:	89 91       	ld	r24, Y+
     c8c:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
     c90:	89 91       	ld	r24, Y+
     c92:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
     c96:	89 91       	ld	r24, Y+
     c98:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
     c9c:	89 91       	ld	r24, Y+
     c9e:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
     ca2:	89 91       	ld	r24, Y+
     ca4:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
     ca8:	89 91       	ld	r24, Y+
     caa:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
     cae:	89 91       	ld	r24, Y+
     cb0:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
     cb4:	89 91       	ld	r24, Y+
     cb6:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
     cba:	89 91       	ld	r24, Y+
     cbc:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
     cc0:	89 91       	ld	r24, Y+
     cc2:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
     cc6:	89 91       	ld	r24, Y+
     cc8:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
     ccc:	89 91       	ld	r24, Y+
     cce:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
     cd2:	89 91       	ld	r24, Y+
     cd4:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
     cd8:	89 91       	ld	r24, Y+
     cda:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
     cde:	89 91       	ld	r24, Y+
     ce0:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
     ce4:	89 91       	ld	r24, Y+
     ce6:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
     cea:	89 91       	ld	r24, Y+
     cec:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
     cf0:	89 91       	ld	r24, Y+
     cf2:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
     cf6:	89 91       	ld	r24, Y+
     cf8:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
     cfc:	89 91       	ld	r24, Y+
     cfe:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
     d02:	89 91       	ld	r24, Y+
     d04:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
     d08:	89 91       	ld	r24, Y+
     d0a:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
     d0e:	89 91       	ld	r24, Y+
     d10:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
     d14:	89 91       	ld	r24, Y+
     d16:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
     d1a:	89 91       	ld	r24, Y+
     d1c:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
     d20:	89 91       	ld	r24, Y+
     d22:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
     d26:	89 91       	ld	r24, Y+
     d28:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
     d2c:	89 91       	ld	r24, Y+
     d2e:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
     d32:	89 91       	ld	r24, Y+
     d34:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
     d38:	89 91       	ld	r24, Y+
     d3a:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     d3e:	80 91 e8 00 	lds	r24, 0x00E8
     d42:	85 fd       	sbrc	r24, 5
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <usb_serial_write+0x228>
     d46:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
     d4a:	62 1b       	sub	r22, r18
     d4c:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     d4e:	40 93 9c 01 	sts	0x019C, r20
     d52:	04 c0       	rjmp	.+8      	; 0xd5c <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
     d54:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     d56:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     d58:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     d5a:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
     d5c:	61 15       	cp	r22, r1
     d5e:	71 05       	cpc	r23, r1
     d60:	09 f0       	breq	.+2      	; 0xd64 <usb_serial_write+0x242>
     d62:	fa ce       	rjmp	.-524    	; 0xb58 <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
     d64:	3f bf       	out	0x3f, r19	; 63
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <usb_serial_write+0x24a>
	return 0;
     d6a:	8f ef       	ldi	r24, 0xFF	; 255
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
     d72:	80 91 9b 01 	lds	r24, 0x019B
     d76:	08 95       	ret

00000d78 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     d78:	1f 92       	push	r1
     d7a:	0f 92       	push	r0
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	0f 92       	push	r0
     d80:	11 24       	eor	r1, r1
     d82:	8f 93       	push	r24
     d84:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
     d86:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
     d8a:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
     d8e:	98 2f       	mov	r25, r24
     d90:	83 ff       	sbrs	r24, 3
     d92:	11 c0       	rjmp	.+34     	; 0xdb6 <__vector_10+0x3e>
		UENUM = 0;
     d94:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
     d9e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     da2:	82 e1       	ldi	r24, 0x12	; 18
     da4:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
     da8:	88 e0       	ldi	r24, 0x08	; 8
     daa:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
     dae:	10 92 9a 01 	sts	0x019A, r1
		cdc_line_rtsdtr = 0;
     db2:	10 92 9b 01 	sts	0x019B, r1
        }
	if (intbits & (1<<SOFI)) {
     db6:	92 ff       	sbrs	r25, 2
     db8:	13 c0       	rjmp	.+38     	; 0xde0 <__vector_10+0x68>
		if (usb_configuration) {
     dba:	80 91 9a 01 	lds	r24, 0x019A
     dbe:	88 23       	and	r24, r24
     dc0:	79 f0       	breq	.+30     	; 0xde0 <__vector_10+0x68>
			t = transmit_flush_timer;
     dc2:	80 91 9c 01 	lds	r24, 0x019C
			if (t) {
     dc6:	88 23       	and	r24, r24
     dc8:	59 f0       	breq	.+22     	; 0xde0 <__vector_10+0x68>
				transmit_flush_timer = --t;
     dca:	81 50       	subi	r24, 0x01	; 1
     dcc:	80 93 9c 01 	sts	0x019C, r24
				if (!t) {
     dd0:	88 23       	and	r24, r24
     dd2:	31 f4       	brne	.+12     	; 0xde0 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
     dd4:	84 e0       	ldi	r24, 0x04	; 4
     dd6:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     dda:	8a e3       	ldi	r24, 0x3A	; 58
     ddc:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	0b b6       	in	r0, 0x3b	; 59
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     e18:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     e1c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     e20:	83 ff       	sbrs	r24, 3
     e22:	3c c1       	rjmp	.+632    	; 0x109c <__vector_11+0x2ae>
                bmRequestType = UEDATX;
     e24:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
     e28:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
     e2c:	80 91 f1 00 	lds	r24, 0x00F1
     e30:	68 2f       	mov	r22, r24
     e32:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
     e34:	20 91 f1 00 	lds	r18, 0x00F1
     e38:	92 2f       	mov	r25, r18
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	68 2b       	or	r22, r24
     e3e:	79 2b       	or	r23, r25
                wIndex = UEDATX;
     e40:	80 91 f1 00 	lds	r24, 0x00F1
     e44:	a8 2f       	mov	r26, r24
     e46:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
     e48:	20 91 f1 00 	lds	r18, 0x00F1
     e4c:	92 2f       	mov	r25, r18
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	a8 2b       	or	r26, r24
     e52:	b9 2b       	or	r27, r25
                wLength = UEDATX;
     e54:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
     e58:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     e5c:	82 ef       	ldi	r24, 0xF2	; 242
     e5e:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     e62:	36 30       	cpi	r19, 0x06	; 6
     e64:	09 f0       	breq	.+2      	; 0xe68 <__vector_11+0x7a>
     e66:	5a c0       	rjmp	.+180    	; 0xf1c <__vector_11+0x12e>
     e68:	2b e6       	ldi	r18, 0x6B	; 107
     e6a:	31 e0       	ldi	r19, 0x01	; 1
     e6c:	a9 01       	movw	r20, r18
     e6e:	45 50       	subi	r20, 0x05	; 5
     e70:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
     e72:	f9 01       	movw	r30, r18
     e74:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
     e76:	85 91       	lpm	r24, Z+
     e78:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
     e7a:	86 17       	cp	r24, r22
     e7c:	97 07       	cpc	r25, r23
     e7e:	01 f5       	brne	.+64     	; 0xec0 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
     e80:	fa 01       	movw	r30, r20
     e82:	85 91       	lpm	r24, Z+
     e84:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
     e86:	8a 17       	cp	r24, r26
     e88:	9b 07       	cpc	r25, r27
     e8a:	d1 f4       	brne	.+52     	; 0xec0 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
     e8c:	9a 01       	movw	r18, r20
     e8e:	2e 5f       	subi	r18, 0xFE	; 254
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
     e92:	f9 01       	movw	r30, r18
     e94:	65 91       	lpm	r22, Z+
     e96:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
     e98:	2e 5f       	subi	r18, 0xFE	; 254
     e9a:	3f 4f       	sbci	r19, 0xFF	; 255
     e9c:	f9 01       	movw	r30, r18
     e9e:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
     ea0:	21 2f       	mov	r18, r17
     ea2:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     ea4:	90 2f       	mov	r25, r16
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	28 2b       	or	r18, r24
     eaa:	39 2b       	or	r19, r25
     eac:	2f 3f       	cpi	r18, 0xFF	; 255
     eae:	31 05       	cpc	r19, r1
     eb0:	19 f0       	breq	.+6      	; 0xeb8 <__vector_11+0xca>
     eb2:	10 f0       	brcs	.+4      	; 0xeb8 <__vector_11+0xca>
     eb4:	2f ef       	ldi	r18, 0xFF	; 255
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	24 17       	cp	r18, r20
     eba:	58 f4       	brcc	.+22     	; 0xed2 <__vector_11+0xe4>
     ebc:	42 2f       	mov	r20, r18
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <__vector_11+0xe4>
     ec0:	29 5f       	subi	r18, 0xF9	; 249
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	49 5f       	subi	r20, 0xF9	; 249
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     ec8:	f1 e0       	ldi	r31, 0x01	; 1
     eca:	25 39       	cpi	r18, 0x95	; 149
     ecc:	3f 07       	cpc	r19, r31
     ece:	89 f6       	brne	.-94     	; 0xe72 <__vector_11+0x84>
     ed0:	e5 c0       	rjmp	.+458    	; 0x109c <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     ed2:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     ed4:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	c9 01       	movw	r24, r18
     ede:	85 70       	andi	r24, 0x05	; 5
     ee0:	90 70       	andi	r25, 0x00	; 0
     ee2:	89 2b       	or	r24, r25
     ee4:	b9 f3       	breq	.-18     	; 0xed4 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
     ee6:	22 fd       	sbrc	r18, 2
     ee8:	dc c0       	rjmp	.+440    	; 0x10a2 <__vector_11+0x2b4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     eea:	34 2f       	mov	r19, r20
     eec:	41 31       	cpi	r20, 0x11	; 17
     eee:	08 f0       	brcs	.+2      	; 0xef2 <__vector_11+0x104>
     ef0:	30 e1       	ldi	r19, 0x10	; 16
     ef2:	23 2f       	mov	r18, r19
     ef4:	cb 01       	movw	r24, r22
     ef6:	06 c0       	rjmp	.+12     	; 0xf04 <__vector_11+0x116>
				for (i = n; i; i--) {
     ef8:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	e4 91       	lpm	r30, Z+
     efe:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	22 23       	and	r18, r18
     f06:	c1 f7       	brne	.-16     	; 0xef8 <__vector_11+0x10a>
     f08:	63 0f       	add	r22, r19
     f0a:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     f0c:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f0e:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     f12:	44 23       	and	r20, r20
     f14:	f9 f6       	brne	.-66     	; 0xed4 <__vector_11+0xe6>
     f16:	30 31       	cpi	r19, 0x10	; 16
     f18:	e9 f2       	breq	.-70     	; 0xed4 <__vector_11+0xe6>
     f1a:	c3 c0       	rjmp	.+390    	; 0x10a2 <__vector_11+0x2b4>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     f1c:	35 30       	cpi	r19, 0x05	; 5
     f1e:	61 f4       	brne	.+24     	; 0xf38 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f20:	8e ef       	ldi	r24, 0xFE	; 254
     f22:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f26:	80 91 e8 00 	lds	r24, 0x00E8
     f2a:	80 ff       	sbrs	r24, 0
     f2c:	fc cf       	rjmp	.-8      	; 0xf26 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     f2e:	86 2f       	mov	r24, r22
     f30:	80 68       	ori	r24, 0x80	; 128
     f32:	80 93 e3 00 	sts	0x00E3, r24
     f36:	b5 c0       	rjmp	.+362    	; 0x10a2 <__vector_11+0x2b4>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     f38:	39 30       	cpi	r19, 0x09	; 9
     f3a:	51 f5       	brne	.+84     	; 0xf90 <__vector_11+0x1a2>
     f3c:	44 23       	and	r20, r20
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__vector_11+0x154>
     f40:	ad c0       	rjmp	.+346    	; 0x109c <__vector_11+0x2ae>
			usb_configuration = wValue;
     f42:	60 93 9a 01 	sts	0x019A, r22
			cdc_line_rtsdtr = 0;
     f46:	10 92 9b 01 	sts	0x019B, r1
			transmit_flush_timer = 0;
     f4a:	10 92 9c 01 	sts	0x019C, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f4e:	8e ef       	ldi	r24, 0xFE	; 254
     f50:	80 93 e8 00 	sts	0x00E8, r24
     f54:	8e e8       	ldi	r24, 0x8E	; 142
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     f5a:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
     f5e:	fc 01       	movw	r30, r24
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	e4 91       	lpm	r30, Z+
				UECONX = en;
     f64:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
     f68:	ee 23       	and	r30, r30
     f6a:	69 f0       	breq	.+26     	; 0xf86 <__vector_11+0x198>
					UECFG0X = pgm_read_byte(cfg++);
     f6c:	ac 01       	movw	r20, r24
     f6e:	4f 5f       	subi	r20, 0xFF	; 255
     f70:	5f 4f       	sbci	r21, 0xFF	; 255
     f72:	fc 01       	movw	r30, r24
     f74:	84 91       	lpm	r24, Z+
     f76:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
     f7a:	ca 01       	movw	r24, r20
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	fa 01       	movw	r30, r20
     f80:	34 91       	lpm	r19, Z+
     f82:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     f86:	2f 5f       	subi	r18, 0xFF	; 255
     f88:	25 30       	cpi	r18, 0x05	; 5
     f8a:	39 f7       	brne	.-50     	; 0xf5a <__vector_11+0x16c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
     f8c:	8e e1       	ldi	r24, 0x1E	; 30
     f8e:	81 c0       	rjmp	.+258    	; 0x1092 <__vector_11+0x2a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
     f90:	38 30       	cpi	r19, 0x08	; 8
     f92:	61 f4       	brne	.+24     	; 0xfac <__vector_11+0x1be>
     f94:	40 38       	cpi	r20, 0x80	; 128
     f96:	09 f0       	breq	.+2      	; 0xf9a <__vector_11+0x1ac>
     f98:	81 c0       	rjmp	.+258    	; 0x109c <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f9a:	80 91 e8 00 	lds	r24, 0x00E8
     f9e:	80 ff       	sbrs	r24, 0
     fa0:	fc cf       	rjmp	.-8      	; 0xf9a <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
     fa2:	80 91 9a 01 	lds	r24, 0x019A
     fa6:	80 93 f1 00 	sts	0x00F1, r24
     faa:	50 c0       	rjmp	.+160    	; 0x104c <__vector_11+0x25e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
     fac:	31 32       	cpi	r19, 0x21	; 33
     fae:	89 f4       	brne	.+34     	; 0xfd2 <__vector_11+0x1e4>
     fb0:	41 3a       	cpi	r20, 0xA1	; 161
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <__vector_11+0x1c8>
     fb4:	73 c0       	rjmp	.+230    	; 0x109c <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     fb6:	80 91 e8 00 	lds	r24, 0x00E8
     fba:	80 ff       	sbrs	r24, 0
     fbc:	fc cf       	rjmp	.-8      	; 0xfb6 <__vector_11+0x1c8>
     fbe:	e3 e9       	ldi	r30, 0x93	; 147
     fc0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
     fc2:	81 91       	ld	r24, Z+
     fc4:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	ea 39       	cpi	r30, 0x9A	; 154
     fcc:	f8 07       	cpc	r31, r24
     fce:	c9 f7       	brne	.-14     	; 0xfc2 <__vector_11+0x1d4>
     fd0:	3d c0       	rjmp	.+122    	; 0x104c <__vector_11+0x25e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
     fd2:	30 32       	cpi	r19, 0x20	; 32
     fd4:	a1 f4       	brne	.+40     	; 0xffe <__vector_11+0x210>
     fd6:	41 32       	cpi	r20, 0x21	; 33
     fd8:	09 f0       	breq	.+2      	; 0xfdc <__vector_11+0x1ee>
     fda:	60 c0       	rjmp	.+192    	; 0x109c <__vector_11+0x2ae>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
     fdc:	80 91 e8 00 	lds	r24, 0x00E8
     fe0:	82 ff       	sbrs	r24, 2
     fe2:	fc cf       	rjmp	.-8      	; 0xfdc <__vector_11+0x1ee>
     fe4:	e3 e9       	ldi	r30, 0x93	; 147
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
     fe8:	80 91 f1 00 	lds	r24, 0x00F1
     fec:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	ea 39       	cpi	r30, 0x9A	; 154
     ff2:	f8 07       	cpc	r31, r24
     ff4:	c9 f7       	brne	.-14     	; 0xfe8 <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
     ff6:	8b ef       	ldi	r24, 0xFB	; 251
     ff8:	80 93 e8 00 	sts	0x00E8, r24
     ffc:	27 c0       	rjmp	.+78     	; 0x104c <__vector_11+0x25e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
     ffe:	32 32       	cpi	r19, 0x22	; 34
    1000:	51 f4       	brne	.+20     	; 0x1016 <__vector_11+0x228>
    1002:	41 32       	cpi	r20, 0x21	; 33
    1004:	09 f0       	breq	.+2      	; 0x1008 <__vector_11+0x21a>
    1006:	4a c0       	rjmp	.+148    	; 0x109c <__vector_11+0x2ae>
			cdc_line_rtsdtr = wValue;
    1008:	60 93 9b 01 	sts	0x019B, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    100c:	80 91 e8 00 	lds	r24, 0x00E8
    1010:	80 ff       	sbrs	r24, 0
    1012:	fc cf       	rjmp	.-8      	; 0x100c <__vector_11+0x21e>
    1014:	1b c0       	rjmp	.+54     	; 0x104c <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1016:	33 23       	and	r19, r19
    1018:	e9 f4       	brne	.+58     	; 0x1054 <__vector_11+0x266>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    101a:	80 91 e8 00 	lds	r24, 0x00E8
    101e:	80 ff       	sbrs	r24, 0
    1020:	fc cf       	rjmp	.-8      	; 0x101a <__vector_11+0x22c>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1022:	42 38       	cpi	r20, 0x82	; 130
    1024:	11 f0       	breq	.+4      	; 0x102a <__vector_11+0x23c>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	0d c0       	rjmp	.+26     	; 0x1044 <__vector_11+0x256>
				UENUM = wIndex;
    102a:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    102e:	80 91 eb 00 	lds	r24, 0x00EB
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	25 e0       	ldi	r18, 0x05	; 5
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	2a 95       	dec	r18
    103c:	e1 f7       	brne	.-8      	; 0x1036 <__vector_11+0x248>
    103e:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    1040:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    1044:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    1048:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    104c:	8e ef       	ldi	r24, 0xFE	; 254
    104e:	80 93 e8 00 	sts	0x00E8, r24
    1052:	27 c0       	rjmp	.+78     	; 0x10a2 <__vector_11+0x2b4>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1054:	31 30       	cpi	r19, 0x01	; 1
    1056:	11 f0       	breq	.+4      	; 0x105c <__vector_11+0x26e>
    1058:	33 30       	cpi	r19, 0x03	; 3
    105a:	01 f5       	brne	.+64     	; 0x109c <__vector_11+0x2ae>
    105c:	42 30       	cpi	r20, 0x02	; 2
    105e:	f1 f4       	brne	.+60     	; 0x109c <__vector_11+0x2ae>
    1060:	67 2b       	or	r22, r23
    1062:	e1 f4       	brne	.+56     	; 0x109c <__vector_11+0x2ae>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    1064:	2a 2f       	mov	r18, r26
    1066:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1068:	82 2f       	mov	r24, r18
    106a:	81 50       	subi	r24, 0x01	; 1
    106c:	84 30       	cpi	r24, 0x04	; 4
    106e:	b0 f4       	brcc	.+44     	; 0x109c <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1070:	8e ef       	ldi	r24, 0xFE	; 254
    1072:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1076:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    107a:	33 30       	cpi	r19, 0x03	; 3
    107c:	79 f0       	breq	.+30     	; 0x109c <__vector_11+0x2ae>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    107e:	89 e1       	ldi	r24, 0x19	; 25
    1080:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <__vector_11+0x2a0>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	2a 95       	dec	r18
    1090:	e2 f7       	brpl	.-8      	; 0x108a <__vector_11+0x29c>
    1092:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    1096:	10 92 ea 00 	sts	0x00EA, r1
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <__vector_11+0x2b4>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    109c:	81 e2       	ldi	r24, 0x21	; 33
    109e:	80 93 eb 00 	sts	0x00EB, r24
}
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	0f 90       	pop	r0
    10c0:	0b be       	out	0x3b, r0	; 59
    10c2:	0f 90       	pop	r0
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	0f 90       	pop	r0
    10c8:	1f 90       	pop	r1
    10ca:	18 95       	reti

000010cc <adc_start>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
    10cc:	ea e7       	ldi	r30, 0x7A	; 122
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	96 e8       	ldi	r25, 0x86	; 134
    10d2:	90 83       	st	Z, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
    10d4:	98 2f       	mov	r25, r24
    10d6:	90 72       	andi	r25, 0x20	; 32
    10d8:	90 68       	ori	r25, 0x80	; 128
    10da:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
    10de:	8f 71       	andi	r24, 0x1F	; 31
    10e0:	86 2b       	or	r24, r22
    10e2:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
    10e6:	10 92 9e 01 	sts	0x019E, r1
	tail = 0;				// and then begin auto trigger mode
    10ea:	10 92 9f 01 	sts	0x019F, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
    10ee:	8e ee       	ldi	r24, 0xEE	; 238
    10f0:	80 83       	st	Z, r24
	sei();
    10f2:	78 94       	sei
}
    10f4:	08 95       	ret

000010f6 <adc_read>:
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
    10f6:	80 91 9e 01 	lds	r24, 0x019E
		t = tail;		// wait for data in buffer
    10fa:	e0 91 9f 01 	lds	r30, 0x019F
	} while (h == t);
    10fe:	8e 17       	cp	r24, r30
    1100:	d1 f3       	breq	.-12     	; 0x10f6 <adc_read>
	if (++t >= BUFSIZE) t = 0;
    1102:	8e 2f       	mov	r24, r30
    1104:	8f 5f       	subi	r24, 0xFF	; 255
    1106:	82 30       	cpi	r24, 0x02	; 2
    1108:	08 f0       	brcs	.+2      	; 0x110c <adc_read+0x16>
    110a:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
    110c:	e8 2f       	mov	r30, r24
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	ee 0f       	add	r30, r30
    1112:	ff 1f       	adc	r31, r31
    1114:	e0 56       	subi	r30, 0x60	; 96
    1116:	fe 4f       	sbci	r31, 0xFE	; 254
    1118:	20 81       	ld	r18, Z
    111a:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
    111c:	80 93 9f 01 	sts	0x019F, r24
	return val;
}
    1120:	c9 01       	movw	r24, r18
    1122:	08 95       	ret

00001124 <__vector_29>:

ISR(ADC_vect)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	0b b6       	in	r0, 0x3b	; 59
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	2f 93       	push	r18
    1134:	3f 93       	push	r19
    1136:	8f 93       	push	r24
    1138:	9f 93       	push	r25
    113a:	ef 93       	push	r30
    113c:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
    113e:	20 91 78 00 	lds	r18, 0x0078
    1142:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
    1146:	90 91 9e 01 	lds	r25, 0x019E
    114a:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
    114c:	92 30       	cpi	r25, 0x02	; 2
    114e:	08 f0       	brcs	.+2      	; 0x1152 <__vector_29+0x2e>
    1150:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
    1152:	80 91 9f 01 	lds	r24, 0x019F
    1156:	98 17       	cp	r25, r24
    1158:	51 f0       	breq	.+20     	; 0x116e <__vector_29+0x4a>
		buffer[h] = val;	// put new data into buffer
    115a:	e9 2f       	mov	r30, r25
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	e0 56       	subi	r30, 0x60	; 96
    1164:	fe 4f       	sbci	r31, 0xFE	; 254
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	20 83       	st	Z, r18
		head = h;
    116a:	90 93 9e 01 	sts	0x019E, r25
	}
}
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	3f 91       	pop	r19
    1178:	2f 91       	pop	r18
    117a:	0f 90       	pop	r0
    117c:	0b be       	out	0x3b, r0	; 59
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <_exit>:
    1188:	f8 94       	cli

0000118a <__stop_program>:
    118a:	ff cf       	rjmp	.-2      	; 0x118a <__stop_program>
