
lightctl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000006d0  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  0000076c  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000158  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000031c  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001227  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004da  00000000  00000000  0000250f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017f8  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  000041e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000054b  00000000  00000000  00004434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001244  00000000  00000000  0000497f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00005bc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR3AH = 0x00;
	OCR3AL = 0x00; // Register used by 8bit pwm
	OCR3BH = 0x00;
	OCR3BL = 0x00; // Register used by 8bit pwm
	OCR3CH = 0x00;
	OCR3CL = 0x00; // Register used by 8bit pwm
   0:	ba c0       	rjmp	.+372    	; 0x176 <__ctors_end>
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
   2:	00 00       	nop
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
	sei();
}

uint8_t adc_available(void)
{
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	51 c1       	rjmp	.+674    	; 0x2cc <__vector_10>
  2a:	00 00       	nop
  2c:	8a c1       	rjmp	.+788    	; 0x342 <__vector_11>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	fd c2       	rjmp	.+1530   	; 0x670 <__vector_29>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop
  98:	89 c0       	rjmp	.+274    	; 0x1ac <__bad_interrupt>
  9a:	00 00       	nop
  9c:	87 c0       	rjmp	.+270    	; 0x1ac <__bad_interrupt>
  9e:	00 00       	nop
  a0:	85 c0       	rjmp	.+266    	; 0x1ac <__bad_interrupt>
  a2:	00 00       	nop
  a4:	83 c0       	rjmp	.+262    	; 0x1ac <__bad_interrupt>
  a6:	00 00       	nop
  a8:	81 c0       	rjmp	.+258    	; 0x1ac <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
  bc:	00 00 35 01 04 01 03 09 04 39 01 14 02 03 09 04     ..5......9......
  cc:	4f 01 16 03 03 09 04 67 01 0c                       O......g..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 149:	6d 00 65 00 00 00                                   m.e...

0000014f <string2>:
 14f:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 15f:	69 00 61 00 6c 00 00 00                             i.a.l...

00000167 <string3>:
 167:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00 00        ..1.2.3.4.5....

00000176 <__ctors_end>:
 176:	11 24       	eor	r1, r1
 178:	1f be       	out	0x3f, r1	; 63
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	da e0       	ldi	r29, 0x0A	; 10
 17e:	de bf       	out	0x3e, r29	; 62
 180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
 182:	11 e0       	ldi	r17, 0x01	; 1
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	e0 ed       	ldi	r30, 0xD0	; 208
 18a:	f6 e0       	ldi	r31, 0x06	; 6
 18c:	02 c0       	rjmp	.+4      	; 0x192 <.do_copy_data_start>

0000018e <.do_copy_data_loop>:
 18e:	05 90       	lpm	r0, Z+
 190:	0d 92       	st	X+, r0

00000192 <.do_copy_data_start>:
 192:	a8 30       	cpi	r26, 0x08	; 8
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <.do_copy_data_loop>

00000198 <__do_clear_bss>:
 198:	11 e0       	ldi	r17, 0x01	; 1
 19a:	a8 e0       	ldi	r26, 0x08	; 8
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a2 31       	cpi	r26, 0x12	; 18
 1a4:	b1 07       	cpc	r27, r17
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	88 d0       	rcall	.+272    	; 0x2ba <main>
 1aa:	90 c2       	rjmp	.+1312   	; 0x6cc <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <setup_pwms>:

void setup_pwms(void)
{
	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
 1ae:	84 b1       	in	r24, 0x04	; 4
 1b0:	80 6f       	ori	r24, 0xF0	; 240
 1b2:	84 b9       	out	0x04, r24	; 4
//	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
	DDRD |= (1 << DDD0) | (1 << DDD1);
 1b4:	8a b1       	in	r24, 0x0a	; 10
 1b6:	83 60       	ori	r24, 0x03	; 3
 1b8:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
 1ba:	93 ea       	ldi	r25, 0xA3	; 163
 1bc:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 1c2:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
 1c6:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 1ca:	91 ea       	ldi	r25, 0xA1	; 161
 1cc:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
 1d0:	89 e0       	ldi	r24, 0x09	; 9
 1d2:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
 1d6:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
 1da:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
 1de:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
 1e2:	10 92 92 00 	sts	0x0092, r1
}
 1e6:	08 95       	ret

000001e8 <sensor_display>:

void send_str(const char *s);
uint8_t recv_str(char *buf, uint8_t size);
void parse_and_execute_command(const char *buf, uint8_t num);

void sensor_display(){
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
            OCR2B = off;
        }
        else{
        if (val < 1000){
            OCR0B = off;
            OCR1A = full;
 1ee:	cf ef       	ldi	r28, 0xFF	; 255
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
            OCR2A = off;
            OCR2B = full;
 1f2:	1f ef       	ldi	r17, 0xFF	; 255
void sensor_display(){
    uint8_t full = 255;
    uint8_t off = 0;
    uint16_t val;
    while(1){
        adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	60 e4       	ldi	r22, 0x40	; 64
 1f8:	0f d2       	rcall	.+1054   	; 0x618 <adc_start>
        val = adc_read();
 1fa:	23 d2       	rcall	.+1094   	; 0x642 <adc_read>
 1fc:	9c 01       	movw	r18, r24
        if (val < 100){
 1fe:	84 36       	cpi	r24, 0x64	; 100
 200:	91 05       	cpc	r25, r1
 202:	10 f4       	brcc	.+4      	; 0x208 <sensor_display+0x20>
            OCR0B = off;
 204:	18 bc       	out	0x28, r1	; 40
 206:	16 c0       	rjmp	.+44     	; 0x234 <sensor_display+0x4c>
            OCR1A = off;
            OCR2A = off;
            OCR2B = off;
        }
        else{
        if (val < 200){
 208:	88 3c       	cpi	r24, 0xC8	; 200
 20a:	91 05       	cpc	r25, r1
 20c:	10 f4       	brcc	.+4      	; 0x212 <sensor_display+0x2a>
            OCR0B = off;
 20e:	18 bc       	out	0x28, r1	; 40
 210:	1b c0       	rjmp	.+54     	; 0x248 <sensor_display+0x60>
            OCR1A = off;
            OCR2A = off;
            OCR2B = full;
        }
        else{
        if (val < 300){
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	2c 32       	cpi	r18, 0x2C	; 44
 216:	38 07       	cpc	r19, r24
 218:	10 f4       	brcc	.+4      	; 0x21e <sensor_display+0x36>
            OCR0B = off;
 21a:	18 bc       	out	0x28, r1	; 40
 21c:	1f c0       	rjmp	.+62     	; 0x25c <sensor_display+0x74>
            OCR1A = off;
            OCR2A = full;
            OCR2B = off;
        }
        else{
        if (val < 400){
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	20 39       	cpi	r18, 0x90	; 144
 222:	38 07       	cpc	r19, r24
 224:	10 f4       	brcc	.+4      	; 0x22a <sensor_display+0x42>
            OCR0B = off;
 226:	18 bc       	out	0x28, r1	; 40
 228:	25 c0       	rjmp	.+74     	; 0x274 <sensor_display+0x8c>
            OCR1A = off;
            OCR2A = full;
            OCR2B = full;
        }      
        else{
        if (val < 500){
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	24 3f       	cpi	r18, 0xF4	; 244
 22e:	38 07       	cpc	r19, r24
 230:	30 f4       	brcc	.+12     	; 0x23e <sensor_display+0x56>
            OCR0B = full;
 232:	18 bd       	out	0x28, r17	; 40
            OCR1A = off;
 234:	10 92 89 00 	sts	0x0089, r1
 238:	10 92 88 00 	sts	0x0088, r1
 23c:	2b c0       	rjmp	.+86     	; 0x294 <sensor_display+0xac>
            OCR2A = off;
            OCR2B = off;
        }
        else{
        if (val < 600){
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	28 35       	cpi	r18, 0x58	; 88
 242:	38 07       	cpc	r19, r24
 244:	30 f4       	brcc	.+12     	; 0x252 <sensor_display+0x6a>
            OCR0B = full;
 246:	18 bd       	out	0x28, r17	; 40
            OCR1A = off;
 248:	10 92 89 00 	sts	0x0089, r1
 24c:	10 92 88 00 	sts	0x0088, r1
 250:	2f c0       	rjmp	.+94     	; 0x2b0 <sensor_display+0xc8>
            OCR2A = off;
            OCR2B = full;
        }  
        else{
        if (val < 700){
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	2c 3b       	cpi	r18, 0xBC	; 188
 256:	38 07       	cpc	r19, r24
 258:	40 f4       	brcc	.+16     	; 0x26a <sensor_display+0x82>
            OCR0B = full;
 25a:	18 bd       	out	0x28, r17	; 40
            OCR1A = off;
 25c:	10 92 89 00 	sts	0x0089, r1
 260:	10 92 88 00 	sts	0x0088, r1
            OCR2A = full;
 264:	10 93 b3 00 	sts	0x00B3, r17
 268:	17 c0       	rjmp	.+46     	; 0x298 <sensor_display+0xb0>
            OCR2B = off;
        } 
        else{
        if (val < 800){
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	20 32       	cpi	r18, 0x20	; 32
 26e:	38 07       	cpc	r19, r24
 270:	40 f4       	brcc	.+16     	; 0x282 <sensor_display+0x9a>
            OCR0B = full;
 272:	18 bd       	out	0x28, r17	; 40
            OCR1A = off;
 274:	10 92 89 00 	sts	0x0089, r1
 278:	10 92 88 00 	sts	0x0088, r1
            OCR2A = full;
 27c:	10 93 b3 00 	sts	0x00B3, r17
 280:	19 c0       	rjmp	.+50     	; 0x2b4 <sensor_display+0xcc>
            OCR2B = full;
        } 
        else{
        if (val < 900){
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	24 38       	cpi	r18, 0x84	; 132
 286:	38 07       	cpc	r19, r24
 288:	50 f4       	brcc	.+20     	; 0x29e <sensor_display+0xb6>
            OCR0B = off;
 28a:	18 bc       	out	0x28, r1	; 40
            OCR1A = full;
 28c:	d0 93 89 00 	sts	0x0089, r29
 290:	c0 93 88 00 	sts	0x0088, r28
            OCR2A = off;
 294:	10 92 b3 00 	sts	0x00B3, r1
            OCR2B = off;
 298:	10 92 b4 00 	sts	0x00B4, r1
 29c:	ab cf       	rjmp	.-170    	; 0x1f4 <sensor_display+0xc>
        }
        else{
        if (val < 1000){
 29e:	28 5e       	subi	r18, 0xE8	; 232
 2a0:	33 40       	sbci	r19, 0x03	; 3
 2a2:	08 f0       	brcs	.+2      	; 0x2a6 <sensor_display+0xbe>
 2a4:	a7 cf       	rjmp	.-178    	; 0x1f4 <sensor_display+0xc>
            OCR0B = off;
 2a6:	18 bc       	out	0x28, r1	; 40
            OCR1A = full;
 2a8:	d0 93 89 00 	sts	0x0089, r29
 2ac:	c0 93 88 00 	sts	0x0088, r28
            OCR2A = off;
 2b0:	10 92 b3 00 	sts	0x00B3, r1
            OCR2B = full;
 2b4:	10 93 b4 00 	sts	0x00B4, r17
 2b8:	9d cf       	rjmp	.-198    	; 0x1f4 <sensor_display+0xc>

000002ba <main>:
int main(void)
{
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(2);
 2ba:	80 e8       	ldi	r24, 0x80	; 128
 2bc:	80 93 61 00 	sts	0x0061, r24
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();
 2c6:	73 df       	rcall	.-282    	; 0x1ae <setup_pwms>

	while (1){
            sensor_display();
 2c8:	8f df       	rcall	.-226    	; 0x1e8 <sensor_display>
 2ca:	fe cf       	rjmp	.-4      	; 0x2c8 <main+0xe>

000002cc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 2da:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 2de:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 2e2:	98 2f       	mov	r25, r24
 2e4:	83 ff       	sbrs	r24, 3
 2e6:	11 c0       	rjmp	.+34     	; 0x30a <__vector_10+0x3e>
		UENUM = 0;
 2e8:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 2f2:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 2f6:	82 e1       	ldi	r24, 0x12	; 18
 2f8:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 2fc:	88 e0       	ldi	r24, 0x08	; 8
 2fe:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 302:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
 306:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
 30a:	92 ff       	sbrs	r25, 2
 30c:	13 c0       	rjmp	.+38     	; 0x334 <__vector_10+0x68>
		if (usb_configuration) {
 30e:	80 91 08 01 	lds	r24, 0x0108
 312:	88 23       	and	r24, r24
 314:	79 f0       	breq	.+30     	; 0x334 <__vector_10+0x68>
			t = transmit_flush_timer;
 316:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
 31a:	88 23       	and	r24, r24
 31c:	59 f0       	breq	.+22     	; 0x334 <__vector_10+0x68>
				transmit_flush_timer = --t;
 31e:	81 50       	subi	r24, 0x01	; 1
 320:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
 324:	88 23       	and	r24, r24
 326:	31 f4       	brne	.+12     	; 0x334 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
 328:	84 e0       	ldi	r24, 0x04	; 4
 32a:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 32e:	8a e3       	ldi	r24, 0x3A	; 58
 330:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 368:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 36c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 370:	83 ff       	sbrs	r24, 3
 372:	3c c1       	rjmp	.+632    	; 0x5ec <__vector_11+0x2aa>
                bmRequestType = UEDATX;
 374:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 378:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 37c:	80 91 f1 00 	lds	r24, 0x00F1
 380:	68 2f       	mov	r22, r24
 382:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 384:	20 91 f1 00 	lds	r18, 0x00F1
 388:	92 2f       	mov	r25, r18
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	68 2b       	or	r22, r24
 38e:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 390:	80 91 f1 00 	lds	r24, 0x00F1
 394:	a8 2f       	mov	r26, r24
 396:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 398:	20 91 f1 00 	lds	r18, 0x00F1
 39c:	92 2f       	mov	r25, r18
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	a8 2b       	or	r26, r24
 3a2:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 3a4:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 3a8:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 3ac:	82 ef       	ldi	r24, 0xF2	; 242
 3ae:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 3b2:	36 30       	cpi	r19, 0x06	; 6
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <__vector_11+0x76>
 3b6:	5a c0       	rjmp	.+180    	; 0x46c <__vector_11+0x12a>
 3b8:	23 eb       	ldi	r18, 0xB3	; 179
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	a9 01       	movw	r20, r18
 3be:	45 50       	subi	r20, 0x05	; 5
 3c0:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 3c2:	f9 01       	movw	r30, r18
 3c4:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 3c6:	85 91       	lpm	r24, Z+
 3c8:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 3ca:	86 17       	cp	r24, r22
 3cc:	97 07       	cpc	r25, r23
 3ce:	01 f5       	brne	.+64     	; 0x410 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 3d0:	fa 01       	movw	r30, r20
 3d2:	85 91       	lpm	r24, Z+
 3d4:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 3d6:	8a 17       	cp	r24, r26
 3d8:	9b 07       	cpc	r25, r27
 3da:	d1 f4       	brne	.+52     	; 0x410 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 3dc:	9a 01       	movw	r18, r20
 3de:	2e 5f       	subi	r18, 0xFE	; 254
 3e0:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 3e2:	f9 01       	movw	r30, r18
 3e4:	65 91       	lpm	r22, Z+
 3e6:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 3e8:	2e 5f       	subi	r18, 0xFE	; 254
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	f9 01       	movw	r30, r18
 3ee:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 3f0:	21 2f       	mov	r18, r17
 3f2:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 3f4:	90 2f       	mov	r25, r16
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	28 2b       	or	r18, r24
 3fa:	39 2b       	or	r19, r25
 3fc:	2f 3f       	cpi	r18, 0xFF	; 255
 3fe:	31 05       	cpc	r19, r1
 400:	19 f0       	breq	.+6      	; 0x408 <__vector_11+0xc6>
 402:	10 f0       	brcs	.+4      	; 0x408 <__vector_11+0xc6>
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	24 17       	cp	r18, r20
 40a:	58 f4       	brcc	.+22     	; 0x422 <__vector_11+0xe0>
 40c:	42 2f       	mov	r20, r18
 40e:	09 c0       	rjmp	.+18     	; 0x422 <__vector_11+0xe0>
 410:	29 5f       	subi	r18, 0xF9	; 249
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	49 5f       	subi	r20, 0xF9	; 249
 416:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	2d 3d       	cpi	r18, 0xDD	; 221
 41c:	3f 07       	cpc	r19, r31
 41e:	89 f6       	brne	.-94     	; 0x3c2 <__vector_11+0x80>
 420:	e5 c0       	rjmp	.+458    	; 0x5ec <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 422:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 424:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	c9 01       	movw	r24, r18
 42e:	85 70       	andi	r24, 0x05	; 5
 430:	90 70       	andi	r25, 0x00	; 0
 432:	89 2b       	or	r24, r25
 434:	b9 f3       	breq	.-18     	; 0x424 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
 436:	22 fd       	sbrc	r18, 2
 438:	dc c0       	rjmp	.+440    	; 0x5f2 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 43a:	34 2f       	mov	r19, r20
 43c:	41 31       	cpi	r20, 0x11	; 17
 43e:	08 f0       	brcs	.+2      	; 0x442 <__vector_11+0x100>
 440:	30 e1       	ldi	r19, 0x10	; 16
 442:	23 2f       	mov	r18, r19
 444:	cb 01       	movw	r24, r22
 446:	06 c0       	rjmp	.+12     	; 0x454 <__vector_11+0x112>
				for (i = n; i; i--) {
 448:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	e4 91       	lpm	r30, Z+
 44e:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 452:	21 50       	subi	r18, 0x01	; 1
 454:	22 23       	and	r18, r18
 456:	c1 f7       	brne	.-16     	; 0x448 <__vector_11+0x106>
 458:	63 0f       	add	r22, r19
 45a:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 45c:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 45e:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 462:	44 23       	and	r20, r20
 464:	f9 f6       	brne	.-66     	; 0x424 <__vector_11+0xe2>
 466:	30 31       	cpi	r19, 0x10	; 16
 468:	e9 f2       	breq	.-70     	; 0x424 <__vector_11+0xe2>
 46a:	c3 c0       	rjmp	.+390    	; 0x5f2 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 46c:	35 30       	cpi	r19, 0x05	; 5
 46e:	61 f4       	brne	.+24     	; 0x488 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 470:	8e ef       	ldi	r24, 0xFE	; 254
 472:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 476:	80 91 e8 00 	lds	r24, 0x00E8
 47a:	80 ff       	sbrs	r24, 0
 47c:	fc cf       	rjmp	.-8      	; 0x476 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 47e:	86 2f       	mov	r24, r22
 480:	80 68       	ori	r24, 0x80	; 128
 482:	80 93 e3 00 	sts	0x00E3, r24
 486:	b5 c0       	rjmp	.+362    	; 0x5f2 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 488:	39 30       	cpi	r19, 0x09	; 9
 48a:	51 f5       	brne	.+84     	; 0x4e0 <__vector_11+0x19e>
 48c:	44 23       	and	r20, r20
 48e:	09 f0       	breq	.+2      	; 0x492 <__vector_11+0x150>
 490:	ad c0       	rjmp	.+346    	; 0x5ec <__vector_11+0x2aa>
			usb_configuration = wValue;
 492:	60 93 08 01 	sts	0x0108, r22
			cdc_line_rtsdtr = 0;
 496:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
 49a:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 49e:	8e ef       	ldi	r24, 0xFE	; 254
 4a0:	80 93 e8 00 	sts	0x00E8, r24
 4a4:	86 ed       	ldi	r24, 0xD6	; 214
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 4aa:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 4ae:	fc 01       	movw	r30, r24
 4b0:	01 96       	adiw	r24, 0x01	; 1
 4b2:	e4 91       	lpm	r30, Z+
				UECONX = en;
 4b4:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 4b8:	ee 23       	and	r30, r30
 4ba:	69 f0       	breq	.+26     	; 0x4d6 <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
 4bc:	ac 01       	movw	r20, r24
 4be:	4f 5f       	subi	r20, 0xFF	; 255
 4c0:	5f 4f       	sbci	r21, 0xFF	; 255
 4c2:	fc 01       	movw	r30, r24
 4c4:	84 91       	lpm	r24, Z+
 4c6:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 4ca:	ca 01       	movw	r24, r20
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	fa 01       	movw	r30, r20
 4d0:	34 91       	lpm	r19, Z+
 4d2:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 4d6:	2f 5f       	subi	r18, 0xFF	; 255
 4d8:	25 30       	cpi	r18, 0x05	; 5
 4da:	39 f7       	brne	.-50     	; 0x4aa <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 4dc:	8e e1       	ldi	r24, 0x1E	; 30
 4de:	81 c0       	rjmp	.+258    	; 0x5e2 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 4e0:	38 30       	cpi	r19, 0x08	; 8
 4e2:	61 f4       	brne	.+24     	; 0x4fc <__vector_11+0x1ba>
 4e4:	40 38       	cpi	r20, 0x80	; 128
 4e6:	09 f0       	breq	.+2      	; 0x4ea <__vector_11+0x1a8>
 4e8:	81 c0       	rjmp	.+258    	; 0x5ec <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 4ea:	80 91 e8 00 	lds	r24, 0x00E8
 4ee:	80 ff       	sbrs	r24, 0
 4f0:	fc cf       	rjmp	.-8      	; 0x4ea <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 4f2:	80 91 08 01 	lds	r24, 0x0108
 4f6:	80 93 f1 00 	sts	0x00F1, r24
 4fa:	50 c0       	rjmp	.+160    	; 0x59c <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 4fc:	31 32       	cpi	r19, 0x21	; 33
 4fe:	89 f4       	brne	.+34     	; 0x522 <__vector_11+0x1e0>
 500:	41 3a       	cpi	r20, 0xA1	; 161
 502:	09 f0       	breq	.+2      	; 0x506 <__vector_11+0x1c4>
 504:	73 c0       	rjmp	.+230    	; 0x5ec <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 506:	80 91 e8 00 	lds	r24, 0x00E8
 50a:	80 ff       	sbrs	r24, 0
 50c:	fc cf       	rjmp	.-8      	; 0x506 <__vector_11+0x1c4>
 50e:	e0 e0       	ldi	r30, 0x00	; 0
 510:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 512:	81 91       	ld	r24, Z+
 514:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	e7 30       	cpi	r30, 0x07	; 7
 51c:	f8 07       	cpc	r31, r24
 51e:	c9 f7       	brne	.-14     	; 0x512 <__vector_11+0x1d0>
 520:	3d c0       	rjmp	.+122    	; 0x59c <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 522:	30 32       	cpi	r19, 0x20	; 32
 524:	a1 f4       	brne	.+40     	; 0x54e <__vector_11+0x20c>
 526:	41 32       	cpi	r20, 0x21	; 33
 528:	09 f0       	breq	.+2      	; 0x52c <__vector_11+0x1ea>
 52a:	60 c0       	rjmp	.+192    	; 0x5ec <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 52c:	80 91 e8 00 	lds	r24, 0x00E8
 530:	82 ff       	sbrs	r24, 2
 532:	fc cf       	rjmp	.-8      	; 0x52c <__vector_11+0x1ea>
 534:	e0 e0       	ldi	r30, 0x00	; 0
 536:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 538:	80 91 f1 00 	lds	r24, 0x00F1
 53c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	e7 30       	cpi	r30, 0x07	; 7
 542:	f8 07       	cpc	r31, r24
 544:	c9 f7       	brne	.-14     	; 0x538 <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 546:	8b ef       	ldi	r24, 0xFB	; 251
 548:	80 93 e8 00 	sts	0x00E8, r24
 54c:	27 c0       	rjmp	.+78     	; 0x59c <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 54e:	32 32       	cpi	r19, 0x22	; 34
 550:	51 f4       	brne	.+20     	; 0x566 <__vector_11+0x224>
 552:	41 32       	cpi	r20, 0x21	; 33
 554:	09 f0       	breq	.+2      	; 0x558 <__vector_11+0x216>
 556:	4a c0       	rjmp	.+148    	; 0x5ec <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
 558:	60 93 09 01 	sts	0x0109, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 55c:	80 91 e8 00 	lds	r24, 0x00E8
 560:	80 ff       	sbrs	r24, 0
 562:	fc cf       	rjmp	.-8      	; 0x55c <__vector_11+0x21a>
 564:	1b c0       	rjmp	.+54     	; 0x59c <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 566:	33 23       	and	r19, r19
 568:	e9 f4       	brne	.+58     	; 0x5a4 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 56a:	80 91 e8 00 	lds	r24, 0x00E8
 56e:	80 ff       	sbrs	r24, 0
 570:	fc cf       	rjmp	.-8      	; 0x56a <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 572:	42 38       	cpi	r20, 0x82	; 130
 574:	11 f0       	breq	.+4      	; 0x57a <__vector_11+0x238>
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0d c0       	rjmp	.+26     	; 0x594 <__vector_11+0x252>
				UENUM = wIndex;
 57a:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 57e:	80 91 eb 00 	lds	r24, 0x00EB
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	25 e0       	ldi	r18, 0x05	; 5
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	2a 95       	dec	r18
 58c:	e1 f7       	brne	.-8      	; 0x586 <__vector_11+0x244>
 58e:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 590:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 594:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 598:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 59c:	8e ef       	ldi	r24, 0xFE	; 254
 59e:	80 93 e8 00 	sts	0x00E8, r24
 5a2:	27 c0       	rjmp	.+78     	; 0x5f2 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 5a4:	31 30       	cpi	r19, 0x01	; 1
 5a6:	11 f0       	breq	.+4      	; 0x5ac <__vector_11+0x26a>
 5a8:	33 30       	cpi	r19, 0x03	; 3
 5aa:	01 f5       	brne	.+64     	; 0x5ec <__vector_11+0x2aa>
 5ac:	42 30       	cpi	r20, 0x02	; 2
 5ae:	f1 f4       	brne	.+60     	; 0x5ec <__vector_11+0x2aa>
 5b0:	67 2b       	or	r22, r23
 5b2:	e1 f4       	brne	.+56     	; 0x5ec <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 5b4:	2a 2f       	mov	r18, r26
 5b6:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 5b8:	82 2f       	mov	r24, r18
 5ba:	81 50       	subi	r24, 0x01	; 1
 5bc:	84 30       	cpi	r24, 0x04	; 4
 5be:	b0 f4       	brcc	.+44     	; 0x5ec <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c0:	8e ef       	ldi	r24, 0xFE	; 254
 5c2:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 5c6:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 5ca:	33 30       	cpi	r19, 0x03	; 3
 5cc:	79 f0       	breq	.+30     	; 0x5ec <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 5ce:	89 e1       	ldi	r24, 0x19	; 25
 5d0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_11+0x29c>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <__vector_11+0x298>
 5e2:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 5e6:	10 92 ea 00 	sts	0x00EA, r1
 5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 5ec:	81 e2       	ldi	r24, 0x21	; 33
 5ee:	80 93 eb 00 	sts	0x00EB, r24
}
 5f2:	ff 91       	pop	r31
 5f4:	ef 91       	pop	r30
 5f6:	bf 91       	pop	r27
 5f8:	af 91       	pop	r26
 5fa:	9f 91       	pop	r25
 5fc:	8f 91       	pop	r24
 5fe:	7f 91       	pop	r23
 600:	6f 91       	pop	r22
 602:	5f 91       	pop	r21
 604:	4f 91       	pop	r20
 606:	3f 91       	pop	r19
 608:	2f 91       	pop	r18
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	0f 90       	pop	r0
 610:	0f be       	out	0x3f, r0	; 63
 612:	0f 90       	pop	r0
 614:	1f 90       	pop	r1
 616:	18 95       	reti

00000618 <adc_start>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
 618:	ea e7       	ldi	r30, 0x7A	; 122
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	96 e8       	ldi	r25, 0x86	; 134
 61e:	90 83       	st	Z, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
 620:	98 2f       	mov	r25, r24
 622:	90 72       	andi	r25, 0x20	; 32
 624:	90 68       	ori	r25, 0x80	; 128
 626:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
 62a:	8f 71       	andi	r24, 0x1F	; 31
 62c:	86 2b       	or	r24, r22
 62e:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
 632:	10 92 0c 01 	sts	0x010C, r1
	tail = 0;				// and then begin auto trigger mode
 636:	10 92 0d 01 	sts	0x010D, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
 63a:	8e ee       	ldi	r24, 0xEE	; 238
 63c:	80 83       	st	Z, r24
	sei();
 63e:	78 94       	sei
}
 640:	08 95       	ret

00000642 <adc_read>:
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
 642:	80 91 0c 01 	lds	r24, 0x010C
		t = tail;		// wait for data in buffer
 646:	e0 91 0d 01 	lds	r30, 0x010D
	} while (h == t);
 64a:	8e 17       	cp	r24, r30
 64c:	d1 f3       	breq	.-12     	; 0x642 <adc_read>
	if (++t >= BUFSIZE) t = 0;
 64e:	8e 2f       	mov	r24, r30
 650:	8f 5f       	subi	r24, 0xFF	; 255
 652:	82 30       	cpi	r24, 0x02	; 2
 654:	08 f0       	brcs	.+2      	; 0x658 <adc_read+0x16>
 656:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
 658:	e8 2f       	mov	r30, r24
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	ee 0f       	add	r30, r30
 65e:	ff 1f       	adc	r31, r31
 660:	e2 5f       	subi	r30, 0xF2	; 242
 662:	fe 4f       	sbci	r31, 0xFE	; 254
 664:	20 81       	ld	r18, Z
 666:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
 668:	80 93 0d 01 	sts	0x010D, r24
	return val;
}
 66c:	c9 01       	movw	r24, r18
 66e:	08 95       	ret

00000670 <__vector_29>:

ISR(ADC_vect)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18
 67c:	3f 93       	push	r19
 67e:	8f 93       	push	r24
 680:	9f 93       	push	r25
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
 686:	20 91 78 00 	lds	r18, 0x0078
 68a:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
 68e:	90 91 0c 01 	lds	r25, 0x010C
 692:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
 694:	92 30       	cpi	r25, 0x02	; 2
 696:	08 f0       	brcs	.+2      	; 0x69a <__vector_29+0x2a>
 698:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
 69a:	80 91 0d 01 	lds	r24, 0x010D
 69e:	98 17       	cp	r25, r24
 6a0:	51 f0       	breq	.+20     	; 0x6b6 <__vector_29+0x46>
		buffer[h] = val;	// put new data into buffer
 6a2:	e9 2f       	mov	r30, r25
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	ee 0f       	add	r30, r30
 6a8:	ff 1f       	adc	r31, r31
 6aa:	e2 5f       	subi	r30, 0xF2	; 242
 6ac:	fe 4f       	sbci	r31, 0xFE	; 254
 6ae:	31 83       	std	Z+1, r19	; 0x01
 6b0:	20 83       	st	Z, r18
		head = h;
 6b2:	90 93 0c 01 	sts	0x010C, r25
	}
}
 6b6:	ff 91       	pop	r31
 6b8:	ef 91       	pop	r30
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	3f 91       	pop	r19
 6c0:	2f 91       	pop	r18
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
