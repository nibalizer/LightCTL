
lightctl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000152c  000015c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000152c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  000015c8  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000030a  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000154f  00000000  00000000  0000211a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000473  00000000  00000000  00003669  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bca  00000000  00000000  00003adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  000056a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000552  00000000  00000000  000058e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000013f9  00000000  00000000  00005e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000148  00000000  00000000  00007233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	} while (h == t);
	if (++t >= BUFSIZE) t = 0;
	val = buffer[t];		// remove 1 sample from buffer
	tail = t;
	return val;
}
       0:	6f c1       	rjmp	.+734    	; 0x2e0 <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c1       	rjmp	.+774    	; 0x318 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c1       	rjmp	.+762    	; 0x318 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_10>
      2c:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__vector_11>
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c1       	rjmp	.+726    	; 0x318 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	67 c1       	rjmp	.+718    	; 0x318 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	65 c1       	rjmp	.+714    	; 0x318 <__bad_interrupt>
      4e:	00 00       	nop
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
      66:	00 00       	nop
      68:	57 c1       	rjmp	.+686    	; 0x318 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	55 c1       	rjmp	.+682    	; 0x318 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c1       	rjmp	.+678    	; 0x318 <__bad_interrupt>
      72:	00 00       	nop
      74:	52 c1       	rjmp	.+676    	; 0x31a <__vector_29>
      76:	00 00       	nop
      78:	4f c1       	rjmp	.+670    	; 0x318 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c1       	rjmp	.+666    	; 0x318 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c1       	rjmp	.+662    	; 0x318 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c1       	rjmp	.+658    	; 0x318 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c1       	rjmp	.+654    	; 0x318 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 c1       	rjmp	.+650    	; 0x318 <__bad_interrupt>
      8e:	00 00       	nop
      90:	43 c1       	rjmp	.+646    	; 0x318 <__bad_interrupt>
      92:	00 00       	nop
      94:	41 c1       	rjmp	.+642    	; 0x318 <__bad_interrupt>
      96:	00 00       	nop
      98:	3f c1       	rjmp	.+638    	; 0x318 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3d c1       	rjmp	.+634    	; 0x318 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3b c1       	rjmp	.+630    	; 0x318 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	39 c1       	rjmp	.+626    	; 0x318 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	37 c1       	rjmp	.+622    	; 0x318 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d1 08       	sbc	r13, r1
      ae:	ce 08       	sbc	r12, r14
      b0:	cb 08       	sbc	r12, r11
      b2:	c8 08       	sbc	r12, r8
      b4:	c5 08       	sbc	r12, r5
      b6:	c2 08       	sbc	r12, r2
      b8:	bf 08       	sbc	r11, r15
      ba:	bc 08       	sbc	r11, r12
      bc:	b9 08       	sbc	r11, r9
      be:	b6 08       	sbc	r11, r6
      c0:	b3 08       	sbc	r11, r3
      c2:	b0 08       	sbc	r11, r0
      c4:	ad 08       	sbc	r10, r13
      c6:	aa 08       	sbc	r10, r10
      c8:	a7 08       	sbc	r10, r7
      ca:	a4 08       	sbc	r10, r4
      cc:	a1 08       	sbc	r10, r1
      ce:	9e 08       	sbc	r9, r14
      d0:	9b 08       	sbc	r9, r11
      d2:	98 08       	sbc	r9, r8
      d4:	95 08       	sbc	r9, r5
      d6:	92 08       	sbc	r9, r2
      d8:	8f 08       	sbc	r8, r15
      da:	8c 08       	sbc	r8, r12
      dc:	89 08       	sbc	r8, r9
      de:	86 08       	sbc	r8, r6
      e0:	83 08       	sbc	r8, r3
      e2:	80 08       	sbc	r8, r0
      e4:	7d 08       	sbc	r7, r13
      e6:	7a 08       	sbc	r7, r10
      e8:	77 08       	sbc	r7, r7
      ea:	74 08       	sbc	r7, r4
      ec:	71 08       	sbc	r7, r1
      ee:	6e 08       	sbc	r6, r14
      f0:	6b 08       	sbc	r6, r11
      f2:	68 08       	sbc	r6, r8
      f4:	65 08       	sbc	r6, r5
      f6:	62 08       	sbc	r6, r2
      f8:	5f 08       	sbc	r5, r15
      fa:	5c 08       	sbc	r5, r12
      fc:	59 08       	sbc	r5, r9
      fe:	56 08       	sbc	r5, r6
     100:	53 08       	sbc	r5, r3
     102:	50 08       	sbc	r5, r0
     104:	4d 08       	sbc	r4, r13
     106:	4a 08       	sbc	r4, r10
     108:	47 08       	sbc	r4, r7
     10a:	44 08       	sbc	r4, r4
     10c:	41 08       	sbc	r4, r1
     10e:	3e 08       	sbc	r3, r14
     110:	3b 08       	sbc	r3, r11
     112:	38 08       	sbc	r3, r8
     114:	35 08       	sbc	r3, r5
     116:	32 08       	sbc	r3, r2
     118:	2f 08       	sbc	r2, r15
     11a:	2c 08       	sbc	r2, r12
     11c:	29 08       	sbc	r2, r9
     11e:	26 08       	sbc	r2, r6
     120:	23 08       	sbc	r2, r3
     122:	20 08       	sbc	r2, r0
     124:	1d 08       	sbc	r1, r13
     126:	1a 08       	sbc	r1, r10
     128:	17 08       	sbc	r1, r7
     12a:	14 08       	sbc	r1, r4
     12c:	11 08       	sbc	r1, r1

0000012e <__c.1891>:
     12e:	22 2c 20 6d 75 73 74 20 62 65 20 3f 20 6f 72 20     ", must be ? or 
     13e:	3d 0d 0a 00                                         =...

00000142 <__c.1889>:
     142:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
     152:	22 00                                               ".

00000154 <__c.1887>:
     154:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
     164:	31 0d 0a 00                                         1...

00000168 <__c.1885>:
     168:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

00000178 <__c.1883>:
     178:	0d 0a 00                                            ...

0000017b <__c.1881>:
     17b:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
     18b:	37 0d 0a 00                                         7...

0000018f <__c.1879>:
     18f:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

0000019d <__c.1877>:
     19d:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
     1ad:	0d 0a 00                                            ...

000001b0 <__c.1875>:
     1b0:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

000001bf <__c.1873>:
     1bf:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
     1cf:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
     1df:	20 72 65 71 27 64 0d 0a 00                           req'd...

000001e8 <__c.1808>:
     1e8:	49 4e 56 41 4c 49 44 5f 43 4f 4d 4d 41 4e 44 5f     INVALID_COMMAND_
     1f8:	43 4f 44 45 00                                      CODE.

000001fd <__c.1795>:
     1fd:	01 02 03 04 05 06 07 08 0a 00                       ..........

00000207 <__c.1778>:
     207:	4c 61 6d 70 20 43 6f 6e 74 72 6f 6c 65 72 0a 00     Lamp Controler..

00000217 <descriptor_list>:
     217:	00 01 00 00 4b 02 12 00 02 00 00 5d 02 43 00 03     ....K......].C..
     227:	00 00 a0 02 04 01 03 09 04 a4 02 14 02 03 09 04     ................
     237:	ba 02 16 03 03 09 04 d2 02 0c                       ..........

00000241 <endpoint_config_table>:
     241:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000024b <device_descriptor>:
     24b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     25b:	03 01                                               ..

0000025d <config1_descriptor>:
     25d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     26d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     27d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     28d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     29d:	40 00 00                                            @..

000002a0 <string0>:
     2a0:	04 03 09 04                                         ....

000002a4 <string1>:
     2a4:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     2b4:	6d 00 65 00 00 00                                   m.e...

000002ba <string2>:
     2ba:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     2ca:	69 00 61 00 6c 00 00 00                             i.a.l...

000002d2 <string3>:
     2d2:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000002e0 <__ctors_end>:
     2e0:	11 24       	eor	r1, r1
     2e2:	1f be       	out	0x3f, r1	; 63
     2e4:	cf ef       	ldi	r28, 0xFF	; 255
     2e6:	da e0       	ldi	r29, 0x0A	; 10
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	cd bf       	out	0x3d, r28	; 61

000002ec <__do_copy_data>:
     2ec:	11 e0       	ldi	r17, 0x01	; 1
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b1 e0       	ldi	r27, 0x01	; 1
     2f2:	ec e2       	ldi	r30, 0x2C	; 44
     2f4:	f5 e1       	ldi	r31, 0x15	; 21
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <.do_copy_data_start>

000002f8 <.do_copy_data_loop>:
     2f8:	05 90       	lpm	r0, Z+
     2fa:	0d 92       	st	X+, r0

000002fc <.do_copy_data_start>:
     2fc:	a8 30       	cpi	r26, 0x08	; 8
     2fe:	b1 07       	cpc	r27, r17
     300:	d9 f7       	brne	.-10     	; 0x2f8 <.do_copy_data_loop>

00000302 <__do_clear_bss>:
     302:	11 e0       	ldi	r17, 0x01	; 1
     304:	a8 e0       	ldi	r26, 0x08	; 8
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	01 c0       	rjmp	.+2      	; 0x30c <.do_clear_bss_start>

0000030a <.do_clear_bss_loop>:
     30a:	1d 92       	st	X+, r1

0000030c <.do_clear_bss_start>:
     30c:	a2 31       	cpi	r26, 0x12	; 18
     30e:	b1 07       	cpc	r27, r17
     310:	e1 f7       	brne	.-8      	; 0x30a <.do_clear_bss_loop>
     312:	78 d5       	rcall	.+2800   	; 0xe04 <main>
     314:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <_exit>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <__vector_29>:

ISR(ADC_vect)
{
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	2f 93       	push	r18
     326:	3f 93       	push	r19
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	ef 93       	push	r30
     32e:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
     330:	20 91 78 00 	lds	r18, 0x0078
     334:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
     338:	90 91 08 01 	lds	r25, 0x0108
     33c:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
     33e:	92 30       	cpi	r25, 0x02	; 2
     340:	08 f0       	brcs	.+2      	; 0x344 <__vector_29+0x2a>
     342:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
     344:	80 91 09 01 	lds	r24, 0x0109
     348:	98 17       	cp	r25, r24
     34a:	51 f0       	breq	.+20     	; 0x360 <__vector_29+0x46>
		buffer[h] = val;	// put new data into buffer
     34c:	e9 2f       	mov	r30, r25
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	ee 0f       	add	r30, r30
     352:	ff 1f       	adc	r31, r31
     354:	e6 5f       	subi	r30, 0xF6	; 246
     356:	fe 4f       	sbci	r31, 0xFE	; 254
     358:	31 83       	std	Z+1, r19	; 0x01
     35a:	20 83       	st	Z, r18
		head = h;
     35c:	90 93 08 01 	sts	0x0108, r25
	}
}
     360:	ff 91       	pop	r31
     362:	ef 91       	pop	r30
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <setup_pwms>:

void setup_pwms(void)
{
	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
     376:	84 b1       	in	r24, 0x04	; 4
     378:	80 6f       	ori	r24, 0xF0	; 240
     37a:	84 b9       	out	0x04, r24	; 4
//	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
	DDRD |= (1 << DDD0) | (1 << DDD1);
     37c:	8a b1       	in	r24, 0x0a	; 10
     37e:	83 60       	ori	r24, 0x03	; 3
     380:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
     382:	93 ea       	ldi	r25, 0xA3	; 163
     384:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
     386:	81 e0       	ldi	r24, 0x01	; 1
     388:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
     38a:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
     38e:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
     392:	91 ea       	ldi	r25, 0xA1	; 161
     394:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
     398:	89 e0       	ldi	r24, 0x09	; 9
     39a:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
     39e:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
     3a2:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
     3a6:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
     3aa:	10 92 92 00 	sts	0x0092, r1
}
     3ae:	08 95       	ret

000003b0 <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
     3b6:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
     3b8:	21 96       	adiw	r28, 0x01	; 1
     3ba:	84 91       	lpm	r24, Z+
		if (!c) break;
     3bc:	88 23       	and	r24, r24
     3be:	11 f0       	breq	.+4      	; 0x3c4 <send_str+0x14>
		usb_serial_putchar(c);
     3c0:	a0 d5       	rcall	.+2880   	; 0xf02 <usb_serial_putchar>
     3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <send_str+0x6>
	}
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	08 95       	ret

000003ca <handle_pwm_ports_command>:
	usb_serial_putchar('\n');
}

void handle_pwm_ports_command(void)
{
	usb_serial_putchar('\x03');
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	9a d5       	rcall	.+2868   	; 0xf02 <usb_serial_putchar>
	usb_serial_putchar('\x00');
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	98 d5       	rcall	.+2864   	; 0xf02 <usb_serial_putchar>
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
     3d2:	8d ef       	ldi	r24, 0xFD	; 253
     3d4:	91 e0       	ldi	r25, 0x01	; 1
}
     3d6:	ec cf       	rjmp	.-40     	; 0x3b0 <send_str>

000003d8 <handle_ping_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("Lamp Controler\n"));
}

void handle_ping_command(const char *str, uint8_t len)
{
     3d8:	ff 92       	push	r15
     3da:	0f 93       	push	r16
     3dc:	1f 93       	push	r17
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	18 2f       	mov	r17, r24
     3e4:	09 2f       	mov	r16, r25
     3e6:	f6 2e       	mov	r15, r22
	const char *data_itr;
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	8b d5       	rcall	.+2838   	; 0xf02 <usb_serial_putchar>
     3ec:	21 2f       	mov	r18, r17
     3ee:	30 2f       	mov	r19, r16
     3f0:	c9 01       	movw	r24, r18
     3f2:	ec 01       	movw	r28, r24
     3f4:	11 e0       	ldi	r17, 0x01	; 1
     3f6:	03 c0       	rjmp	.+6      	; 0x3fe <handle_ping_command+0x26>
	while(ndx < len)
	{
		usb_serial_putchar(data_itr[ndx]);
     3f8:	88 81       	ld	r24, Y
     3fa:	83 d5       	rcall	.+2822   	; 0xf02 <usb_serial_putchar>
		++ndx;
     3fc:	1f 5f       	subi	r17, 0xFF	; 255
     3fe:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
	while(ndx < len)
     400:	1f 15       	cp	r17, r15
     402:	d0 f3       	brcs	.-12     	; 0x3f8 <handle_ping_command+0x20>
	{
		usb_serial_putchar(data_itr[ndx]);
		++ndx;
	}
	usb_serial_putchar('\n');
     404:	8a e0       	ldi	r24, 0x0A	; 10
     406:	7d d5       	rcall	.+2810   	; 0xf02 <usb_serial_putchar>
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	ff 90       	pop	r15
     412:	08 95       	ret

00000414 <handle_version_command>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}
void handle_version_command(void)
{
	usb_serial_putchar('\x00');
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	75 d5       	rcall	.+2794   	; 0xf02 <usb_serial_putchar>
	send_str(PSTR("Lamp Controler\n"));
     418:	87 e0       	ldi	r24, 0x07	; 7
     41a:	92 e0       	ldi	r25, 0x02	; 2
}
     41c:	c9 cf       	rjmp	.-110    	; 0x3b0 <send_str>

0000041e <handle_set_pwm_command>:
/**
 * @breif Handle a set pwm command
 */

void handle_set_pwm_command(uint8_t port, uint8_t val)
{
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	18 2f       	mov	r17, r24
     424:	06 2f       	mov	r16, r22
	usb_serial_putchar('\x04');
     426:	84 e0       	ldi	r24, 0x04	; 4
     428:	6c d5       	rcall	.+2776   	; 0xf02 <usb_serial_putchar>
	usb_serial_putchar(port);
     42a:	81 2f       	mov	r24, r17
     42c:	6a d5       	rcall	.+2772   	; 0xf02 <usb_serial_putchar>
	switch(port)
     42e:	14 30       	cpi	r17, 0x04	; 4
     430:	31 f1       	breq	.+76     	; 0x47e <handle_set_pwm_command+0x60>
     432:	15 30       	cpi	r17, 0x05	; 5
     434:	48 f4       	brcc	.+18     	; 0x448 <handle_set_pwm_command+0x2a>
     436:	11 30       	cpi	r17, 0x01	; 1
     438:	91 f0       	breq	.+36     	; 0x45e <handle_set_pwm_command+0x40>
     43a:	11 30       	cpi	r17, 0x01	; 1
     43c:	70 f0       	brcs	.+28     	; 0x45a <handle_set_pwm_command+0x3c>
     43e:	12 30       	cpi	r17, 0x02	; 2
     440:	81 f0       	breq	.+32     	; 0x462 <handle_set_pwm_command+0x44>
     442:	13 30       	cpi	r17, 0x03	; 3
     444:	b9 f5       	brne	.+110    	; 0x4b4 <handle_set_pwm_command+0x96>
     446:	14 c0       	rjmp	.+40     	; 0x470 <handle_set_pwm_command+0x52>
     448:	16 30       	cpi	r17, 0x06	; 6
     44a:	f9 f0       	breq	.+62     	; 0x48a <handle_set_pwm_command+0x6c>
     44c:	16 30       	cpi	r17, 0x06	; 6
     44e:	d0 f0       	brcs	.+52     	; 0x484 <handle_set_pwm_command+0x66>
     450:	17 30       	cpi	r17, 0x07	; 7
     452:	11 f1       	breq	.+68     	; 0x498 <handle_set_pwm_command+0x7a>
     454:	18 30       	cpi	r17, 0x08	; 8
     456:	71 f5       	brne	.+92     	; 0x4b4 <handle_set_pwm_command+0x96>
     458:	26 c0       	rjmp	.+76     	; 0x4a6 <handle_set_pwm_command+0x88>
	{
		case 0:
			OCR0A = val;
     45a:	07 bd       	out	0x27, r16	; 39
     45c:	2d c0       	rjmp	.+90     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 1:
			OCR0B = val;
     45e:	08 bd       	out	0x28, r16	; 40
     460:	2b c0       	rjmp	.+86     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 2:
			OCR1A = val;
     462:	80 2f       	mov	r24, r16
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	90 93 89 00 	sts	0x0089, r25
     46a:	80 93 88 00 	sts	0x0088, r24
     46e:	24 c0       	rjmp	.+72     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 3:
			OCR1B = val;
     470:	80 2f       	mov	r24, r16
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	90 93 8b 00 	sts	0x008B, r25
     478:	80 93 8a 00 	sts	0x008A, r24
     47c:	1d c0       	rjmp	.+58     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 4:
			OCR2A = val;
     47e:	00 93 b3 00 	sts	0x00B3, r16
     482:	1a c0       	rjmp	.+52     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 5:
			OCR2B = val;
     484:	00 93 b4 00 	sts	0x00B4, r16
     488:	17 c0       	rjmp	.+46     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 6:
			OCR3A = val;
     48a:	80 2f       	mov	r24, r16
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	90 93 99 00 	sts	0x0099, r25
     492:	80 93 98 00 	sts	0x0098, r24
     496:	10 c0       	rjmp	.+32     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 7:
			OCR3B = val;
     498:	80 2f       	mov	r24, r16
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	90 93 9b 00 	sts	0x009B, r25
     4a0:	80 93 9a 00 	sts	0x009A, r24
     4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		case 8:
			OCR3C = val;
     4a6:	80 2f       	mov	r24, r16
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	90 93 9d 00 	sts	0x009D, r25
     4ae:	80 93 9c 00 	sts	0x009C, r24
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <handle_set_pwm_command+0x9a>
			break;
		default:
			usb_serial_putchar('\x01');
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	01 c0       	rjmp	.+2      	; 0x4ba <handle_set_pwm_command+0x9c>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	23 d5       	rcall	.+2630   	; 0xf02 <usb_serial_putchar>
	usb_serial_putchar('\n');
     4bc:	8a e0       	ldi	r24, 0x0A	; 10
     4be:	21 d5       	rcall	.+2626   	; 0xf02 <usb_serial_putchar>
}
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	08 95       	ret

000004c6 <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
     4c6:	0f 93       	push	r16
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	ec 01       	movw	r28, r24
     4d0:	06 2f       	mov	r16, r22
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	14 c0       	rjmp	.+40     	; 0x4fe <recv_str+0x38>
	int16_t r;
	uint8_t count=0;

	while (count < size) {
		r = usb_serial_getchar();
     4d6:	e3 d4       	rcall	.+2502   	; 0xe9e <usb_serial_getchar>
		if (r != -1) {
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	8f 3f       	cpi	r24, 0xFF	; 255
     4dc:	92 07       	cpc	r25, r18
     4de:	49 f0       	breq	.+18     	; 0x4f2 <recv_str+0x2c>
			if (r == '\r' || r == '\n') return count;
     4e0:	8d 30       	cpi	r24, 0x0D	; 13
     4e2:	91 05       	cpc	r25, r1
     4e4:	81 f0       	breq	.+32     	; 0x506 <recv_str+0x40>
     4e6:	8a 30       	cpi	r24, 0x0A	; 10
     4e8:	91 05       	cpc	r25, r1
     4ea:	69 f0       	breq	.+26     	; 0x506 <recv_str+0x40>
			*buf++ = r;
     4ec:	89 93       	st	Y+, r24
			//usb_serial_putchar(r);
			count++;
     4ee:	1f 5f       	subi	r17, 0xFF	; 255
     4f0:	06 c0       	rjmp	.+12     	; 0x4fe <recv_str+0x38>
		} else {
			if (!usb_configured() ||
     4f2:	d2 d4       	rcall	.+2468   	; 0xe98 <usb_configured>
     4f4:	88 23       	and	r24, r24
     4f6:	31 f0       	breq	.+12     	; 0x504 <recv_str+0x3e>
     4f8:	6e d6       	rcall	.+3292   	; 0x11d6 <usb_serial_get_control>
     4fa:	80 ff       	sbrs	r24, 0
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <recv_str+0x3e>
uint8_t recv_str(char *buf, uint8_t size)
{
	int16_t r;
	uint8_t count=0;

	while (count < size) {
     4fe:	10 17       	cp	r17, r16
     500:	50 f3       	brcs	.-44     	; 0x4d6 <recv_str+0x10>
     502:	01 c0       	rjmp	.+2      	; 0x506 <recv_str+0x40>
     504:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
     506:	81 2f       	mov	r24, r17
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	08 95       	ret

00000512 <handle_sensor_query>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}

void handle_sensor_query(uint8_t port)
{
     512:	df 92       	push	r13
     514:	ef 92       	push	r14
     516:	ff 92       	push	r15
     518:	0f 93       	push	r16
     51a:	1f 93       	push	r17
     51c:	df 93       	push	r29
     51e:	cf 93       	push	r28
     520:	00 d0       	rcall	.+0      	; 0x522 <handle_sensor_query+0x10>
     522:	00 d0       	rcall	.+0      	; 0x524 <handle_sensor_query+0x12>
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	18 2f       	mov	r17, r24
    int i;
    uint16_t val;
    char buf[4];
    int readings = 10;
    usb_serial_putchar('\x07');
     52a:	87 e0       	ldi	r24, 0x07	; 7
     52c:	ea d4       	rcall	.+2516   	; 0xf02 <usb_serial_putchar>
	usb_serial_putchar(port);
     52e:	81 2f       	mov	r24, r17
     530:	e8 d4       	rcall	.+2512   	; 0xf02 <usb_serial_putchar>
	switch(port)
     532:	13 30       	cpi	r17, 0x03	; 3
     534:	09 f4       	brne	.+2      	; 0x538 <handle_sensor_query+0x26>
     536:	57 c1       	rjmp	.+686    	; 0x7e6 <handle_sensor_query+0x2d4>
     538:	14 30       	cpi	r17, 0x04	; 4
     53a:	38 f4       	brcc	.+14     	; 0x54a <handle_sensor_query+0x38>
     53c:	11 30       	cpi	r17, 0x01	; 1
     53e:	09 f4       	brne	.+2      	; 0x542 <handle_sensor_query+0x30>
     540:	76 c0       	rjmp	.+236    	; 0x62e <handle_sensor_query+0x11c>
     542:	12 30       	cpi	r17, 0x02	; 2
     544:	08 f0       	brcs	.+2      	; 0x548 <handle_sensor_query+0x36>
     546:	e1 c0       	rjmp	.+450    	; 0x70a <handle_sensor_query+0x1f8>
     548:	0d c0       	rjmp	.+26     	; 0x564 <handle_sensor_query+0x52>
     54a:	15 30       	cpi	r17, 0x05	; 5
     54c:	09 f4       	brne	.+2      	; 0x550 <handle_sensor_query+0x3e>
     54e:	27 c2       	rjmp	.+1102   	; 0x99e <handle_sensor_query+0x48c>
     550:	15 30       	cpi	r17, 0x05	; 5
     552:	08 f4       	brcc	.+2      	; 0x556 <handle_sensor_query+0x44>
     554:	b6 c1       	rjmp	.+876    	; 0x8c2 <handle_sensor_query+0x3b0>
     556:	16 30       	cpi	r17, 0x06	; 6
     558:	09 f4       	brne	.+2      	; 0x55c <handle_sensor_query+0x4a>
     55a:	8f c2       	rjmp	.+1310   	; 0xa7a <handle_sensor_query+0x568>
     55c:	17 30       	cpi	r17, 0x07	; 7
     55e:	09 f0       	breq	.+2      	; 0x562 <handle_sensor_query+0x50>
     560:	68 c3       	rjmp	.+1744   	; 0xc32 <__stack+0x133>
     562:	f9 c2       	rjmp	.+1522   	; 0xb56 <__stack+0x57>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     564:	86 e8       	ldi	r24, 0x86	; 134
     566:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     56a:	80 e8       	ldi	r24, 0x80	; 128
     56c:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     576:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     57a:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     57e:	8e ee       	ldi	r24, 0xEE	; 238
     580:	80 93 7a 00 	sts	0x007A, r24
	sei();
     584:	78 94       	sei
     586:	01 e0       	ldi	r16, 0x01	; 1
     588:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     58a:	b0 e2       	ldi	r27, 0x20	; 32
     58c:	db 2e       	mov	r13, r27
	        	usb_serial_write((unsigned char *)buf, 4);
     58e:	7e 01       	movw	r14, r28
     590:	08 94       	sec
     592:	e1 1c       	adc	r14, r1
     594:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     596:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     59a:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     59e:	8e 17       	cp	r24, r30
     5a0:	d1 f3       	breq	.-12     	; 0x596 <handle_sensor_query+0x84>
	if (++t >= BUFSIZE) t = 0;
     5a2:	8e 2f       	mov	r24, r30
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	82 30       	cpi	r24, 0x02	; 2
     5a8:	08 f0       	brcs	.+2      	; 0x5ac <handle_sensor_query+0x9a>
     5aa:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     5ac:	e8 2f       	mov	r30, r24
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	ee 0f       	add	r30, r30
     5b2:	ff 1f       	adc	r31, r31
     5b4:	e6 5f       	subi	r30, 0xF6	; 246
     5b6:	fe 4f       	sbci	r31, 0xFE	; 254
     5b8:	01 90       	ld	r0, Z+
     5ba:	f0 81       	ld	r31, Z
     5bc:	e0 2d       	mov	r30, r0
	tail = t;
     5be:	80 93 09 01 	sts	0x0109, r24
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     5c2:	8f 2f       	mov	r24, r31
     5c4:	99 27       	eor	r25, r25
     5c6:	28 2f       	mov	r18, r24
     5c8:	2f 70       	andi	r18, 0x0F	; 15
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	90 70       	andi	r25, 0x00	; 0
     5ce:	0a 97       	sbiw	r24, 0x0a	; 10
     5d0:	18 f4       	brcc	.+6      	; 0x5d8 <handle_sensor_query+0xc6>
     5d2:	32 2f       	mov	r19, r18
     5d4:	30 5d       	subi	r19, 0xD0	; 208
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <handle_sensor_query+0xca>
     5d8:	32 2f       	mov	r19, r18
     5da:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     5dc:	cf 01       	movw	r24, r30
     5de:	64 e0       	ldi	r22, 0x04	; 4
     5e0:	96 95       	lsr	r25
     5e2:	87 95       	ror	r24
     5e4:	6a 95       	dec	r22
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <handle_sensor_query+0xce>
     5e8:	28 2f       	mov	r18, r24
     5ea:	2f 70       	andi	r18, 0x0F	; 15
     5ec:	8f 70       	andi	r24, 0x0F	; 15
     5ee:	90 70       	andi	r25, 0x00	; 0
     5f0:	0a 97       	sbiw	r24, 0x0a	; 10
     5f2:	18 f4       	brcc	.+6      	; 0x5fa <handle_sensor_query+0xe8>
     5f4:	82 2f       	mov	r24, r18
     5f6:	80 5d       	subi	r24, 0xD0	; 208
     5f8:	02 c0       	rjmp	.+4      	; 0x5fe <handle_sensor_query+0xec>
     5fa:	82 2f       	mov	r24, r18
     5fc:	89 5c       	subi	r24, 0xC9	; 201
     5fe:	9e 2f       	mov	r25, r30
     600:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     602:	ef 70       	andi	r30, 0x0F	; 15
     604:	f0 70       	andi	r31, 0x00	; 0
     606:	3a 97       	sbiw	r30, 0x0a	; 10
     608:	10 f4       	brcc	.+4      	; 0x60e <handle_sensor_query+0xfc>
     60a:	90 5d       	subi	r25, 0xD0	; 208
     60c:	01 c0       	rjmp	.+2      	; 0x610 <handle_sensor_query+0xfe>
     60e:	99 5c       	subi	r25, 0xC9	; 201
     610:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     612:	dc 82       	std	Y+4, r13	; 0x04
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     614:	8a 83       	std	Y+2, r24	; 0x02
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     616:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     618:	c7 01       	movw	r24, r14
     61a:	64 e0       	ldi	r22, 0x04	; 4
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	b3 d4       	rcall	.+2406   	; 0xf86 <usb_serial_write>
	switch(port)
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
     620:	0f 5f       	subi	r16, 0xFF	; 255
     622:	1f 4f       	sbci	r17, 0xFF	; 255
     624:	0a 30       	cpi	r16, 0x0A	; 10
     626:	11 05       	cpc	r17, r1
     628:	09 f0       	breq	.+2      	; 0x62c <handle_sensor_query+0x11a>
     62a:	b5 cf       	rjmp	.-150    	; 0x596 <handle_sensor_query+0x84>
     62c:	04 c3       	rjmp	.+1544   	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     62e:	86 e8       	ldi	r24, 0x86	; 134
     630:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     634:	80 e8       	ldi	r24, 0x80	; 128
     636:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     63a:	81 e4       	ldi	r24, 0x41	; 65
     63c:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     640:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     644:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     648:	8e ee       	ldi	r24, 0xEE	; 238
     64a:	80 93 7a 00 	sts	0x007A, r24
	sei();
     64e:	78 94       	sei
     650:	88 e8       	ldi	r24, 0x88	; 136
     652:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     654:	20 e9       	ldi	r18, 0x90	; 144
     656:	31 e0       	ldi	r19, 0x01	; 1
     658:	f9 01       	movw	r30, r18
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <handle_sensor_query+0x148>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     65e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     660:	d9 f7       	brne	.-10     	; 0x658 <handle_sensor_query+0x146>
     662:	01 e0       	ldi	r16, 0x01	; 1
     664:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     666:	50 e2       	ldi	r21, 0x20	; 32
     668:	d5 2e       	mov	r13, r21
	        	usb_serial_write((unsigned char *)buf, 4);
     66a:	7e 01       	movw	r14, r28
     66c:	08 94       	sec
     66e:	e1 1c       	adc	r14, r1
     670:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     672:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     676:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     67a:	8e 17       	cp	r24, r30
     67c:	d1 f3       	breq	.-12     	; 0x672 <handle_sensor_query+0x160>
	if (++t >= BUFSIZE) t = 0;
     67e:	8e 2f       	mov	r24, r30
     680:	8f 5f       	subi	r24, 0xFF	; 255
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	08 f0       	brcs	.+2      	; 0x688 <handle_sensor_query+0x176>
     686:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     688:	e8 2f       	mov	r30, r24
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	ee 0f       	add	r30, r30
     68e:	ff 1f       	adc	r31, r31
     690:	e6 5f       	subi	r30, 0xF6	; 246
     692:	fe 4f       	sbci	r31, 0xFE	; 254
     694:	01 90       	ld	r0, Z+
     696:	f0 81       	ld	r31, Z
     698:	e0 2d       	mov	r30, r0
	tail = t;
     69a:	80 93 09 01 	sts	0x0109, r24
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     69e:	8f 2f       	mov	r24, r31
     6a0:	99 27       	eor	r25, r25
     6a2:	28 2f       	mov	r18, r24
     6a4:	2f 70       	andi	r18, 0x0F	; 15
     6a6:	8f 70       	andi	r24, 0x0F	; 15
     6a8:	90 70       	andi	r25, 0x00	; 0
     6aa:	0a 97       	sbiw	r24, 0x0a	; 10
     6ac:	18 f4       	brcc	.+6      	; 0x6b4 <handle_sensor_query+0x1a2>
     6ae:	32 2f       	mov	r19, r18
     6b0:	30 5d       	subi	r19, 0xD0	; 208
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <handle_sensor_query+0x1a6>
     6b4:	32 2f       	mov	r19, r18
     6b6:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     6b8:	cf 01       	movw	r24, r30
     6ba:	24 e0       	ldi	r18, 0x04	; 4
     6bc:	96 95       	lsr	r25
     6be:	87 95       	ror	r24
     6c0:	2a 95       	dec	r18
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <handle_sensor_query+0x1aa>
     6c4:	28 2f       	mov	r18, r24
     6c6:	2f 70       	andi	r18, 0x0F	; 15
     6c8:	8f 70       	andi	r24, 0x0F	; 15
     6ca:	90 70       	andi	r25, 0x00	; 0
     6cc:	0a 97       	sbiw	r24, 0x0a	; 10
     6ce:	18 f4       	brcc	.+6      	; 0x6d6 <handle_sensor_query+0x1c4>
     6d0:	82 2f       	mov	r24, r18
     6d2:	80 5d       	subi	r24, 0xD0	; 208
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <handle_sensor_query+0x1c8>
     6d6:	82 2f       	mov	r24, r18
     6d8:	89 5c       	subi	r24, 0xC9	; 201
     6da:	9e 2f       	mov	r25, r30
     6dc:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     6de:	ef 70       	andi	r30, 0x0F	; 15
     6e0:	f0 70       	andi	r31, 0x00	; 0
     6e2:	3a 97       	sbiw	r30, 0x0a	; 10
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <handle_sensor_query+0x1d8>
     6e6:	90 5d       	subi	r25, 0xD0	; 208
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <handle_sensor_query+0x1da>
     6ea:	99 5c       	subi	r25, 0xC9	; 201
     6ec:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     6ee:	dc 82       	std	Y+4, r13	; 0x04
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     6f0:	8a 83       	std	Y+2, r24	; 0x02
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     6f2:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     6f4:	c7 01       	movw	r24, r14
     6f6:	64 e0       	ldi	r22, 0x04	; 4
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	45 d4       	rcall	.+2186   	; 0xf86 <usb_serial_write>
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
     6fc:	0f 5f       	subi	r16, 0xFF	; 255
     6fe:	1f 4f       	sbci	r17, 0xFF	; 255
     700:	0a 30       	cpi	r16, 0x0A	; 10
     702:	11 05       	cpc	r17, r1
     704:	09 f0       	breq	.+2      	; 0x708 <handle_sensor_query+0x1f6>
     706:	b5 cf       	rjmp	.-150    	; 0x672 <handle_sensor_query+0x160>
     708:	96 c2       	rjmp	.+1324   	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     70a:	86 e8       	ldi	r24, 0x86	; 134
     70c:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     710:	80 e8       	ldi	r24, 0x80	; 128
     712:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     716:	82 e4       	ldi	r24, 0x42	; 66
     718:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     71c:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     720:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     724:	8e ee       	ldi	r24, 0xEE	; 238
     726:	80 93 7a 00 	sts	0x007A, r24
	sei();
     72a:	78 94       	sei
     72c:	88 e8       	ldi	r24, 0x88	; 136
     72e:	93 e1       	ldi	r25, 0x13	; 19
     730:	20 e9       	ldi	r18, 0x90	; 144
     732:	31 e0       	ldi	r19, 0x01	; 1
     734:	f9 01       	movw	r30, r18
     736:	31 97       	sbiw	r30, 0x01	; 1
     738:	f1 f7       	brne	.-4      	; 0x736 <handle_sensor_query+0x224>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     73a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     73c:	d9 f7       	brne	.-10     	; 0x734 <handle_sensor_query+0x222>
     73e:	01 e0       	ldi	r16, 0x01	; 1
     740:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     742:	b0 e2       	ldi	r27, 0x20	; 32
     744:	db 2e       	mov	r13, r27
	        	usb_serial_write((unsigned char *)buf, 4);
     746:	7e 01       	movw	r14, r28
     748:	08 94       	sec
     74a:	e1 1c       	adc	r14, r1
     74c:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     74e:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     752:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     756:	8e 17       	cp	r24, r30
     758:	d1 f3       	breq	.-12     	; 0x74e <handle_sensor_query+0x23c>
	if (++t >= BUFSIZE) t = 0;
     75a:	8e 2f       	mov	r24, r30
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	82 30       	cpi	r24, 0x02	; 2
     760:	08 f0       	brcs	.+2      	; 0x764 <handle_sensor_query+0x252>
     762:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     764:	e8 2f       	mov	r30, r24
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	ee 0f       	add	r30, r30
     76a:	ff 1f       	adc	r31, r31
     76c:	e6 5f       	subi	r30, 0xF6	; 246
     76e:	fe 4f       	sbci	r31, 0xFE	; 254
     770:	01 90       	ld	r0, Z+
     772:	f0 81       	ld	r31, Z
     774:	e0 2d       	mov	r30, r0
	tail = t;
     776:	80 93 09 01 	sts	0x0109, r24
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     77a:	8f 2f       	mov	r24, r31
     77c:	99 27       	eor	r25, r25
     77e:	28 2f       	mov	r18, r24
     780:	2f 70       	andi	r18, 0x0F	; 15
     782:	8f 70       	andi	r24, 0x0F	; 15
     784:	90 70       	andi	r25, 0x00	; 0
     786:	0a 97       	sbiw	r24, 0x0a	; 10
     788:	18 f4       	brcc	.+6      	; 0x790 <handle_sensor_query+0x27e>
     78a:	32 2f       	mov	r19, r18
     78c:	30 5d       	subi	r19, 0xD0	; 208
     78e:	02 c0       	rjmp	.+4      	; 0x794 <handle_sensor_query+0x282>
     790:	32 2f       	mov	r19, r18
     792:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     794:	cf 01       	movw	r24, r30
     796:	64 e0       	ldi	r22, 0x04	; 4
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	6a 95       	dec	r22
     79e:	e1 f7       	brne	.-8      	; 0x798 <handle_sensor_query+0x286>
     7a0:	28 2f       	mov	r18, r24
     7a2:	2f 70       	andi	r18, 0x0F	; 15
     7a4:	8f 70       	andi	r24, 0x0F	; 15
     7a6:	90 70       	andi	r25, 0x00	; 0
     7a8:	0a 97       	sbiw	r24, 0x0a	; 10
     7aa:	18 f4       	brcc	.+6      	; 0x7b2 <handle_sensor_query+0x2a0>
     7ac:	82 2f       	mov	r24, r18
     7ae:	80 5d       	subi	r24, 0xD0	; 208
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <handle_sensor_query+0x2a4>
     7b2:	82 2f       	mov	r24, r18
     7b4:	89 5c       	subi	r24, 0xC9	; 201
     7b6:	9e 2f       	mov	r25, r30
     7b8:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     7ba:	ef 70       	andi	r30, 0x0F	; 15
     7bc:	f0 70       	andi	r31, 0x00	; 0
     7be:	3a 97       	sbiw	r30, 0x0a	; 10
     7c0:	10 f4       	brcc	.+4      	; 0x7c6 <handle_sensor_query+0x2b4>
     7c2:	90 5d       	subi	r25, 0xD0	; 208
     7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <handle_sensor_query+0x2b6>
     7c6:	99 5c       	subi	r25, 0xC9	; 201
     7c8:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     7ca:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     7cc:	8a 83       	std	Y+2, r24	; 0x02
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     7ce:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     7d0:	c7 01       	movw	r24, r14
     7d2:	64 e0       	ldi	r22, 0x04	; 4
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	d7 d3       	rcall	.+1966   	; 0xf86 <usb_serial_write>
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     7d8:	0f 5f       	subi	r16, 0xFF	; 255
     7da:	1f 4f       	sbci	r17, 0xFF	; 255
     7dc:	0a 30       	cpi	r16, 0x0A	; 10
     7de:	11 05       	cpc	r17, r1
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <handle_sensor_query+0x2d2>
     7e2:	b5 cf       	rjmp	.-150    	; 0x74e <handle_sensor_query+0x23c>
     7e4:	28 c2       	rjmp	.+1104   	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     7e6:	86 e8       	ldi	r24, 0x86	; 134
     7e8:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     7ec:	80 e8       	ldi	r24, 0x80	; 128
     7ee:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     7f2:	83 e4       	ldi	r24, 0x43	; 67
     7f4:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     7f8:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     7fc:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     800:	8e ee       	ldi	r24, 0xEE	; 238
     802:	80 93 7a 00 	sts	0x007A, r24
	sei();
     806:	78 94       	sei
     808:	88 e8       	ldi	r24, 0x88	; 136
     80a:	93 e1       	ldi	r25, 0x13	; 19
     80c:	20 e9       	ldi	r18, 0x90	; 144
     80e:	31 e0       	ldi	r19, 0x01	; 1
     810:	f9 01       	movw	r30, r18
     812:	31 97       	sbiw	r30, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <handle_sensor_query+0x300>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     816:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     818:	d9 f7       	brne	.-10     	; 0x810 <handle_sensor_query+0x2fe>
     81a:	01 e0       	ldi	r16, 0x01	; 1
     81c:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     81e:	50 e2       	ldi	r21, 0x20	; 32
     820:	d5 2e       	mov	r13, r21
	        	usb_serial_write((unsigned char *)buf, 4);
     822:	7e 01       	movw	r14, r28
     824:	08 94       	sec
     826:	e1 1c       	adc	r14, r1
     828:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     82a:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     82e:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     832:	8e 17       	cp	r24, r30
     834:	d1 f3       	breq	.-12     	; 0x82a <handle_sensor_query+0x318>
	if (++t >= BUFSIZE) t = 0;
     836:	8e 2f       	mov	r24, r30
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	82 30       	cpi	r24, 0x02	; 2
     83c:	08 f0       	brcs	.+2      	; 0x840 <handle_sensor_query+0x32e>
     83e:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     840:	e8 2f       	mov	r30, r24
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e6 5f       	subi	r30, 0xF6	; 246
     84a:	fe 4f       	sbci	r31, 0xFE	; 254
     84c:	01 90       	ld	r0, Z+
     84e:	f0 81       	ld	r31, Z
     850:	e0 2d       	mov	r30, r0
	tail = t;
     852:	80 93 09 01 	sts	0x0109, r24
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     856:	8f 2f       	mov	r24, r31
     858:	99 27       	eor	r25, r25
     85a:	28 2f       	mov	r18, r24
     85c:	2f 70       	andi	r18, 0x0F	; 15
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	90 70       	andi	r25, 0x00	; 0
     862:	0a 97       	sbiw	r24, 0x0a	; 10
     864:	18 f4       	brcc	.+6      	; 0x86c <handle_sensor_query+0x35a>
     866:	32 2f       	mov	r19, r18
     868:	30 5d       	subi	r19, 0xD0	; 208
     86a:	02 c0       	rjmp	.+4      	; 0x870 <handle_sensor_query+0x35e>
     86c:	32 2f       	mov	r19, r18
     86e:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     870:	cf 01       	movw	r24, r30
     872:	24 e0       	ldi	r18, 0x04	; 4
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	2a 95       	dec	r18
     87a:	e1 f7       	brne	.-8      	; 0x874 <handle_sensor_query+0x362>
     87c:	28 2f       	mov	r18, r24
     87e:	2f 70       	andi	r18, 0x0F	; 15
     880:	8f 70       	andi	r24, 0x0F	; 15
     882:	90 70       	andi	r25, 0x00	; 0
     884:	0a 97       	sbiw	r24, 0x0a	; 10
     886:	18 f4       	brcc	.+6      	; 0x88e <handle_sensor_query+0x37c>
     888:	82 2f       	mov	r24, r18
     88a:	80 5d       	subi	r24, 0xD0	; 208
     88c:	02 c0       	rjmp	.+4      	; 0x892 <handle_sensor_query+0x380>
     88e:	82 2f       	mov	r24, r18
     890:	89 5c       	subi	r24, 0xC9	; 201
     892:	9e 2f       	mov	r25, r30
     894:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     896:	ef 70       	andi	r30, 0x0F	; 15
     898:	f0 70       	andi	r31, 0x00	; 0
     89a:	3a 97       	sbiw	r30, 0x0a	; 10
     89c:	10 f4       	brcc	.+4      	; 0x8a2 <handle_sensor_query+0x390>
     89e:	90 5d       	subi	r25, 0xD0	; 208
     8a0:	01 c0       	rjmp	.+2      	; 0x8a4 <handle_sensor_query+0x392>
     8a2:	99 5c       	subi	r25, 0xC9	; 201
     8a4:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     8a6:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     8a8:	8a 83       	std	Y+2, r24	; 0x02
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     8aa:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     8ac:	c7 01       	movw	r24, r14
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	69 d3       	rcall	.+1746   	; 0xf86 <usb_serial_write>
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     8b4:	0f 5f       	subi	r16, 0xFF	; 255
     8b6:	1f 4f       	sbci	r17, 0xFF	; 255
     8b8:	0a 30       	cpi	r16, 0x0A	; 10
     8ba:	11 05       	cpc	r17, r1
     8bc:	09 f0       	breq	.+2      	; 0x8c0 <handle_sensor_query+0x3ae>
     8be:	b5 cf       	rjmp	.-150    	; 0x82a <handle_sensor_query+0x318>
     8c0:	ba c1       	rjmp	.+884    	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     8c2:	86 e8       	ldi	r24, 0x86	; 134
     8c4:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     8c8:	80 e8       	ldi	r24, 0x80	; 128
     8ca:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     8ce:	84 e4       	ldi	r24, 0x44	; 68
     8d0:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     8d4:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     8d8:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     8dc:	8e ee       	ldi	r24, 0xEE	; 238
     8de:	80 93 7a 00 	sts	0x007A, r24
	sei();
     8e2:	78 94       	sei
     8e4:	88 e8       	ldi	r24, 0x88	; 136
     8e6:	93 e1       	ldi	r25, 0x13	; 19
     8e8:	20 e9       	ldi	r18, 0x90	; 144
     8ea:	31 e0       	ldi	r19, 0x01	; 1
     8ec:	f9 01       	movw	r30, r18
     8ee:	31 97       	sbiw	r30, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <handle_sensor_query+0x3dc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8f4:	d9 f7       	brne	.-10     	; 0x8ec <handle_sensor_query+0x3da>
     8f6:	01 e0       	ldi	r16, 0x01	; 1
     8f8:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     8fa:	b0 e2       	ldi	r27, 0x20	; 32
     8fc:	db 2e       	mov	r13, r27
	        	usb_serial_write((unsigned char *)buf, 4);
     8fe:	7e 01       	movw	r14, r28
     900:	08 94       	sec
     902:	e1 1c       	adc	r14, r1
     904:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     906:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     90a:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     90e:	8e 17       	cp	r24, r30
     910:	d1 f3       	breq	.-12     	; 0x906 <handle_sensor_query+0x3f4>
	if (++t >= BUFSIZE) t = 0;
     912:	8e 2f       	mov	r24, r30
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	08 f0       	brcs	.+2      	; 0x91c <handle_sensor_query+0x40a>
     91a:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     91c:	e8 2f       	mov	r30, r24
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	e6 5f       	subi	r30, 0xF6	; 246
     926:	fe 4f       	sbci	r31, 0xFE	; 254
     928:	01 90       	ld	r0, Z+
     92a:	f0 81       	ld	r31, Z
     92c:	e0 2d       	mov	r30, r0
	tail = t;
     92e:	80 93 09 01 	sts	0x0109, r24
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     932:	8f 2f       	mov	r24, r31
     934:	99 27       	eor	r25, r25
     936:	28 2f       	mov	r18, r24
     938:	2f 70       	andi	r18, 0x0F	; 15
     93a:	8f 70       	andi	r24, 0x0F	; 15
     93c:	90 70       	andi	r25, 0x00	; 0
     93e:	0a 97       	sbiw	r24, 0x0a	; 10
     940:	18 f4       	brcc	.+6      	; 0x948 <handle_sensor_query+0x436>
     942:	32 2f       	mov	r19, r18
     944:	30 5d       	subi	r19, 0xD0	; 208
     946:	02 c0       	rjmp	.+4      	; 0x94c <handle_sensor_query+0x43a>
     948:	32 2f       	mov	r19, r18
     94a:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     94c:	cf 01       	movw	r24, r30
     94e:	64 e0       	ldi	r22, 0x04	; 4
     950:	96 95       	lsr	r25
     952:	87 95       	ror	r24
     954:	6a 95       	dec	r22
     956:	e1 f7       	brne	.-8      	; 0x950 <handle_sensor_query+0x43e>
     958:	28 2f       	mov	r18, r24
     95a:	2f 70       	andi	r18, 0x0F	; 15
     95c:	8f 70       	andi	r24, 0x0F	; 15
     95e:	90 70       	andi	r25, 0x00	; 0
     960:	0a 97       	sbiw	r24, 0x0a	; 10
     962:	18 f4       	brcc	.+6      	; 0x96a <handle_sensor_query+0x458>
     964:	82 2f       	mov	r24, r18
     966:	80 5d       	subi	r24, 0xD0	; 208
     968:	02 c0       	rjmp	.+4      	; 0x96e <handle_sensor_query+0x45c>
     96a:	82 2f       	mov	r24, r18
     96c:	89 5c       	subi	r24, 0xC9	; 201
     96e:	9e 2f       	mov	r25, r30
     970:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     972:	ef 70       	andi	r30, 0x0F	; 15
     974:	f0 70       	andi	r31, 0x00	; 0
     976:	3a 97       	sbiw	r30, 0x0a	; 10
     978:	10 f4       	brcc	.+4      	; 0x97e <handle_sensor_query+0x46c>
     97a:	90 5d       	subi	r25, 0xD0	; 208
     97c:	01 c0       	rjmp	.+2      	; 0x980 <handle_sensor_query+0x46e>
     97e:	99 5c       	subi	r25, 0xC9	; 201
     980:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     982:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     984:	8a 83       	std	Y+2, r24	; 0x02
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     986:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     988:	c7 01       	movw	r24, r14
     98a:	64 e0       	ldi	r22, 0x04	; 4
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	fb d2       	rcall	.+1526   	; 0xf86 <usb_serial_write>
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     990:	0f 5f       	subi	r16, 0xFF	; 255
     992:	1f 4f       	sbci	r17, 0xFF	; 255
     994:	0a 30       	cpi	r16, 0x0A	; 10
     996:	11 05       	cpc	r17, r1
     998:	09 f0       	breq	.+2      	; 0x99c <handle_sensor_query+0x48a>
     99a:	b5 cf       	rjmp	.-150    	; 0x906 <handle_sensor_query+0x3f4>
     99c:	4c c1       	rjmp	.+664    	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     99e:	86 e8       	ldi	r24, 0x86	; 134
     9a0:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     9a4:	80 e8       	ldi	r24, 0x80	; 128
     9a6:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     9aa:	85 e4       	ldi	r24, 0x45	; 69
     9ac:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     9b0:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     9b4:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     9b8:	8e ee       	ldi	r24, 0xEE	; 238
     9ba:	80 93 7a 00 	sts	0x007A, r24
	sei();
     9be:	78 94       	sei
     9c0:	88 e8       	ldi	r24, 0x88	; 136
     9c2:	93 e1       	ldi	r25, 0x13	; 19
     9c4:	20 e9       	ldi	r18, 0x90	; 144
     9c6:	31 e0       	ldi	r19, 0x01	; 1
     9c8:	f9 01       	movw	r30, r18
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <handle_sensor_query+0x4b8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ce:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9d0:	d9 f7       	brne	.-10     	; 0x9c8 <handle_sensor_query+0x4b6>
     9d2:	01 e0       	ldi	r16, 0x01	; 1
     9d4:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     9d6:	50 e2       	ldi	r21, 0x20	; 32
     9d8:	d5 2e       	mov	r13, r21
	        	usb_serial_write((unsigned char *)buf, 4);
     9da:	7e 01       	movw	r14, r28
     9dc:	08 94       	sec
     9de:	e1 1c       	adc	r14, r1
     9e0:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     9e2:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     9e6:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     9ea:	8e 17       	cp	r24, r30
     9ec:	d1 f3       	breq	.-12     	; 0x9e2 <handle_sensor_query+0x4d0>
	if (++t >= BUFSIZE) t = 0;
     9ee:	8e 2f       	mov	r24, r30
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	08 f0       	brcs	.+2      	; 0x9f8 <handle_sensor_query+0x4e6>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     9f8:	e8 2f       	mov	r30, r24
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e6 5f       	subi	r30, 0xF6	; 246
     a02:	fe 4f       	sbci	r31, 0xFE	; 254
     a04:	01 90       	ld	r0, Z+
     a06:	f0 81       	ld	r31, Z
     a08:	e0 2d       	mov	r30, r0
	tail = t;
     a0a:	80 93 09 01 	sts	0x0109, r24
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     a0e:	8f 2f       	mov	r24, r31
     a10:	99 27       	eor	r25, r25
     a12:	28 2f       	mov	r18, r24
     a14:	2f 70       	andi	r18, 0x0F	; 15
     a16:	8f 70       	andi	r24, 0x0F	; 15
     a18:	90 70       	andi	r25, 0x00	; 0
     a1a:	0a 97       	sbiw	r24, 0x0a	; 10
     a1c:	18 f4       	brcc	.+6      	; 0xa24 <handle_sensor_query+0x512>
     a1e:	32 2f       	mov	r19, r18
     a20:	30 5d       	subi	r19, 0xD0	; 208
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <handle_sensor_query+0x516>
     a24:	32 2f       	mov	r19, r18
     a26:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     a28:	cf 01       	movw	r24, r30
     a2a:	24 e0       	ldi	r18, 0x04	; 4
     a2c:	96 95       	lsr	r25
     a2e:	87 95       	ror	r24
     a30:	2a 95       	dec	r18
     a32:	e1 f7       	brne	.-8      	; 0xa2c <handle_sensor_query+0x51a>
     a34:	28 2f       	mov	r18, r24
     a36:	2f 70       	andi	r18, 0x0F	; 15
     a38:	8f 70       	andi	r24, 0x0F	; 15
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	0a 97       	sbiw	r24, 0x0a	; 10
     a3e:	18 f4       	brcc	.+6      	; 0xa46 <handle_sensor_query+0x534>
     a40:	82 2f       	mov	r24, r18
     a42:	80 5d       	subi	r24, 0xD0	; 208
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <handle_sensor_query+0x538>
     a46:	82 2f       	mov	r24, r18
     a48:	89 5c       	subi	r24, 0xC9	; 201
     a4a:	9e 2f       	mov	r25, r30
     a4c:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     a4e:	ef 70       	andi	r30, 0x0F	; 15
     a50:	f0 70       	andi	r31, 0x00	; 0
     a52:	3a 97       	sbiw	r30, 0x0a	; 10
     a54:	10 f4       	brcc	.+4      	; 0xa5a <handle_sensor_query+0x548>
     a56:	90 5d       	subi	r25, 0xD0	; 208
     a58:	01 c0       	rjmp	.+2      	; 0xa5c <handle_sensor_query+0x54a>
     a5a:	99 5c       	subi	r25, 0xC9	; 201
     a5c:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     a5e:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     a60:	8a 83       	std	Y+2, r24	; 0x02
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     a62:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     a64:	c7 01       	movw	r24, r14
     a66:	64 e0       	ldi	r22, 0x04	; 4
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	8d d2       	rcall	.+1306   	; 0xf86 <usb_serial_write>
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     a6c:	0f 5f       	subi	r16, 0xFF	; 255
     a6e:	1f 4f       	sbci	r17, 0xFF	; 255
     a70:	0a 30       	cpi	r16, 0x0A	; 10
     a72:	11 05       	cpc	r17, r1
     a74:	09 f0       	breq	.+2      	; 0xa78 <handle_sensor_query+0x566>
     a76:	b5 cf       	rjmp	.-150    	; 0x9e2 <handle_sensor_query+0x4d0>
     a78:	de c0       	rjmp	.+444    	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     a7a:	86 e8       	ldi	r24, 0x86	; 134
     a7c:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     a80:	80 e8       	ldi	r24, 0x80	; 128
     a82:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     a86:	86 e4       	ldi	r24, 0x46	; 70
     a88:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     a8c:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     a90:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     a94:	8e ee       	ldi	r24, 0xEE	; 238
     a96:	80 93 7a 00 	sts	0x007A, r24
	sei();
     a9a:	78 94       	sei
     a9c:	88 e8       	ldi	r24, 0x88	; 136
     a9e:	93 e1       	ldi	r25, 0x13	; 19
     aa0:	20 e9       	ldi	r18, 0x90	; 144
     aa2:	31 e0       	ldi	r19, 0x01	; 1
     aa4:	f9 01       	movw	r30, r18
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	f1 f7       	brne	.-4      	; 0xaa6 <handle_sensor_query+0x594>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aaa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aac:	d9 f7       	brne	.-10     	; 0xaa4 <handle_sensor_query+0x592>
     aae:	01 e0       	ldi	r16, 0x01	; 1
     ab0:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     ab2:	b0 e2       	ldi	r27, 0x20	; 32
     ab4:	db 2e       	mov	r13, r27
	        	usb_serial_write((unsigned char *)buf, 4);
     ab6:	7e 01       	movw	r14, r28
     ab8:	08 94       	sec
     aba:	e1 1c       	adc	r14, r1
     abc:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     abe:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     ac2:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     ac6:	8e 17       	cp	r24, r30
     ac8:	d1 f3       	breq	.-12     	; 0xabe <handle_sensor_query+0x5ac>
	if (++t >= BUFSIZE) t = 0;
     aca:	8e 2f       	mov	r24, r30
     acc:	8f 5f       	subi	r24, 0xFF	; 255
     ace:	82 30       	cpi	r24, 0x02	; 2
     ad0:	08 f0       	brcs	.+2      	; 0xad4 <handle_sensor_query+0x5c2>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     ad4:	e8 2f       	mov	r30, r24
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	e6 5f       	subi	r30, 0xF6	; 246
     ade:	fe 4f       	sbci	r31, 0xFE	; 254
     ae0:	01 90       	ld	r0, Z+
     ae2:	f0 81       	ld	r31, Z
     ae4:	e0 2d       	mov	r30, r0
	tail = t;
     ae6:	80 93 09 01 	sts	0x0109, r24
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     aea:	8f 2f       	mov	r24, r31
     aec:	99 27       	eor	r25, r25
     aee:	28 2f       	mov	r18, r24
     af0:	2f 70       	andi	r18, 0x0F	; 15
     af2:	8f 70       	andi	r24, 0x0F	; 15
     af4:	90 70       	andi	r25, 0x00	; 0
     af6:	0a 97       	sbiw	r24, 0x0a	; 10
     af8:	18 f4       	brcc	.+6      	; 0xb00 <__stack+0x1>
     afa:	32 2f       	mov	r19, r18
     afc:	30 5d       	subi	r19, 0xD0	; 208
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <__stack+0x5>
     b00:	32 2f       	mov	r19, r18
     b02:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     b04:	cf 01       	movw	r24, r30
     b06:	64 e0       	ldi	r22, 0x04	; 4
     b08:	96 95       	lsr	r25
     b0a:	87 95       	ror	r24
     b0c:	6a 95       	dec	r22
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <__stack+0x9>
     b10:	28 2f       	mov	r18, r24
     b12:	2f 70       	andi	r18, 0x0F	; 15
     b14:	8f 70       	andi	r24, 0x0F	; 15
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	0a 97       	sbiw	r24, 0x0a	; 10
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__stack+0x23>
     b1c:	82 2f       	mov	r24, r18
     b1e:	80 5d       	subi	r24, 0xD0	; 208
     b20:	02 c0       	rjmp	.+4      	; 0xb26 <__stack+0x27>
     b22:	82 2f       	mov	r24, r18
     b24:	89 5c       	subi	r24, 0xC9	; 201
     b26:	9e 2f       	mov	r25, r30
     b28:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     b2a:	ef 70       	andi	r30, 0x0F	; 15
     b2c:	f0 70       	andi	r31, 0x00	; 0
     b2e:	3a 97       	sbiw	r30, 0x0a	; 10
     b30:	10 f4       	brcc	.+4      	; 0xb36 <__stack+0x37>
     b32:	90 5d       	subi	r25, 0xD0	; 208
     b34:	01 c0       	rjmp	.+2      	; 0xb38 <__stack+0x39>
     b36:	99 5c       	subi	r25, 0xC9	; 201
     b38:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     b3a:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     b3c:	8a 83       	std	Y+2, r24	; 0x02
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     b3e:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     b40:	c7 01       	movw	r24, r14
     b42:	64 e0       	ldi	r22, 0x04	; 4
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	1f d2       	rcall	.+1086   	; 0xf86 <usb_serial_write>
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     b48:	0f 5f       	subi	r16, 0xFF	; 255
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	0a 30       	cpi	r16, 0x0A	; 10
     b4e:	11 05       	cpc	r17, r1
     b50:	09 f0       	breq	.+2      	; 0xb54 <__stack+0x55>
     b52:	b5 cf       	rjmp	.-150    	; 0xabe <handle_sensor_query+0x5ac>
     b54:	70 c0       	rjmp	.+224    	; 0xc36 <__stack+0x137>
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     b56:	86 e8       	ldi	r24, 0x86	; 134
     b58:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     b5c:	80 e8       	ldi	r24, 0x80	; 128
     b5e:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     b62:	87 e4       	ldi	r24, 0x47	; 71
     b64:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     b68:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     b6c:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     b70:	8e ee       	ldi	r24, 0xEE	; 238
     b72:	80 93 7a 00 	sts	0x007A, r24
	sei();
     b76:	78 94       	sei
     b78:	88 e8       	ldi	r24, 0x88	; 136
     b7a:	93 e1       	ldi	r25, 0x13	; 19
     b7c:	20 e9       	ldi	r18, 0x90	; 144
     b7e:	31 e0       	ldi	r19, 0x01	; 1
     b80:	f9 01       	movw	r30, r18
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <__stack+0x83>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b86:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b88:	d9 f7       	brne	.-10     	; 0xb80 <__stack+0x81>
     b8a:	01 e0       	ldi	r16, 0x01	; 1
     b8c:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     b8e:	50 e2       	ldi	r21, 0x20	; 32
     b90:	d5 2e       	mov	r13, r21
	        	usb_serial_write((unsigned char *)buf, 4);
     b92:	7e 01       	movw	r14, r28
     b94:	08 94       	sec
     b96:	e1 1c       	adc	r14, r1
     b98:	f1 1c       	adc	r15, r1
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     b9a:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     b9e:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     ba2:	8e 17       	cp	r24, r30
     ba4:	d1 f3       	breq	.-12     	; 0xb9a <__stack+0x9b>
	if (++t >= BUFSIZE) t = 0;
     ba6:	8e 2f       	mov	r24, r30
     ba8:	8f 5f       	subi	r24, 0xFF	; 255
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <__stack+0xb1>
     bae:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     bb0:	e8 2f       	mov	r30, r24
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	e6 5f       	subi	r30, 0xF6	; 246
     bba:	fe 4f       	sbci	r31, 0xFE	; 254
     bbc:	01 90       	ld	r0, Z+
     bbe:	f0 81       	ld	r31, Z
     bc0:	e0 2d       	mov	r30, r0
	tail = t;
     bc2:	80 93 09 01 	sts	0x0109, r24
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     bc6:	8f 2f       	mov	r24, r31
     bc8:	99 27       	eor	r25, r25
     bca:	28 2f       	mov	r18, r24
     bcc:	2f 70       	andi	r18, 0x0F	; 15
     bce:	8f 70       	andi	r24, 0x0F	; 15
     bd0:	90 70       	andi	r25, 0x00	; 0
     bd2:	0a 97       	sbiw	r24, 0x0a	; 10
     bd4:	18 f4       	brcc	.+6      	; 0xbdc <__stack+0xdd>
     bd6:	32 2f       	mov	r19, r18
     bd8:	30 5d       	subi	r19, 0xD0	; 208
     bda:	02 c0       	rjmp	.+4      	; 0xbe0 <__stack+0xe1>
     bdc:	32 2f       	mov	r19, r18
     bde:	39 5c       	subi	r19, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     be0:	cf 01       	movw	r24, r30
     be2:	24 e0       	ldi	r18, 0x04	; 4
     be4:	96 95       	lsr	r25
     be6:	87 95       	ror	r24
     be8:	2a 95       	dec	r18
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <__stack+0xe5>
     bec:	28 2f       	mov	r18, r24
     bee:	2f 70       	andi	r18, 0x0F	; 15
     bf0:	8f 70       	andi	r24, 0x0F	; 15
     bf2:	90 70       	andi	r25, 0x00	; 0
     bf4:	0a 97       	sbiw	r24, 0x0a	; 10
     bf6:	18 f4       	brcc	.+6      	; 0xbfe <__stack+0xff>
     bf8:	82 2f       	mov	r24, r18
     bfa:	80 5d       	subi	r24, 0xD0	; 208
     bfc:	02 c0       	rjmp	.+4      	; 0xc02 <__stack+0x103>
     bfe:	82 2f       	mov	r24, r18
     c00:	89 5c       	subi	r24, 0xC9	; 201
     c02:	9e 2f       	mov	r25, r30
     c04:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     c06:	ef 70       	andi	r30, 0x0F	; 15
     c08:	f0 70       	andi	r31, 0x00	; 0
     c0a:	3a 97       	sbiw	r30, 0x0a	; 10
     c0c:	10 f4       	brcc	.+4      	; 0xc12 <__stack+0x113>
     c0e:	90 5d       	subi	r25, 0xD0	; 208
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <__stack+0x115>
     c12:	99 5c       	subi	r25, 0xC9	; 201
     c14:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     c16:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     c18:	8a 83       	std	Y+2, r24	; 0x02
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     c1a:	39 83       	std	Y+1, r19	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     c1c:	c7 01       	movw	r24, r14
     c1e:	64 e0       	ldi	r22, 0x04	; 4
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	b1 d1       	rcall	.+866    	; 0xf86 <usb_serial_write>
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     c24:	0f 5f       	subi	r16, 0xFF	; 255
     c26:	1f 4f       	sbci	r17, 0xFF	; 255
     c28:	0a 30       	cpi	r16, 0x0A	; 10
     c2a:	11 05       	cpc	r17, r1
     c2c:	09 f0       	breq	.+2      	; 0xc30 <__stack+0x131>
     c2e:	b5 cf       	rjmp	.-150    	; 0xb9a <__stack+0x9b>
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__stack+0x137>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		default:
			usb_serial_putchar('\x01');
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <__stack+0x139>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	64 d1       	rcall	.+712    	; 0xf02 <usb_serial_putchar>
	usb_serial_putchar('\n');
     c3a:	8a e0       	ldi	r24, 0x0A	; 10
     c3c:	62 d1       	rcall	.+708    	; 0xf02 <usb_serial_putchar>
}
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <handle_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
}

void handle_command(const char *str, uint8_t len)
{
     c56:	fc 01       	movw	r30, r24
	if(len == 0)
     c58:	66 23       	and	r22, r22
     c5a:	d9 f0       	breq	.+54     	; 0xc92 <handle_command+0x3c>
		return;

	switch(str[0])
     c5c:	80 81       	ld	r24, Z
     c5e:	83 30       	cpi	r24, 0x03	; 3
     c60:	79 f0       	breq	.+30     	; 0xc80 <handle_command+0x2a>
     c62:	84 30       	cpi	r24, 0x04	; 4
     c64:	28 f4       	brcc	.+10     	; 0xc70 <handle_command+0x1a>
     c66:	88 23       	and	r24, r24
     c68:	41 f0       	breq	.+16     	; 0xc7a <handle_command+0x24>
     c6a:	81 30       	cpi	r24, 0x01	; 1
     c6c:	79 f4       	brne	.+30     	; 0xc8c <handle_command+0x36>
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <handle_command+0x26>
     c70:	84 30       	cpi	r24, 0x04	; 4
     c72:	39 f0       	breq	.+14     	; 0xc82 <handle_command+0x2c>
     c74:	87 30       	cpi	r24, 0x07	; 7
     c76:	51 f4       	brne	.+20     	; 0xc8c <handle_command+0x36>
     c78:	07 c0       	rjmp	.+14     	; 0xc88 <handle_command+0x32>
	{
		case 0:
			handle_version_command();
     c7a:	cc cb       	rjmp	.-2152   	; 0x414 <handle_version_command>
			break;
		case 1:
			handle_ping_command(str, len);
     c7c:	cf 01       	movw	r24, r30
     c7e:	ac cb       	rjmp	.-2216   	; 0x3d8 <handle_ping_command>
			break;
		case 3:
			handle_pwm_ports_command();
     c80:	a4 cb       	rjmp	.-2232   	; 0x3ca <handle_pwm_ports_command>
			break;
		case 4:
			handle_set_pwm_command(str[1], str[2]);
     c82:	81 81       	ldd	r24, Z+1	; 0x01
     c84:	62 81       	ldd	r22, Z+2	; 0x02
     c86:	cb cb       	rjmp	.-2154   	; 0x41e <handle_set_pwm_command>
			break;
        case 7:
            handle_sensor_query(str[1]);
     c88:	81 81       	ldd	r24, Z+1	; 0x01
     c8a:	43 cc       	rjmp	.-1914   	; 0x512 <handle_sensor_query>
            break;
		default:
			send_str(PSTR("INVALID_COMMAND_CODE"));
     c8c:	88 ee       	ldi	r24, 0xE8	; 232
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	8f cb       	rjmp	.-2274   	; 0x3b0 <send_str>
     c92:	08 95       	ret

00000c94 <sensor_display>:

void send_str(const char *s);
uint8_t recv_str(char *buf, uint8_t size);
void parse_and_execute_command(const char *buf, uint8_t num);

void sensor_display(){
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <sensor_display+0xa>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <sensor_display+0xc>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
     ca4:	86 e8       	ldi	r24, 0x86	; 134
     ca6:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
     caa:	80 e8       	ldi	r24, 0x80	; 128
     cac:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
     cb0:	80 e4       	ldi	r24, 0x40	; 64
     cb2:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
     cb6:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
     cba:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
     cbe:	8e ee       	ldi	r24, 0xEE	; 238
     cc0:	80 93 7a 00 	sts	0x007A, r24
	sei();
     cc4:	78 94       	sei
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
     cc6:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
     cca:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
     cce:	8e 17       	cp	r24, r30
     cd0:	d1 f3       	breq	.-12     	; 0xcc6 <sensor_display+0x32>
	if (++t >= BUFSIZE) t = 0;
     cd2:	8e 2f       	mov	r24, r30
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	82 30       	cpi	r24, 0x02	; 2
     cd8:	08 f0       	brcs	.+2      	; 0xcdc <sensor_display+0x48>
     cda:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
     cdc:	e8 2f       	mov	r30, r24
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ee 0f       	add	r30, r30
     ce2:	ff 1f       	adc	r31, r31
     ce4:	e6 5f       	subi	r30, 0xF6	; 246
     ce6:	fe 4f       	sbci	r31, 0xFE	; 254
     ce8:	00 81       	ld	r16, Z
     cea:	11 81       	ldd	r17, Z+1	; 0x01
	tail = t;
     cec:	80 93 09 01 	sts	0x0109, r24
     cf0:	20 e0       	ldi	r18, 0x00	; 0
    uint16_t val;
    uint16_t val_;
    char buf[4];
    adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
    val = adc_read();
    buf[0] = HEX((val_ >> 8) & 15);
     cf2:	20 5d       	subi	r18, 0xD0	; 208
    buf[1] = HEX((val_ >> 4) & 15);
    buf[2] = HEX(val_ & 15);
     cf4:	2b 83       	std	Y+3, r18	; 0x03
    buf[3] = ' ';
     cf6:	80 e2       	ldi	r24, 0x20	; 32
     cf8:	8c 83       	std	Y+4, r24	; 0x04
    uint16_t val_;
    char buf[4];
    adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
    val = adc_read();
    buf[0] = HEX((val_ >> 8) & 15);
    buf[1] = HEX((val_ >> 4) & 15);
     cfa:	2a 83       	std	Y+2, r18	; 0x02
    uint16_t val;
    uint16_t val_;
    char buf[4];
    adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
    val = adc_read();
    buf[0] = HEX((val_ >> 8) & 15);
     cfc:	29 83       	std	Y+1, r18	; 0x01
    buf[1] = HEX((val_ >> 4) & 15);
    buf[2] = HEX(val_ & 15);
    buf[3] = ' ';
    usb_serial_write((unsigned char *)buf, 4);
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	64 e0       	ldi	r22, 0x04	; 4
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	3f d1       	rcall	.+638    	; 0xf86 <usb_serial_write>

    if (val < 100){
     d08:	04 36       	cpi	r16, 0x64	; 100
     d0a:	11 05       	cpc	r17, r1
     d0c:	10 f4       	brcc	.+4      	; 0xd12 <sensor_display+0x7e>
        OCR0B = off;
     d0e:	18 bc       	out	0x28, r1	; 40
     d10:	29 c0       	rjmp	.+82     	; 0xd64 <sensor_display+0xd0>
        OCR1A = off;
        OCR2A = off;
        OCR2B = off;
    }
    else
    if (val < 200){
     d12:	08 3c       	cpi	r16, 0xC8	; 200
     d14:	11 05       	cpc	r17, r1
     d16:	30 f4       	brcc	.+12     	; 0xd24 <sensor_display+0x90>
        OCR0B = off;
     d18:	18 bc       	out	0x28, r1	; 40
        OCR1A = off;
     d1a:	10 92 89 00 	sts	0x0089, r1
     d1e:	10 92 88 00 	sts	0x0088, r1
     d22:	62 c0       	rjmp	.+196    	; 0xde8 <sensor_display+0x154>
        OCR2A = off;
        OCR2B = full;
    }
    else
    if (val < 300){
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	0c 32       	cpi	r16, 0x2C	; 44
     d28:	18 07       	cpc	r17, r24
     d2a:	58 f4       	brcc	.+22     	; 0xd42 <sensor_display+0xae>
        OCR0B = off;
     d2c:	18 bc       	out	0x28, r1	; 40
        OCR1A = off;
     d2e:	10 92 89 00 	sts	0x0089, r1
     d32:	10 92 88 00 	sts	0x0088, r1
        OCR2A = full;
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	80 93 b3 00 	sts	0x00B3, r24
        OCR2B = off;
     d3c:	10 92 b4 00 	sts	0x00B4, r1
     d40:	58 c0       	rjmp	.+176    	; 0xdf2 <sensor_display+0x15e>
    }
    else
    if (val < 400){
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	00 39       	cpi	r16, 0x90	; 144
     d46:	18 07       	cpc	r17, r24
     d48:	38 f4       	brcc	.+14     	; 0xd58 <sensor_display+0xc4>
        OCR0B = off;
     d4a:	18 bc       	out	0x28, r1	; 40
        OCR1A = off;
     d4c:	10 92 89 00 	sts	0x0089, r1
     d50:	10 92 88 00 	sts	0x0088, r1
        OCR2A = full;
     d54:	8f ef       	ldi	r24, 0xFF	; 255
     d56:	2d c0       	rjmp	.+90     	; 0xdb2 <sensor_display+0x11e>
        OCR2B = full;
    }      
    else
    if (val < 500){
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	04 3f       	cpi	r16, 0xF4	; 244
     d5c:	18 07       	cpc	r17, r24
     d5e:	38 f4       	brcc	.+14     	; 0xd6e <sensor_display+0xda>
        OCR0B = full;
     d60:	8f ef       	ldi	r24, 0xFF	; 255
     d62:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     d64:	10 92 89 00 	sts	0x0089, r1
     d68:	10 92 88 00 	sts	0x0088, r1
     d6c:	30 c0       	rjmp	.+96     	; 0xdce <sensor_display+0x13a>
        OCR2A = off;
        OCR2B = off;
    }
    else
    if (val < 600){
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	08 35       	cpi	r16, 0x58	; 88
     d72:	18 07       	cpc	r17, r24
     d74:	48 f4       	brcc	.+18     	; 0xd88 <sensor_display+0xf4>
        OCR0B = full;
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     d7a:	10 92 89 00 	sts	0x0089, r1
     d7e:	10 92 88 00 	sts	0x0088, r1
        OCR2A = off;
     d82:	10 92 b3 00 	sts	0x00B3, r1
     d86:	33 c0       	rjmp	.+102    	; 0xdee <sensor_display+0x15a>
        OCR2B = full;
    }  
    else
    if (val < 700){
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	0c 3b       	cpi	r16, 0xBC	; 188
     d8c:	18 07       	cpc	r17, r24
     d8e:	38 f4       	brcc	.+14     	; 0xd9e <sensor_display+0x10a>
        OCR0B = full;
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     d94:	10 92 89 00 	sts	0x0089, r1
     d98:	10 92 88 00 	sts	0x0088, r1
     d9c:	cd cf       	rjmp	.-102    	; 0xd38 <sensor_display+0xa4>
        OCR2A = full;
        OCR2B = off;
    } 
    else
    if (val < 800){
     d9e:	83 e0       	ldi	r24, 0x03	; 3
     da0:	00 32       	cpi	r16, 0x20	; 32
     da2:	18 07       	cpc	r17, r24
     da4:	48 f4       	brcc	.+18     	; 0xdb8 <sensor_display+0x124>
        OCR0B = full;
     da6:	8f ef       	ldi	r24, 0xFF	; 255
     da8:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     daa:	10 92 89 00 	sts	0x0089, r1
     dae:	10 92 88 00 	sts	0x0088, r1
        OCR2A = full;
     db2:	80 93 b3 00 	sts	0x00B3, r24
     db6:	1b c0       	rjmp	.+54     	; 0xdee <sensor_display+0x15a>
        OCR2B = full;
    } 
    else
    if (val < 900){
     db8:	83 e0       	ldi	r24, 0x03	; 3
     dba:	04 38       	cpi	r16, 0x84	; 132
     dbc:	18 07       	cpc	r17, r24
     dbe:	50 f4       	brcc	.+20     	; 0xdd4 <sensor_display+0x140>
        OCR0B = off;
     dc0:	18 bc       	out	0x28, r1	; 40
        OCR1A = full;
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	90 93 89 00 	sts	0x0089, r25
     dca:	80 93 88 00 	sts	0x0088, r24
        OCR2A = off;
     dce:	10 92 b3 00 	sts	0x00B3, r1
     dd2:	b4 cf       	rjmp	.-152    	; 0xd3c <sensor_display+0xa8>
        OCR2B = off;
    }
    else
    if (val < 1000){
     dd4:	08 5e       	subi	r16, 0xE8	; 232
     dd6:	13 40       	sbci	r17, 0x03	; 3
     dd8:	60 f4       	brcc	.+24     	; 0xdf2 <sensor_display+0x15e>
        OCR0B = off;
     dda:	18 bc       	out	0x28, r1	; 40
        OCR1A = full;
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	90 93 89 00 	sts	0x0089, r25
     de4:	80 93 88 00 	sts	0x0088, r24
        OCR2A = off;
     de8:	10 92 b3 00 	sts	0x00B3, r1
        OCR2B = full;
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	80 93 b4 00 	sts	0x00B4, r24
    }


}
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	08 95       	ret

00000e04 <main>:
			send_str(PSTR("INVALID_COMMAND_CODE"));
	}
}

int main(void)
{
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	cd b7       	in	r28, 0x3d	; 61
     e0e:	de b7       	in	r29, 0x3e	; 62
     e10:	a0 97       	sbiw	r28, 0x20	; 32
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(2);
     e1c:	80 e8       	ldi	r24, 0x80	; 128
     e1e:	80 93 61 00 	sts	0x0061, r24
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();
     e28:	a6 da       	rcall	.-2740   	; 0x376 <setup_pwms>

   	usb_init();
     e2a:	1d d0       	rcall	.+58     	; 0xe66 <usb_init>
	while (!usb_configured()) /* wait */ ;
     e2c:	35 d0       	rcall	.+106    	; 0xe98 <usb_configured>
     e2e:	88 23       	and	r24, r24
     e30:	e9 f3       	breq	.-6      	; 0xe2c <main+0x28>
     e32:	80 e1       	ldi	r24, 0x10	; 16
     e34:	97 e2       	ldi	r25, 0x27	; 39
     e36:	20 e9       	ldi	r18, 0x90	; 144
     e38:	31 e0       	ldi	r19, 0x01	; 1
     e3a:	f9 01       	movw	r30, r18
     e3c:	31 97       	sbiw	r30, 0x01	; 1
     e3e:	f1 f7       	brne	.-4      	; 0xe3c <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	d9 f7       	brne	.-10     	; 0xe3a <main+0x36>
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
		usb_serial_flush_input();

    //      send_str("Made it to the main loop");
    		while (1) {
		n = recv_str(buf, sizeof(buf));
     e44:	8e 01       	movw	r16, r28
     e46:	0f 5f       	subi	r16, 0xFF	; 255
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
   	usb_init();
	while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);

	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
     e4a:	c5 d1       	rcall	.+906    	; 0x11d6 <usb_serial_get_control>
     e4c:	80 ff       	sbrs	r24, 0
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <main+0x46>
		usb_serial_flush_input();
     e50:	45 d0       	rcall	.+138    	; 0xedc <usb_serial_flush_input>

    //      send_str("Made it to the main loop");
    		while (1) {
		n = recv_str(buf, sizeof(buf));
     e52:	c8 01       	movw	r24, r16
     e54:	60 e2       	ldi	r22, 0x20	; 32
     e56:	37 db       	rcall	.-2450   	; 0x4c6 <recv_str>
     e58:	68 2f       	mov	r22, r24
			if (n == 255) break;
     e5a:	8f 3f       	cpi	r24, 0xFF	; 255
     e5c:	b1 f3       	breq	.-20     	; 0xe4a <main+0x46>
			handle_command(buf, n);
     e5e:	c8 01       	movw	r24, r16
     e60:	fa de       	rcall	.-524    	; 0xc56 <handle_command>
    //        send_str("Made it to the inner loop");
             sensor_display();
     e62:	18 df       	rcall	.-464    	; 0xc94 <sensor_display>
     e64:	f6 cf       	rjmp	.-20     	; 0xe52 <main+0x4e>

00000e66 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     e6c:	80 ea       	ldi	r24, 0xA0	; 160
     e6e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     e72:	82 e1       	ldi	r24, 0x12	; 18
     e74:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     e76:	09 b4       	in	r0, 0x29	; 41
     e78:	00 fe       	sbrs	r0, 0
     e7a:	fd cf       	rjmp	.-6      	; 0xe76 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     e7c:	80 e9       	ldi	r24, 0x90	; 144
     e7e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     e82:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     e86:	10 92 0e 01 	sts	0x010E, r1
	cdc_line_rtsdtr = 0;
     e8a:	10 92 0f 01 	sts	0x010F, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     e8e:	8c e0       	ldi	r24, 0x0C	; 12
     e90:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     e94:	78 94       	sei
}
     e96:	08 95       	ret

00000e98 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     e98:	80 91 0e 01 	lds	r24, 0x010E
}
     e9c:	08 95       	ret

00000e9e <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     e9e:	2f b7       	in	r18, 0x3f	; 63
	cli();
     ea0:	f8 94       	cli
	if (!usb_configuration) {
     ea2:	80 91 0e 01 	lds	r24, 0x010E
     ea6:	88 23       	and	r24, r24
     ea8:	39 f0       	breq	.+14     	; 0xeb8 <usb_serial_getchar+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     eaa:	83 e0       	ldi	r24, 0x03	; 3
     eac:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     eb0:	80 91 e8 00 	lds	r24, 0x00E8
     eb4:	85 fd       	sbrc	r24, 5
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <usb_serial_getchar+0x22>
		// no data in buffer
		SREG = intr_state;
     eb8:	2f bf       	out	0x3f, r18	; 63
     eba:	2f ef       	ldi	r18, 0xFF	; 255
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	0c c0       	rjmp	.+24     	; 0xed8 <usb_serial_getchar+0x3a>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     ec0:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     ec4:	80 91 e8 00 	lds	r24, 0x00E8
     ec8:	85 fd       	sbrc	r24, 5
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <usb_serial_getchar+0x34>
     ecc:	8b e6       	ldi	r24, 0x6B	; 107
     ece:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     ed2:	2f bf       	out	0x3f, r18	; 63
	return c;
     ed4:	29 2f       	mov	r18, r25
     ed6:	30 e0       	ldi	r19, 0x00	; 0
}
     ed8:	c9 01       	movw	r24, r18
     eda:	08 95       	ret

00000edc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     edc:	80 91 0e 01 	lds	r24, 0x010E
     ee0:	88 23       	and	r24, r24
     ee2:	71 f0       	breq	.+28     	; 0xf00 <usb_serial_flush_input+0x24>
		intr_state = SREG;
     ee4:	9f b7       	in	r25, 0x3f	; 63
		cli();
     ee6:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     eee:	2b e6       	ldi	r18, 0x6B	; 107
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <usb_serial_flush_input+0x1a>
     ef2:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     ef6:	80 91 e8 00 	lds	r24, 0x00E8
     efa:	85 fd       	sbrc	r24, 5
     efc:	fa cf       	rjmp	.-12     	; 0xef2 <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     efe:	9f bf       	out	0x3f, r25	; 63
     f00:	08 95       	ret

00000f02 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
     f02:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     f04:	80 91 0e 01 	lds	r24, 0x010E
     f08:	88 23       	and	r24, r24
     f0a:	d9 f1       	breq	.+118    	; 0xf82 <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     f0c:	2f b7       	in	r18, 0x3f	; 63
	cli();
     f0e:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     f10:	84 e0       	ldi	r24, 0x04	; 4
     f12:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     f16:	80 91 11 01 	lds	r24, 0x0111
     f1a:	88 23       	and	r24, r24
     f1c:	41 f0       	breq	.+16     	; 0xf2e <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     f1e:	80 91 e8 00 	lds	r24, 0x00E8
     f22:	85 fd       	sbrc	r24, 5
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <usb_serial_putchar+0x28>
			SREG = intr_state;
     f26:	2f bf       	out	0x3f, r18	; 63
     f28:	12 c0       	rjmp	.+36     	; 0xf4e <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     f2a:	10 92 11 01 	sts	0x0111, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     f2e:	90 91 e4 00 	lds	r25, 0x00E4
     f32:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     f34:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     f36:	80 91 e8 00 	lds	r24, 0x00E8
     f3a:	85 fd       	sbrc	r24, 5
     f3c:	13 c0       	rjmp	.+38     	; 0xf64 <usb_serial_putchar+0x62>
		SREG = intr_state;
     f3e:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     f40:	80 91 e4 00 	lds	r24, 0x00E4
     f44:	89 17       	cp	r24, r25
     f46:	29 f4       	brne	.+10     	; 0xf52 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 11 01 	sts	0x0111, r24
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     f52:	80 91 0e 01 	lds	r24, 0x010E
     f56:	88 23       	and	r24, r24
     f58:	a1 f0       	breq	.+40     	; 0xf82 <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
     f5a:	2f b7       	in	r18, 0x3f	; 63
		cli();
     f5c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     f5e:	30 93 e9 00 	sts	0x00E9, r19
     f62:	e9 cf       	rjmp	.-46     	; 0xf36 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     f64:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     f68:	80 91 e8 00 	lds	r24, 0x00E8
     f6c:	85 fd       	sbrc	r24, 5
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <usb_serial_putchar+0x74>
     f70:	8a e3       	ldi	r24, 0x3A	; 58
     f72:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     f76:	85 e0       	ldi	r24, 0x05	; 5
     f78:	80 93 10 01 	sts	0x0110, r24
	SREG = intr_state;
     f7c:	2f bf       	out	0x3f, r18	; 63
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
	return 0;
     f82:	8f ef       	ldi	r24, 0xFF	; 255
}
     f84:	08 95       	ret

00000f86 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     f8c:	80 91 0e 01 	lds	r24, 0x010E
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <usb_serial_write+0x10>
     f94:	1c c1       	rjmp	.+568    	; 0x11ce <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     f96:	3f b7       	in	r19, 0x3f	; 63
	cli();
     f98:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     fa0:	80 91 11 01 	lds	r24, 0x0111
     fa4:	88 23       	and	r24, r24
     fa6:	09 f4       	brne	.+2      	; 0xfaa <usb_serial_write+0x24>
     fa8:	07 c1       	rjmp	.+526    	; 0x11b8 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
     faa:	80 91 e8 00 	lds	r24, 0x00E8
     fae:	85 fd       	sbrc	r24, 5
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <usb_serial_write+0x30>
			SREG = intr_state;
     fb2:	3f bf       	out	0x3f, r19	; 63
     fb4:	0c c1       	rjmp	.+536    	; 0x11ce <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     fb6:	10 92 11 01 	sts	0x0111, r1
     fba:	fe c0       	rjmp	.+508    	; 0x11b8 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     fbc:	90 91 e4 00 	lds	r25, 0x00E4
     fc0:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     fc2:	80 91 e8 00 	lds	r24, 0x00E8
     fc6:	85 fd       	sbrc	r24, 5
     fc8:	13 c0       	rjmp	.+38     	; 0xff0 <usb_serial_write+0x6a>
			SREG = intr_state;
     fca:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     fcc:	80 91 e4 00 	lds	r24, 0x00E4
     fd0:	89 17       	cp	r24, r25
     fd2:	21 f4       	brne	.+8      	; 0xfdc <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	80 93 11 01 	sts	0x0111, r24
     fda:	f9 c0       	rjmp	.+498    	; 0x11ce <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     fdc:	80 91 0e 01 	lds	r24, 0x010E
     fe0:	88 23       	and	r24, r24
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <usb_serial_write+0x60>
     fe4:	f4 c0       	rjmp	.+488    	; 0x11ce <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     fe6:	3f b7       	in	r19, 0x3f	; 63
			cli();
     fe8:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     fea:	50 93 e9 00 	sts	0x00E9, r21
     fee:	e9 cf       	rjmp	.-46     	; 0xfc2 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     ff0:	80 91 f2 00 	lds	r24, 0x00F2
     ff4:	2a 2f       	mov	r18, r26
     ff6:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     ff8:	82 2f       	mov	r24, r18
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	68 17       	cp	r22, r24
     ffe:	79 07       	cpc	r23, r25
    1000:	08 f4       	brcc	.+2      	; 0x1004 <usb_serial_write+0x7e>
    1002:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
    1004:	82 2f       	mov	r24, r18
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	81 34       	cpi	r24, 0x41	; 65
    100a:	91 05       	cpc	r25, r1
    100c:	08 f0       	brcs	.+2      	; 0x1010 <usb_serial_write+0x8a>
    100e:	c6 c0       	rjmp	.+396    	; 0x119c <usb_serial_write+0x216>
    1010:	8a 5a       	subi	r24, 0xAA	; 170
    1012:	9f 4f       	sbci	r25, 0xFF	; 255
    1014:	fc 01       	movw	r30, r24
    1016:	ee 0f       	add	r30, r30
    1018:	ff 1f       	adc	r31, r31
    101a:	05 90       	lpm	r0, Z+
    101c:	f4 91       	lpm	r31, Z+
    101e:	e0 2d       	mov	r30, r0
    1020:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
    1022:	89 91       	ld	r24, Y+
    1024:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
    1028:	89 91       	ld	r24, Y+
    102a:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
    102e:	89 91       	ld	r24, Y+
    1030:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
    1034:	89 91       	ld	r24, Y+
    1036:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
    103a:	89 91       	ld	r24, Y+
    103c:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
    1040:	89 91       	ld	r24, Y+
    1042:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
    1046:	89 91       	ld	r24, Y+
    1048:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
    104c:	89 91       	ld	r24, Y+
    104e:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
    1052:	89 91       	ld	r24, Y+
    1054:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
    1058:	89 91       	ld	r24, Y+
    105a:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
    105e:	89 91       	ld	r24, Y+
    1060:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
    1064:	89 91       	ld	r24, Y+
    1066:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
    106a:	89 91       	ld	r24, Y+
    106c:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
    1070:	89 91       	ld	r24, Y+
    1072:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
    1076:	89 91       	ld	r24, Y+
    1078:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
    107c:	89 91       	ld	r24, Y+
    107e:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
    1082:	89 91       	ld	r24, Y+
    1084:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
    1088:	89 91       	ld	r24, Y+
    108a:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
    108e:	89 91       	ld	r24, Y+
    1090:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
    1094:	89 91       	ld	r24, Y+
    1096:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
    109a:	89 91       	ld	r24, Y+
    109c:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
    10a0:	89 91       	ld	r24, Y+
    10a2:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
    10a6:	89 91       	ld	r24, Y+
    10a8:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
    10ac:	89 91       	ld	r24, Y+
    10ae:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
    10b2:	89 91       	ld	r24, Y+
    10b4:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
    10b8:	89 91       	ld	r24, Y+
    10ba:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
    10be:	89 91       	ld	r24, Y+
    10c0:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
    10c4:	89 91       	ld	r24, Y+
    10c6:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
    10ca:	89 91       	ld	r24, Y+
    10cc:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
    10d0:	89 91       	ld	r24, Y+
    10d2:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
    10d6:	89 91       	ld	r24, Y+
    10d8:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
    10dc:	89 91       	ld	r24, Y+
    10de:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
    10e2:	89 91       	ld	r24, Y+
    10e4:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
    10e8:	89 91       	ld	r24, Y+
    10ea:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
    10ee:	89 91       	ld	r24, Y+
    10f0:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
    10f4:	89 91       	ld	r24, Y+
    10f6:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
    10fa:	89 91       	ld	r24, Y+
    10fc:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
    1100:	89 91       	ld	r24, Y+
    1102:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
    1106:	89 91       	ld	r24, Y+
    1108:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
    110c:	89 91       	ld	r24, Y+
    110e:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
    1112:	89 91       	ld	r24, Y+
    1114:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
    1118:	89 91       	ld	r24, Y+
    111a:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
    111e:	89 91       	ld	r24, Y+
    1120:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
    1124:	89 91       	ld	r24, Y+
    1126:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
    112a:	89 91       	ld	r24, Y+
    112c:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
    1130:	89 91       	ld	r24, Y+
    1132:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
    1136:	89 91       	ld	r24, Y+
    1138:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
    113c:	89 91       	ld	r24, Y+
    113e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
    1142:	89 91       	ld	r24, Y+
    1144:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
    1148:	89 91       	ld	r24, Y+
    114a:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
    114e:	89 91       	ld	r24, Y+
    1150:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
    1154:	89 91       	ld	r24, Y+
    1156:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
    115a:	89 91       	ld	r24, Y+
    115c:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
    1160:	89 91       	ld	r24, Y+
    1162:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
    1166:	89 91       	ld	r24, Y+
    1168:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
    116c:	89 91       	ld	r24, Y+
    116e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
    1172:	89 91       	ld	r24, Y+
    1174:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
    1178:	89 91       	ld	r24, Y+
    117a:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
    117e:	89 91       	ld	r24, Y+
    1180:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
    1184:	89 91       	ld	r24, Y+
    1186:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
    118a:	89 91       	ld	r24, Y+
    118c:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
    1190:	89 91       	ld	r24, Y+
    1192:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
    1196:	89 91       	ld	r24, Y+
    1198:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
    119c:	89 91       	ld	r24, Y+
    119e:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    11a2:	80 91 e8 00 	lds	r24, 0x00E8
    11a6:	85 fd       	sbrc	r24, 5
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <usb_serial_write+0x228>
    11aa:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
    11ae:	62 1b       	sub	r22, r18
    11b0:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    11b2:	40 93 10 01 	sts	0x0110, r20
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
    11b8:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
    11ba:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
    11bc:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    11be:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
    11c0:	61 15       	cp	r22, r1
    11c2:	71 05       	cpc	r23, r1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <usb_serial_write+0x242>
    11c6:	fa ce       	rjmp	.-524    	; 0xfbc <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
    11c8:	3f bf       	out	0x3f, r19	; 63
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <usb_serial_write+0x24a>
	return 0;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
    11d6:	80 91 0f 01 	lds	r24, 0x010F
    11da:	08 95       	ret

000011dc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
    11ea:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    11ee:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    11f2:	98 2f       	mov	r25, r24
    11f4:	83 ff       	sbrs	r24, 3
    11f6:	11 c0       	rjmp	.+34     	; 0x121a <__vector_10+0x3e>
		UENUM = 0;
    11f8:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    1202:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1206:	82 e1       	ldi	r24, 0x12	; 18
    1208:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    120c:	88 e0       	ldi	r24, 0x08	; 8
    120e:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    1212:	10 92 0e 01 	sts	0x010E, r1
		cdc_line_rtsdtr = 0;
    1216:	10 92 0f 01 	sts	0x010F, r1
        }
	if (intbits & (1<<SOFI)) {
    121a:	92 ff       	sbrs	r25, 2
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <__vector_10+0x68>
		if (usb_configuration) {
    121e:	80 91 0e 01 	lds	r24, 0x010E
    1222:	88 23       	and	r24, r24
    1224:	79 f0       	breq	.+30     	; 0x1244 <__vector_10+0x68>
			t = transmit_flush_timer;
    1226:	80 91 10 01 	lds	r24, 0x0110
			if (t) {
    122a:	88 23       	and	r24, r24
    122c:	59 f0       	breq	.+22     	; 0x1244 <__vector_10+0x68>
				transmit_flush_timer = --t;
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	80 93 10 01 	sts	0x0110, r24
				if (!t) {
    1234:	88 23       	and	r24, r24
    1236:	31 f4       	brne	.+12     	; 0x1244 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
    1238:	84 e0       	ldi	r24, 0x04	; 4
    123a:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    123e:	8a e3       	ldi	r24, 0x3A	; 58
    1240:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1244:	9f 91       	pop	r25
    1246:	8f 91       	pop	r24
    1248:	0f 90       	pop	r0
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	0f 90       	pop	r0
    124e:	1f 90       	pop	r1
    1250:	18 95       	reti

00001252 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1252:	1f 92       	push	r1
    1254:	0f 92       	push	r0
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	0f 92       	push	r0
    125a:	11 24       	eor	r1, r1
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	2f 93       	push	r18
    1262:	3f 93       	push	r19
    1264:	4f 93       	push	r20
    1266:	5f 93       	push	r21
    1268:	6f 93       	push	r22
    126a:	7f 93       	push	r23
    126c:	8f 93       	push	r24
    126e:	9f 93       	push	r25
    1270:	af 93       	push	r26
    1272:	bf 93       	push	r27
    1274:	ef 93       	push	r30
    1276:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    1278:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    127c:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1280:	83 ff       	sbrs	r24, 3
    1282:	3c c1       	rjmp	.+632    	; 0x14fc <__vector_11+0x2aa>
                bmRequestType = UEDATX;
    1284:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    1288:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    128c:	80 91 f1 00 	lds	r24, 0x00F1
    1290:	68 2f       	mov	r22, r24
    1292:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    1294:	20 91 f1 00 	lds	r18, 0x00F1
    1298:	92 2f       	mov	r25, r18
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	68 2b       	or	r22, r24
    129e:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    12a0:	80 91 f1 00 	lds	r24, 0x00F1
    12a4:	a8 2f       	mov	r26, r24
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    12a8:	20 91 f1 00 	lds	r18, 0x00F1
    12ac:	92 2f       	mov	r25, r18
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	a8 2b       	or	r26, r24
    12b2:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    12b4:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    12b8:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    12bc:	82 ef       	ldi	r24, 0xF2	; 242
    12be:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    12c2:	36 30       	cpi	r19, 0x06	; 6
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <__vector_11+0x76>
    12c6:	5a c0       	rjmp	.+180    	; 0x137c <__vector_11+0x12a>
    12c8:	2e e1       	ldi	r18, 0x1E	; 30
    12ca:	32 e0       	ldi	r19, 0x02	; 2
    12cc:	a9 01       	movw	r20, r18
    12ce:	45 50       	subi	r20, 0x05	; 5
    12d0:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    12d2:	f9 01       	movw	r30, r18
    12d4:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    12d6:	85 91       	lpm	r24, Z+
    12d8:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    12da:	86 17       	cp	r24, r22
    12dc:	97 07       	cpc	r25, r23
    12de:	01 f5       	brne	.+64     	; 0x1320 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    12e0:	fa 01       	movw	r30, r20
    12e2:	85 91       	lpm	r24, Z+
    12e4:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    12e6:	8a 17       	cp	r24, r26
    12e8:	9b 07       	cpc	r25, r27
    12ea:	d1 f4       	brne	.+52     	; 0x1320 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    12ec:	9a 01       	movw	r18, r20
    12ee:	2e 5f       	subi	r18, 0xFE	; 254
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    12f2:	f9 01       	movw	r30, r18
    12f4:	65 91       	lpm	r22, Z+
    12f6:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    12f8:	2e 5f       	subi	r18, 0xFE	; 254
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	f9 01       	movw	r30, r18
    12fe:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    1300:	21 2f       	mov	r18, r17
    1302:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1304:	90 2f       	mov	r25, r16
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	28 2b       	or	r18, r24
    130a:	39 2b       	or	r19, r25
    130c:	2f 3f       	cpi	r18, 0xFF	; 255
    130e:	31 05       	cpc	r19, r1
    1310:	19 f0       	breq	.+6      	; 0x1318 <__vector_11+0xc6>
    1312:	10 f0       	brcs	.+4      	; 0x1318 <__vector_11+0xc6>
    1314:	2f ef       	ldi	r18, 0xFF	; 255
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	24 17       	cp	r18, r20
    131a:	58 f4       	brcc	.+22     	; 0x1332 <__vector_11+0xe0>
    131c:	42 2f       	mov	r20, r18
    131e:	09 c0       	rjmp	.+18     	; 0x1332 <__vector_11+0xe0>
    1320:	29 5f       	subi	r18, 0xF9	; 249
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	49 5f       	subi	r20, 0xF9	; 249
    1326:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1328:	f2 e0       	ldi	r31, 0x02	; 2
    132a:	28 34       	cpi	r18, 0x48	; 72
    132c:	3f 07       	cpc	r19, r31
    132e:	89 f6       	brne	.-94     	; 0x12d2 <__vector_11+0x80>
    1330:	e5 c0       	rjmp	.+458    	; 0x14fc <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1332:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1334:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	c9 01       	movw	r24, r18
    133e:	85 70       	andi	r24, 0x05	; 5
    1340:	90 70       	andi	r25, 0x00	; 0
    1342:	89 2b       	or	r24, r25
    1344:	b9 f3       	breq	.-18     	; 0x1334 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    1346:	22 fd       	sbrc	r18, 2
    1348:	dc c0       	rjmp	.+440    	; 0x1502 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    134a:	34 2f       	mov	r19, r20
    134c:	41 31       	cpi	r20, 0x11	; 17
    134e:	08 f0       	brcs	.+2      	; 0x1352 <__vector_11+0x100>
    1350:	30 e1       	ldi	r19, 0x10	; 16
    1352:	23 2f       	mov	r18, r19
    1354:	cb 01       	movw	r24, r22
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <__vector_11+0x112>
				for (i = n; i; i--) {
    1358:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    135a:	01 96       	adiw	r24, 0x01	; 1
    135c:	e4 91       	lpm	r30, Z+
    135e:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1362:	21 50       	subi	r18, 0x01	; 1
    1364:	22 23       	and	r18, r18
    1366:	c1 f7       	brne	.-16     	; 0x1358 <__vector_11+0x106>
    1368:	63 0f       	add	r22, r19
    136a:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    136c:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    136e:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1372:	44 23       	and	r20, r20
    1374:	f9 f6       	brne	.-66     	; 0x1334 <__vector_11+0xe2>
    1376:	30 31       	cpi	r19, 0x10	; 16
    1378:	e9 f2       	breq	.-70     	; 0x1334 <__vector_11+0xe2>
    137a:	c3 c0       	rjmp	.+390    	; 0x1502 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    137c:	35 30       	cpi	r19, 0x05	; 5
    137e:	61 f4       	brne	.+24     	; 0x1398 <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1380:	8e ef       	ldi	r24, 0xFE	; 254
    1382:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1386:	80 91 e8 00 	lds	r24, 0x00E8
    138a:	80 ff       	sbrs	r24, 0
    138c:	fc cf       	rjmp	.-8      	; 0x1386 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    138e:	86 2f       	mov	r24, r22
    1390:	80 68       	ori	r24, 0x80	; 128
    1392:	80 93 e3 00 	sts	0x00E3, r24
    1396:	b5 c0       	rjmp	.+362    	; 0x1502 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    1398:	39 30       	cpi	r19, 0x09	; 9
    139a:	51 f5       	brne	.+84     	; 0x13f0 <__vector_11+0x19e>
    139c:	44 23       	and	r20, r20
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__vector_11+0x150>
    13a0:	ad c0       	rjmp	.+346    	; 0x14fc <__vector_11+0x2aa>
			usb_configuration = wValue;
    13a2:	60 93 0e 01 	sts	0x010E, r22
			cdc_line_rtsdtr = 0;
    13a6:	10 92 0f 01 	sts	0x010F, r1
			transmit_flush_timer = 0;
    13aa:	10 92 10 01 	sts	0x0110, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    13ae:	8e ef       	ldi	r24, 0xFE	; 254
    13b0:	80 93 e8 00 	sts	0x00E8, r24
    13b4:	81 e4       	ldi	r24, 0x41	; 65
    13b6:	92 e0       	ldi	r25, 0x02	; 2
    13b8:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    13ba:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    13be:	fc 01       	movw	r30, r24
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	e4 91       	lpm	r30, Z+
				UECONX = en;
    13c4:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    13c8:	ee 23       	and	r30, r30
    13ca:	69 f0       	breq	.+26     	; 0x13e6 <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
    13cc:	ac 01       	movw	r20, r24
    13ce:	4f 5f       	subi	r20, 0xFF	; 255
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	fc 01       	movw	r30, r24
    13d4:	84 91       	lpm	r24, Z+
    13d6:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    13da:	ca 01       	movw	r24, r20
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	fa 01       	movw	r30, r20
    13e0:	34 91       	lpm	r19, Z+
    13e2:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    13e6:	2f 5f       	subi	r18, 0xFF	; 255
    13e8:	25 30       	cpi	r18, 0x05	; 5
    13ea:	39 f7       	brne	.-50     	; 0x13ba <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    13ec:	8e e1       	ldi	r24, 0x1E	; 30
    13ee:	81 c0       	rjmp	.+258    	; 0x14f2 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    13f0:	38 30       	cpi	r19, 0x08	; 8
    13f2:	61 f4       	brne	.+24     	; 0x140c <__vector_11+0x1ba>
    13f4:	40 38       	cpi	r20, 0x80	; 128
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__vector_11+0x1a8>
    13f8:	81 c0       	rjmp	.+258    	; 0x14fc <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    13fa:	80 91 e8 00 	lds	r24, 0x00E8
    13fe:	80 ff       	sbrs	r24, 0
    1400:	fc cf       	rjmp	.-8      	; 0x13fa <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1402:	80 91 0e 01 	lds	r24, 0x010E
    1406:	80 93 f1 00 	sts	0x00F1, r24
    140a:	50 c0       	rjmp	.+160    	; 0x14ac <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    140c:	31 32       	cpi	r19, 0x21	; 33
    140e:	89 f4       	brne	.+34     	; 0x1432 <__vector_11+0x1e0>
    1410:	41 3a       	cpi	r20, 0xA1	; 161
    1412:	09 f0       	breq	.+2      	; 0x1416 <__vector_11+0x1c4>
    1414:	73 c0       	rjmp	.+230    	; 0x14fc <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1416:	80 91 e8 00 	lds	r24, 0x00E8
    141a:	80 ff       	sbrs	r24, 0
    141c:	fc cf       	rjmp	.-8      	; 0x1416 <__vector_11+0x1c4>
    141e:	e0 e0       	ldi	r30, 0x00	; 0
    1420:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1422:	81 91       	ld	r24, Z+
    1424:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	e7 30       	cpi	r30, 0x07	; 7
    142c:	f8 07       	cpc	r31, r24
    142e:	c9 f7       	brne	.-14     	; 0x1422 <__vector_11+0x1d0>
    1430:	3d c0       	rjmp	.+122    	; 0x14ac <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1432:	30 32       	cpi	r19, 0x20	; 32
    1434:	a1 f4       	brne	.+40     	; 0x145e <__vector_11+0x20c>
    1436:	41 32       	cpi	r20, 0x21	; 33
    1438:	09 f0       	breq	.+2      	; 0x143c <__vector_11+0x1ea>
    143a:	60 c0       	rjmp	.+192    	; 0x14fc <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    143c:	80 91 e8 00 	lds	r24, 0x00E8
    1440:	82 ff       	sbrs	r24, 2
    1442:	fc cf       	rjmp	.-8      	; 0x143c <__vector_11+0x1ea>
    1444:	e0 e0       	ldi	r30, 0x00	; 0
    1446:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1448:	80 91 f1 00 	lds	r24, 0x00F1
    144c:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	e7 30       	cpi	r30, 0x07	; 7
    1452:	f8 07       	cpc	r31, r24
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1456:	8b ef       	ldi	r24, 0xFB	; 251
    1458:	80 93 e8 00 	sts	0x00E8, r24
    145c:	27 c0       	rjmp	.+78     	; 0x14ac <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    145e:	32 32       	cpi	r19, 0x22	; 34
    1460:	51 f4       	brne	.+20     	; 0x1476 <__vector_11+0x224>
    1462:	41 32       	cpi	r20, 0x21	; 33
    1464:	09 f0       	breq	.+2      	; 0x1468 <__vector_11+0x216>
    1466:	4a c0       	rjmp	.+148    	; 0x14fc <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    1468:	60 93 0f 01 	sts	0x010F, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    146c:	80 91 e8 00 	lds	r24, 0x00E8
    1470:	80 ff       	sbrs	r24, 0
    1472:	fc cf       	rjmp	.-8      	; 0x146c <__vector_11+0x21a>
    1474:	1b c0       	rjmp	.+54     	; 0x14ac <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1476:	33 23       	and	r19, r19
    1478:	e9 f4       	brne	.+58     	; 0x14b4 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    147a:	80 91 e8 00 	lds	r24, 0x00E8
    147e:	80 ff       	sbrs	r24, 0
    1480:	fc cf       	rjmp	.-8      	; 0x147a <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1482:	42 38       	cpi	r20, 0x82	; 130
    1484:	11 f0       	breq	.+4      	; 0x148a <__vector_11+0x238>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <__vector_11+0x252>
				UENUM = wIndex;
    148a:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    148e:	80 91 eb 00 	lds	r24, 0x00EB
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	25 e0       	ldi	r18, 0x05	; 5
    1496:	96 95       	lsr	r25
    1498:	87 95       	ror	r24
    149a:	2a 95       	dec	r18
    149c:	e1 f7       	brne	.-8      	; 0x1496 <__vector_11+0x244>
    149e:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    14a0:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    14a4:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    14a8:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    14ac:	8e ef       	ldi	r24, 0xFE	; 254
    14ae:	80 93 e8 00 	sts	0x00E8, r24
    14b2:	27 c0       	rjmp	.+78     	; 0x1502 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    14b4:	31 30       	cpi	r19, 0x01	; 1
    14b6:	11 f0       	breq	.+4      	; 0x14bc <__vector_11+0x26a>
    14b8:	33 30       	cpi	r19, 0x03	; 3
    14ba:	01 f5       	brne	.+64     	; 0x14fc <__vector_11+0x2aa>
    14bc:	42 30       	cpi	r20, 0x02	; 2
    14be:	f1 f4       	brne	.+60     	; 0x14fc <__vector_11+0x2aa>
    14c0:	67 2b       	or	r22, r23
    14c2:	e1 f4       	brne	.+56     	; 0x14fc <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    14c4:	2a 2f       	mov	r18, r26
    14c6:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    14c8:	82 2f       	mov	r24, r18
    14ca:	81 50       	subi	r24, 0x01	; 1
    14cc:	84 30       	cpi	r24, 0x04	; 4
    14ce:	b0 f4       	brcc	.+44     	; 0x14fc <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    14d0:	8e ef       	ldi	r24, 0xFE	; 254
    14d2:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    14d6:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    14da:	33 30       	cpi	r19, 0x03	; 3
    14dc:	79 f0       	breq	.+30     	; 0x14fc <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    14de:	89 e1       	ldi	r24, 0x19	; 25
    14e0:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <__vector_11+0x29c>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <__vector_11+0x298>
    14f2:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    14f6:	10 92 ea 00 	sts	0x00EA, r1
    14fa:	03 c0       	rjmp	.+6      	; 0x1502 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    14fc:	81 e2       	ldi	r24, 0x21	; 33
    14fe:	80 93 eb 00 	sts	0x00EB, r24
}
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <_exit>:
    1528:	f8 94       	cli

0000152a <__stop_program>:
    152a:	ff cf       	rjmp	.-2      	; 0x152a <__stop_program>
