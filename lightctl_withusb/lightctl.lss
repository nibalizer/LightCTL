
lightctl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00001322  000013b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  000013be  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000158  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000031c  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000128f  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004da  00000000  00000000  000031cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018a9  00000000  00000000  000036a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  00004f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000558  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001288  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000158  00000000  00000000  00006980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR3AH = 0x00;
	OCR3AL = 0x00; // Register used by 8bit pwm
	OCR3BH = 0x00;
	OCR3BL = 0x00; // Register used by 8bit pwm
	OCR3CH = 0x00;
	OCR3CL = 0x00; // Register used by 8bit pwm
       0:	6f c1       	rjmp	.+734    	; 0x2e0 <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
       2:	00 00       	nop
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
	sei();
}

uint8_t adc_available(void)
{
       4:	89 c1       	rjmp	.+786    	; 0x318 <__bad_interrupt>
       6:	00 00       	nop
       8:	87 c1       	rjmp	.+782    	; 0x318 <__bad_interrupt>
       a:	00 00       	nop
       c:	85 c1       	rjmp	.+778    	; 0x318 <__bad_interrupt>
       e:	00 00       	nop
      10:	83 c1       	rjmp	.+774    	; 0x318 <__bad_interrupt>
      12:	00 00       	nop
      14:	81 c1       	rjmp	.+770    	; 0x318 <__bad_interrupt>
      16:	00 00       	nop
      18:	7f c1       	rjmp	.+766    	; 0x318 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7d c1       	rjmp	.+762    	; 0x318 <__bad_interrupt>
      1e:	00 00       	nop
      20:	7b c1       	rjmp	.+758    	; 0x318 <__bad_interrupt>
      22:	00 00       	nop
      24:	79 c1       	rjmp	.+754    	; 0x318 <__bad_interrupt>
      26:	00 00       	nop
      28:	7a c7       	rjmp	.+3828   	; 0xf1e <__vector_10>
      2a:	00 00       	nop
      2c:	b3 c7       	rjmp	.+3942   	; 0xf94 <__vector_11>
      2e:	00 00       	nop
      30:	73 c1       	rjmp	.+742    	; 0x318 <__bad_interrupt>
      32:	00 00       	nop
      34:	71 c1       	rjmp	.+738    	; 0x318 <__bad_interrupt>
      36:	00 00       	nop
      38:	6f c1       	rjmp	.+734    	; 0x318 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6d c1       	rjmp	.+730    	; 0x318 <__bad_interrupt>
      3e:	00 00       	nop
      40:	6b c1       	rjmp	.+726    	; 0x318 <__bad_interrupt>
      42:	00 00       	nop
      44:	69 c1       	rjmp	.+722    	; 0x318 <__bad_interrupt>
      46:	00 00       	nop
      48:	67 c1       	rjmp	.+718    	; 0x318 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	65 c1       	rjmp	.+714    	; 0x318 <__bad_interrupt>
      4e:	00 00       	nop
      50:	63 c1       	rjmp	.+710    	; 0x318 <__bad_interrupt>
      52:	00 00       	nop
      54:	61 c1       	rjmp	.+706    	; 0x318 <__bad_interrupt>
      56:	00 00       	nop
      58:	5f c1       	rjmp	.+702    	; 0x318 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5d c1       	rjmp	.+698    	; 0x318 <__bad_interrupt>
      5e:	00 00       	nop
      60:	5b c1       	rjmp	.+694    	; 0x318 <__bad_interrupt>
      62:	00 00       	nop
      64:	59 c1       	rjmp	.+690    	; 0x318 <__bad_interrupt>
      66:	00 00       	nop
      68:	57 c1       	rjmp	.+686    	; 0x318 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	55 c1       	rjmp	.+682    	; 0x318 <__bad_interrupt>
      6e:	00 00       	nop
      70:	53 c1       	rjmp	.+678    	; 0x318 <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__vector_29>
      78:	4f c1       	rjmp	.+670    	; 0x318 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4d c1       	rjmp	.+666    	; 0x318 <__bad_interrupt>
      7e:	00 00       	nop
      80:	4b c1       	rjmp	.+662    	; 0x318 <__bad_interrupt>
      82:	00 00       	nop
      84:	49 c1       	rjmp	.+658    	; 0x318 <__bad_interrupt>
      86:	00 00       	nop
      88:	47 c1       	rjmp	.+654    	; 0x318 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 c1       	rjmp	.+650    	; 0x318 <__bad_interrupt>
      8e:	00 00       	nop
      90:	43 c1       	rjmp	.+646    	; 0x318 <__bad_interrupt>
      92:	00 00       	nop
      94:	41 c1       	rjmp	.+642    	; 0x318 <__bad_interrupt>
      96:	00 00       	nop
      98:	3f c1       	rjmp	.+638    	; 0x318 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3d c1       	rjmp	.+634    	; 0x318 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3b c1       	rjmp	.+630    	; 0x318 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	39 c1       	rjmp	.+626    	; 0x318 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	37 c1       	rjmp	.+622    	; 0x318 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	72 07       	cpc	r23, r18
      ae:	6f 07       	cpc	r22, r31
      b0:	6c 07       	cpc	r22, r28
      b2:	69 07       	cpc	r22, r25
      b4:	66 07       	cpc	r22, r22
      b6:	63 07       	cpc	r22, r19
      b8:	60 07       	cpc	r22, r16
      ba:	5d 07       	cpc	r21, r29
      bc:	5a 07       	cpc	r21, r26
      be:	57 07       	cpc	r21, r23
      c0:	54 07       	cpc	r21, r20
      c2:	51 07       	cpc	r21, r17
      c4:	4e 07       	cpc	r20, r30
      c6:	4b 07       	cpc	r20, r27
      c8:	48 07       	cpc	r20, r24
      ca:	45 07       	cpc	r20, r21
      cc:	42 07       	cpc	r20, r18
      ce:	3f 07       	cpc	r19, r31
      d0:	3c 07       	cpc	r19, r28
      d2:	39 07       	cpc	r19, r25
      d4:	36 07       	cpc	r19, r22
      d6:	33 07       	cpc	r19, r19
      d8:	30 07       	cpc	r19, r16
      da:	2d 07       	cpc	r18, r29
      dc:	2a 07       	cpc	r18, r26
      de:	27 07       	cpc	r18, r23
      e0:	24 07       	cpc	r18, r20
      e2:	21 07       	cpc	r18, r17
      e4:	1e 07       	cpc	r17, r30
      e6:	1b 07       	cpc	r17, r27
      e8:	18 07       	cpc	r17, r24
      ea:	15 07       	cpc	r17, r21
      ec:	12 07       	cpc	r17, r18
      ee:	0f 07       	cpc	r16, r31
      f0:	0c 07       	cpc	r16, r28
      f2:	09 07       	cpc	r16, r25
      f4:	06 07       	cpc	r16, r22
      f6:	03 07       	cpc	r16, r19
      f8:	00 07       	cpc	r16, r16
      fa:	fd 06       	cpc	r15, r29
      fc:	fa 06       	cpc	r15, r26
      fe:	f7 06       	cpc	r15, r23
     100:	f4 06       	cpc	r15, r20
     102:	f1 06       	cpc	r15, r17
     104:	ee 06       	cpc	r14, r30
     106:	eb 06       	cpc	r14, r27
     108:	e8 06       	cpc	r14, r24
     10a:	e5 06       	cpc	r14, r21
     10c:	e2 06       	cpc	r14, r18
     10e:	df 06       	cpc	r13, r31
     110:	dc 06       	cpc	r13, r28
     112:	d9 06       	cpc	r13, r25
     114:	d6 06       	cpc	r13, r22
     116:	d3 06       	cpc	r13, r19
     118:	d0 06       	cpc	r13, r16
     11a:	cd 06       	cpc	r12, r29
     11c:	ca 06       	cpc	r12, r26
     11e:	c7 06       	cpc	r12, r23
     120:	c4 06       	cpc	r12, r20
     122:	c1 06       	cpc	r12, r17
     124:	be 06       	cpc	r11, r30
     126:	bb 06       	cpc	r11, r27
     128:	b8 06       	cpc	r11, r24
     12a:	b5 06       	cpc	r11, r21
     12c:	b2 06       	cpc	r11, r18

0000012e <__c.1841>:
     12e:	22 2c 20 6d 75 73 74 20 62 65 20 3f 20 6f 72 20     ", must be ? or 
     13e:	3d 0d 0a 00                                         =...

00000142 <__c.1839>:
     142:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
     152:	22 00                                               ".

00000154 <__c.1837>:
     154:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
     164:	31 0d 0a 00                                         1...

00000168 <__c.1835>:
     168:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

00000178 <__c.1833>:
     178:	0d 0a 00                                            ...

0000017b <__c.1831>:
     17b:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
     18b:	37 0d 0a 00                                         7...

0000018f <__c.1829>:
     18f:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

0000019d <__c.1827>:
     19d:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
     1ad:	0d 0a 00                                            ...

000001b0 <__c.1825>:
     1b0:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

000001bf <__c.1823>:
     1bf:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
     1cf:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
     1df:	20 72 65 71 27 64 0d 0a 00                           req'd...

000001e8 <__c.1758>:
     1e8:	49 4e 56 41 4c 49 44 5f 43 4f 4d 4d 41 4e 44 5f     INVALID_COMMAND_
     1f8:	43 4f 44 45 00                                      CODE.

000001fd <__c.1745>:
     1fd:	01 02 03 04 05 06 07 08 0a 00                       ..........

00000207 <__c.1728>:
     207:	4c 61 6d 70 20 43 6f 6e 74 72 6f 6c 65 72 0a 00     Lamp Controler..

00000217 <descriptor_list>:
     217:	00 01 00 00 4b 02 12 00 02 00 00 5d 02 43 00 03     ....K......].C..
     227:	00 00 a0 02 04 01 03 09 04 a4 02 14 02 03 09 04     ................
     237:	ba 02 16 03 03 09 04 d2 02 0c                       ..........

00000241 <endpoint_config_table>:
     241:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000024b <device_descriptor>:
     24b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     25b:	03 01                                               ..

0000025d <config1_descriptor>:
     25d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     26d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     27d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     28d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     29d:	40 00 00                                            @..

000002a0 <string0>:
     2a0:	04 03 09 04                                         ....

000002a4 <string1>:
     2a4:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     2b4:	6d 00 65 00 00 00                                   m.e...

000002ba <string2>:
     2ba:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     2ca:	69 00 61 00 6c 00 00 00                             i.a.l...

000002d2 <string3>:
     2d2:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000002e0 <__ctors_end>:
     2e0:	11 24       	eor	r1, r1
     2e2:	1f be       	out	0x3f, r1	; 63
     2e4:	cf ef       	ldi	r28, 0xFF	; 255
     2e6:	da e0       	ldi	r29, 0x0A	; 10
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	cd bf       	out	0x3d, r28	; 61

000002ec <__do_copy_data>:
     2ec:	11 e0       	ldi	r17, 0x01	; 1
     2ee:	a0 e0       	ldi	r26, 0x00	; 0
     2f0:	b1 e0       	ldi	r27, 0x01	; 1
     2f2:	e2 e2       	ldi	r30, 0x22	; 34
     2f4:	f3 e1       	ldi	r31, 0x13	; 19
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <.do_copy_data_start>

000002f8 <.do_copy_data_loop>:
     2f8:	05 90       	lpm	r0, Z+
     2fa:	0d 92       	st	X+, r0

000002fc <.do_copy_data_start>:
     2fc:	a8 30       	cpi	r26, 0x08	; 8
     2fe:	b1 07       	cpc	r27, r17
     300:	d9 f7       	brne	.-10     	; 0x2f8 <.do_copy_data_loop>

00000302 <__do_clear_bss>:
     302:	11 e0       	ldi	r17, 0x01	; 1
     304:	a8 e0       	ldi	r26, 0x08	; 8
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	01 c0       	rjmp	.+2      	; 0x30c <.do_clear_bss_start>

0000030a <.do_clear_bss_loop>:
     30a:	1d 92       	st	X+, r1

0000030c <.do_clear_bss_start>:
     30c:	a2 31       	cpi	r26, 0x12	; 18
     30e:	b1 07       	cpc	r27, r17
     310:	e1 f7       	brne	.-8      	; 0x30a <.do_clear_bss_loop>
     312:	19 d4       	rcall	.+2098   	; 0xb46 <main>
     314:	0c 94 8f 09 	jmp	0x131e	; 0x131e <_exit>

00000318 <__bad_interrupt>:
     318:	73 ce       	rjmp	.-794    	; 0x0 <__vectors>

0000031a <setup_pwms>:

void setup_pwms(void)
{
	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
     31a:	84 b1       	in	r24, 0x04	; 4
     31c:	80 6f       	ori	r24, 0xF0	; 240
     31e:	84 b9       	out	0x04, r24	; 4
//	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
	DDRD |= (1 << DDD0) | (1 << DDD1);
     320:	8a b1       	in	r24, 0x0a	; 10
     322:	83 60       	ori	r24, 0x03	; 3
     324:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
     326:	93 ea       	ldi	r25, 0xA3	; 163
     328:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
     32e:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
     332:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
     336:	91 ea       	ldi	r25, 0xA1	; 161
     338:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
     33c:	89 e0       	ldi	r24, 0x09	; 9
     33e:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
     342:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
     346:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
     34a:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
     34e:	10 92 92 00 	sts	0x0092, r1
}
     352:	08 95       	ret

00000354 <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	ec 01       	movw	r28, r24
     35a:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
     35c:	21 96       	adiw	r28, 0x01	; 1
     35e:	84 91       	lpm	r24, Z+
		if (!c) break;
     360:	88 23       	and	r24, r24
     362:	11 f0       	breq	.+4      	; 0x368 <send_str+0x14>
		usb_serial_putchar(c);
     364:	6f d4       	rcall	.+2270   	; 0xc44 <usb_serial_putchar>
     366:	f9 cf       	rjmp	.-14     	; 0x35a <send_str+0x6>
	}
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <handle_pwm_ports_command>:
	usb_serial_putchar('\n');
}

void handle_pwm_ports_command(void)
{
	usb_serial_putchar('\x03');
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	69 d4       	rcall	.+2258   	; 0xc44 <usb_serial_putchar>
	usb_serial_putchar('\x00');
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	67 d4       	rcall	.+2254   	; 0xc44 <usb_serial_putchar>
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
     376:	8d ef       	ldi	r24, 0xFD	; 253
     378:	91 e0       	ldi	r25, 0x01	; 1
}
     37a:	ec cf       	rjmp	.-40     	; 0x354 <send_str>

0000037c <handle_ping_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("Lamp Controler\n"));
}

void handle_ping_command(const char *str, uint8_t len)
{
     37c:	ff 92       	push	r15
     37e:	0f 93       	push	r16
     380:	1f 93       	push	r17
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	18 2f       	mov	r17, r24
     388:	09 2f       	mov	r16, r25
     38a:	f6 2e       	mov	r15, r22
	const char *data_itr;
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	5a d4       	rcall	.+2228   	; 0xc44 <usb_serial_putchar>
     390:	21 2f       	mov	r18, r17
     392:	30 2f       	mov	r19, r16
     394:	c9 01       	movw	r24, r18
     396:	ec 01       	movw	r28, r24
     398:	11 e0       	ldi	r17, 0x01	; 1
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <handle_ping_command+0x26>
	while(ndx < len)
	{
		usb_serial_putchar(data_itr[ndx]);
     39c:	88 81       	ld	r24, Y
     39e:	52 d4       	rcall	.+2212   	; 0xc44 <usb_serial_putchar>
		++ndx;
     3a0:	1f 5f       	subi	r17, 0xFF	; 255
     3a2:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
	while(ndx < len)
     3a4:	1f 15       	cp	r17, r15
     3a6:	d0 f3       	brcs	.-12     	; 0x39c <handle_ping_command+0x20>
	{
		usb_serial_putchar(data_itr[ndx]);
		++ndx;
	}
	usb_serial_putchar('\n');
     3a8:	8a e0       	ldi	r24, 0x0A	; 10
     3aa:	4c d4       	rcall	.+2200   	; 0xc44 <usb_serial_putchar>
}
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	ff 90       	pop	r15
     3b6:	08 95       	ret

000003b8 <handle_version_command>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}
void handle_version_command(void)
{
	usb_serial_putchar('\x00');
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	44 d4       	rcall	.+2184   	; 0xc44 <usb_serial_putchar>
	send_str(PSTR("Lamp Controler\n"));
     3bc:	87 e0       	ldi	r24, 0x07	; 7
     3be:	92 e0       	ldi	r25, 0x02	; 2
}
     3c0:	c9 cf       	rjmp	.-110    	; 0x354 <send_str>

000003c2 <handle_set_pwm_command>:
/**
 * @breif Handle a set pwm command
 */

void handle_set_pwm_command(uint8_t port, uint8_t val)
{
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	18 2f       	mov	r17, r24
     3c8:	06 2f       	mov	r16, r22
	usb_serial_putchar('\x04');
     3ca:	84 e0       	ldi	r24, 0x04	; 4
     3cc:	3b d4       	rcall	.+2166   	; 0xc44 <usb_serial_putchar>
	usb_serial_putchar(port);
     3ce:	81 2f       	mov	r24, r17
     3d0:	39 d4       	rcall	.+2162   	; 0xc44 <usb_serial_putchar>
	switch(port)
     3d2:	14 30       	cpi	r17, 0x04	; 4
     3d4:	31 f1       	breq	.+76     	; 0x422 <handle_set_pwm_command+0x60>
     3d6:	15 30       	cpi	r17, 0x05	; 5
     3d8:	48 f4       	brcc	.+18     	; 0x3ec <handle_set_pwm_command+0x2a>
     3da:	11 30       	cpi	r17, 0x01	; 1
     3dc:	91 f0       	breq	.+36     	; 0x402 <handle_set_pwm_command+0x40>
     3de:	11 30       	cpi	r17, 0x01	; 1
     3e0:	70 f0       	brcs	.+28     	; 0x3fe <handle_set_pwm_command+0x3c>
     3e2:	12 30       	cpi	r17, 0x02	; 2
     3e4:	81 f0       	breq	.+32     	; 0x406 <handle_set_pwm_command+0x44>
     3e6:	13 30       	cpi	r17, 0x03	; 3
     3e8:	b9 f5       	brne	.+110    	; 0x458 <handle_set_pwm_command+0x96>
     3ea:	14 c0       	rjmp	.+40     	; 0x414 <handle_set_pwm_command+0x52>
     3ec:	16 30       	cpi	r17, 0x06	; 6
     3ee:	f9 f0       	breq	.+62     	; 0x42e <handle_set_pwm_command+0x6c>
     3f0:	16 30       	cpi	r17, 0x06	; 6
     3f2:	d0 f0       	brcs	.+52     	; 0x428 <handle_set_pwm_command+0x66>
     3f4:	17 30       	cpi	r17, 0x07	; 7
     3f6:	11 f1       	breq	.+68     	; 0x43c <handle_set_pwm_command+0x7a>
     3f8:	18 30       	cpi	r17, 0x08	; 8
     3fa:	71 f5       	brne	.+92     	; 0x458 <handle_set_pwm_command+0x96>
     3fc:	26 c0       	rjmp	.+76     	; 0x44a <handle_set_pwm_command+0x88>
	{
		case 0:
			OCR0A = val;
     3fe:	07 bd       	out	0x27, r16	; 39
     400:	2d c0       	rjmp	.+90     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 1:
			OCR0B = val;
     402:	08 bd       	out	0x28, r16	; 40
     404:	2b c0       	rjmp	.+86     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 2:
			OCR1A = val;
     406:	80 2f       	mov	r24, r16
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	90 93 89 00 	sts	0x0089, r25
     40e:	80 93 88 00 	sts	0x0088, r24
     412:	24 c0       	rjmp	.+72     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 3:
			OCR1B = val;
     414:	80 2f       	mov	r24, r16
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	90 93 8b 00 	sts	0x008B, r25
     41c:	80 93 8a 00 	sts	0x008A, r24
     420:	1d c0       	rjmp	.+58     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 4:
			OCR2A = val;
     422:	00 93 b3 00 	sts	0x00B3, r16
     426:	1a c0       	rjmp	.+52     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 5:
			OCR2B = val;
     428:	00 93 b4 00 	sts	0x00B4, r16
     42c:	17 c0       	rjmp	.+46     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 6:
			OCR3A = val;
     42e:	80 2f       	mov	r24, r16
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 99 00 	sts	0x0099, r25
     436:	80 93 98 00 	sts	0x0098, r24
     43a:	10 c0       	rjmp	.+32     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 7:
			OCR3B = val;
     43c:	80 2f       	mov	r24, r16
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	90 93 9b 00 	sts	0x009B, r25
     444:	80 93 9a 00 	sts	0x009A, r24
     448:	09 c0       	rjmp	.+18     	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		case 8:
			OCR3C = val;
     44a:	80 2f       	mov	r24, r16
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	90 93 9d 00 	sts	0x009D, r25
     452:	80 93 9c 00 	sts	0x009C, r24
     456:	02 c0       	rjmp	.+4      	; 0x45c <handle_set_pwm_command+0x9a>
			break;
		default:
			usb_serial_putchar('\x01');
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	01 c0       	rjmp	.+2      	; 0x45e <handle_set_pwm_command+0x9c>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	f2 d3       	rcall	.+2020   	; 0xc44 <usb_serial_putchar>
	usb_serial_putchar('\n');
     460:	8a e0       	ldi	r24, 0x0A	; 10
     462:	f0 d3       	rcall	.+2016   	; 0xc44 <usb_serial_putchar>
}
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	08 95       	ret

0000046a <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	ec 01       	movw	r28, r24
     474:	06 2f       	mov	r16, r22
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	14 c0       	rjmp	.+40     	; 0x4a2 <recv_str+0x38>
	int16_t r;
	uint8_t count=0;

	while (count < size) {
		r = usb_serial_getchar();
     47a:	b2 d3       	rcall	.+1892   	; 0xbe0 <usb_serial_getchar>
		if (r != -1) {
     47c:	2f ef       	ldi	r18, 0xFF	; 255
     47e:	8f 3f       	cpi	r24, 0xFF	; 255
     480:	92 07       	cpc	r25, r18
     482:	49 f0       	breq	.+18     	; 0x496 <recv_str+0x2c>
			if (r == '\r' || r == '\n') return count;
     484:	8d 30       	cpi	r24, 0x0D	; 13
     486:	91 05       	cpc	r25, r1
     488:	81 f0       	breq	.+32     	; 0x4aa <recv_str+0x40>
     48a:	8a 30       	cpi	r24, 0x0A	; 10
     48c:	91 05       	cpc	r25, r1
     48e:	69 f0       	breq	.+26     	; 0x4aa <recv_str+0x40>
			*buf++ = r;
     490:	89 93       	st	Y+, r24
			//usb_serial_putchar(r);
			count++;
     492:	1f 5f       	subi	r17, 0xFF	; 255
     494:	06 c0       	rjmp	.+12     	; 0x4a2 <recv_str+0x38>
		} else {
			if (!usb_configured() ||
     496:	a1 d3       	rcall	.+1858   	; 0xbda <usb_configured>
     498:	88 23       	and	r24, r24
     49a:	31 f0       	breq	.+12     	; 0x4a8 <recv_str+0x3e>
     49c:	3d d5       	rcall	.+2682   	; 0xf18 <usb_serial_get_control>
     49e:	80 ff       	sbrs	r24, 0
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <recv_str+0x3e>
uint8_t recv_str(char *buf, uint8_t size)
{
	int16_t r;
	uint8_t count=0;

	while (count < size) {
     4a2:	10 17       	cp	r17, r16
     4a4:	50 f3       	brcs	.-44     	; 0x47a <recv_str+0x10>
     4a6:	01 c0       	rjmp	.+2      	; 0x4aa <recv_str+0x40>
     4a8:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
     4aa:	81 2f       	mov	r24, r17
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	08 95       	ret

000004b6 <handle_sensor_query>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}

void handle_sensor_query(uint8_t port)
{
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	df 93       	push	r29
     4c2:	cf 93       	push	r28
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <handle_sensor_query+0x10>
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <handle_sensor_query+0x12>
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	18 2f       	mov	r17, r24
	int i;
    uint16_t val;
    char buf[4];
    int readings = 10;
    usb_serial_putchar('\x07');
     4ce:	87 e0       	ldi	r24, 0x07	; 7
     4d0:	b9 d3       	rcall	.+1906   	; 0xc44 <usb_serial_putchar>
	usb_serial_putchar(port);
     4d2:	81 2f       	mov	r24, r17
     4d4:	b7 d3       	rcall	.+1902   	; 0xc44 <usb_serial_putchar>
	switch(port)
     4d6:	13 30       	cpi	r17, 0x03	; 3
     4d8:	09 f4       	brne	.+2      	; 0x4dc <handle_sensor_query+0x26>
     4da:	f1 c0       	rjmp	.+482    	; 0x6be <handle_sensor_query+0x208>
     4dc:	14 30       	cpi	r17, 0x04	; 4
     4de:	38 f4       	brcc	.+14     	; 0x4ee <handle_sensor_query+0x38>
     4e0:	11 30       	cpi	r17, 0x01	; 1
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <handle_sensor_query+0x30>
     4e4:	54 c0       	rjmp	.+168    	; 0x58e <handle_sensor_query+0xd8>
     4e6:	12 30       	cpi	r17, 0x02	; 2
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <handle_sensor_query+0x36>
     4ea:	9d c0       	rjmp	.+314    	; 0x626 <handle_sensor_query+0x170>
     4ec:	0d c0       	rjmp	.+26     	; 0x508 <handle_sensor_query+0x52>
     4ee:	15 30       	cpi	r17, 0x05	; 5
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <handle_sensor_query+0x3e>
     4f2:	7d c1       	rjmp	.+762    	; 0x7ee <handle_sensor_query+0x338>
     4f4:	15 30       	cpi	r17, 0x05	; 5
     4f6:	08 f4       	brcc	.+2      	; 0x4fa <handle_sensor_query+0x44>
     4f8:	2e c1       	rjmp	.+604    	; 0x756 <handle_sensor_query+0x2a0>
     4fa:	16 30       	cpi	r17, 0x06	; 6
     4fc:	09 f4       	brne	.+2      	; 0x500 <handle_sensor_query+0x4a>
     4fe:	c3 c1       	rjmp	.+902    	; 0x886 <handle_sensor_query+0x3d0>
     500:	17 30       	cpi	r17, 0x07	; 7
     502:	09 f0       	breq	.+2      	; 0x506 <handle_sensor_query+0x50>
     504:	58 c2       	rjmp	.+1200   	; 0x9b6 <handle_sensor_query+0x500>
     506:	0b c2       	rjmp	.+1046   	; 0x91e <handle_sensor_query+0x468>
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	60 e4       	ldi	r22, 0x40	; 64
     50c:	ae d6       	rcall	.+3420   	; 0x126a <adc_start>
     50e:	01 e0       	ldi	r16, 0x01	; 1
     510:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     512:	f0 e2       	ldi	r31, 0x20	; 32
     514:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     516:	7e 01       	movw	r14, r28
     518:	08 94       	sec
     51a:	e1 1c       	adc	r14, r1
     51c:	f1 1c       	adc	r15, r1
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
     51e:	ba d6       	rcall	.+3444   	; 0x1294 <adc_read>
     520:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     522:	89 2f       	mov	r24, r25
     524:	99 27       	eor	r25, r25
     526:	48 2f       	mov	r20, r24
     528:	4f 70       	andi	r20, 0x0F	; 15
     52a:	8f 70       	andi	r24, 0x0F	; 15
     52c:	90 70       	andi	r25, 0x00	; 0
     52e:	0a 97       	sbiw	r24, 0x0a	; 10
     530:	18 f4       	brcc	.+6      	; 0x538 <handle_sensor_query+0x82>
     532:	54 2f       	mov	r21, r20
     534:	50 5d       	subi	r21, 0xD0	; 208
     536:	02 c0       	rjmp	.+4      	; 0x53c <handle_sensor_query+0x86>
     538:	54 2f       	mov	r21, r20
     53a:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     53c:	c9 01       	movw	r24, r18
     53e:	74 e0       	ldi	r23, 0x04	; 4
     540:	96 95       	lsr	r25
     542:	87 95       	ror	r24
     544:	7a 95       	dec	r23
     546:	e1 f7       	brne	.-8      	; 0x540 <handle_sensor_query+0x8a>
     548:	48 2f       	mov	r20, r24
     54a:	4f 70       	andi	r20, 0x0F	; 15
     54c:	8f 70       	andi	r24, 0x0F	; 15
     54e:	90 70       	andi	r25, 0x00	; 0
     550:	0a 97       	sbiw	r24, 0x0a	; 10
     552:	18 f4       	brcc	.+6      	; 0x55a <handle_sensor_query+0xa4>
     554:	84 2f       	mov	r24, r20
     556:	80 5d       	subi	r24, 0xD0	; 208
     558:	02 c0       	rjmp	.+4      	; 0x55e <handle_sensor_query+0xa8>
     55a:	84 2f       	mov	r24, r20
     55c:	89 5c       	subi	r24, 0xC9	; 201
     55e:	92 2f       	mov	r25, r18
     560:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     562:	2f 70       	andi	r18, 0x0F	; 15
     564:	30 70       	andi	r19, 0x00	; 0
     566:	2a 30       	cpi	r18, 0x0A	; 10
     568:	31 05       	cpc	r19, r1
     56a:	10 f4       	brcc	.+4      	; 0x570 <handle_sensor_query+0xba>
     56c:	90 5d       	subi	r25, 0xD0	; 208
     56e:	01 c0       	rjmp	.+2      	; 0x572 <handle_sensor_query+0xbc>
     570:	99 5c       	subi	r25, 0xC9	; 201
     572:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     574:	dc 82       	std	Y+4, r13	; 0x04
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     576:	8a 83       	std	Y+2, r24	; 0x02
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     578:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     57a:	c7 01       	movw	r24, r14
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	a3 d3       	rcall	.+1862   	; 0xcc8 <usb_serial_write>
	switch(port)
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
     582:	0f 5f       	subi	r16, 0xFF	; 255
     584:	1f 4f       	sbci	r17, 0xFF	; 255
     586:	0a 30       	cpi	r16, 0x0A	; 10
     588:	11 05       	cpc	r17, r1
     58a:	49 f6       	brne	.-110    	; 0x51e <handle_sensor_query+0x68>
     58c:	16 c2       	rjmp	.+1068   	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	60 e4       	ldi	r22, 0x40	; 64
     592:	6b d6       	rcall	.+3286   	; 0x126a <adc_start>
     594:	88 e8       	ldi	r24, 0x88	; 136
     596:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     598:	20 e9       	ldi	r18, 0x90	; 144
     59a:	31 e0       	ldi	r19, 0x01	; 1
     59c:	f9 01       	movw	r30, r18
     59e:	31 97       	sbiw	r30, 0x01	; 1
     5a0:	f1 f7       	brne	.-4      	; 0x59e <handle_sensor_query+0xe8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a4:	d9 f7       	brne	.-10     	; 0x59c <handle_sensor_query+0xe6>
     5a6:	01 e0       	ldi	r16, 0x01	; 1
     5a8:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     5aa:	60 e2       	ldi	r22, 0x20	; 32
     5ac:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     5ae:	7e 01       	movw	r14, r28
     5b0:	08 94       	sec
     5b2:	e1 1c       	adc	r14, r1
     5b4:	f1 1c       	adc	r15, r1
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
     5b6:	6e d6       	rcall	.+3292   	; 0x1294 <adc_read>
     5b8:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     5ba:	89 2f       	mov	r24, r25
     5bc:	99 27       	eor	r25, r25
     5be:	48 2f       	mov	r20, r24
     5c0:	4f 70       	andi	r20, 0x0F	; 15
     5c2:	8f 70       	andi	r24, 0x0F	; 15
     5c4:	90 70       	andi	r25, 0x00	; 0
     5c6:	0a 97       	sbiw	r24, 0x0a	; 10
     5c8:	18 f4       	brcc	.+6      	; 0x5d0 <handle_sensor_query+0x11a>
     5ca:	54 2f       	mov	r21, r20
     5cc:	50 5d       	subi	r21, 0xD0	; 208
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <handle_sensor_query+0x11e>
     5d0:	54 2f       	mov	r21, r20
     5d2:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     5d4:	c9 01       	movw	r24, r18
     5d6:	44 e0       	ldi	r20, 0x04	; 4
     5d8:	96 95       	lsr	r25
     5da:	87 95       	ror	r24
     5dc:	4a 95       	dec	r20
     5de:	e1 f7       	brne	.-8      	; 0x5d8 <handle_sensor_query+0x122>
     5e0:	48 2f       	mov	r20, r24
     5e2:	4f 70       	andi	r20, 0x0F	; 15
     5e4:	8f 70       	andi	r24, 0x0F	; 15
     5e6:	90 70       	andi	r25, 0x00	; 0
     5e8:	0a 97       	sbiw	r24, 0x0a	; 10
     5ea:	18 f4       	brcc	.+6      	; 0x5f2 <handle_sensor_query+0x13c>
     5ec:	84 2f       	mov	r24, r20
     5ee:	80 5d       	subi	r24, 0xD0	; 208
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <handle_sensor_query+0x140>
     5f2:	84 2f       	mov	r24, r20
     5f4:	89 5c       	subi	r24, 0xC9	; 201
     5f6:	92 2f       	mov	r25, r18
     5f8:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     5fa:	2f 70       	andi	r18, 0x0F	; 15
     5fc:	30 70       	andi	r19, 0x00	; 0
     5fe:	2a 30       	cpi	r18, 0x0A	; 10
     600:	31 05       	cpc	r19, r1
     602:	10 f4       	brcc	.+4      	; 0x608 <handle_sensor_query+0x152>
     604:	90 5d       	subi	r25, 0xD0	; 208
     606:	01 c0       	rjmp	.+2      	; 0x60a <handle_sensor_query+0x154>
     608:	99 5c       	subi	r25, 0xC9	; 201
     60a:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     60c:	dc 82       	std	Y+4, r13	; 0x04
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     60e:	8a 83       	std	Y+2, r24	; 0x02
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     610:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     612:	c7 01       	movw	r24, r14
     614:	64 e0       	ldi	r22, 0x04	; 4
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	57 d3       	rcall	.+1710   	; 0xcc8 <usb_serial_write>
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
     61a:	0f 5f       	subi	r16, 0xFF	; 255
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	0a 30       	cpi	r16, 0x0A	; 10
     620:	11 05       	cpc	r17, r1
     622:	49 f6       	brne	.-110    	; 0x5b6 <handle_sensor_query+0x100>
     624:	ca c1       	rjmp	.+916    	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	60 e4       	ldi	r22, 0x40	; 64
     62a:	1f d6       	rcall	.+3134   	; 0x126a <adc_start>
     62c:	88 e8       	ldi	r24, 0x88	; 136
     62e:	93 e1       	ldi	r25, 0x13	; 19
     630:	20 e9       	ldi	r18, 0x90	; 144
     632:	31 e0       	ldi	r19, 0x01	; 1
     634:	f9 01       	movw	r30, r18
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <handle_sensor_query+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     63c:	d9 f7       	brne	.-10     	; 0x634 <handle_sensor_query+0x17e>
     63e:	01 e0       	ldi	r16, 0x01	; 1
     640:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     642:	80 e2       	ldi	r24, 0x20	; 32
     644:	d8 2e       	mov	r13, r24
	        	usb_serial_write((unsigned char *)buf, 4);
     646:	7e 01       	movw	r14, r28
     648:	08 94       	sec
     64a:	e1 1c       	adc	r14, r1
     64c:	f1 1c       	adc	r15, r1
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     64e:	22 d6       	rcall	.+3140   	; 0x1294 <adc_read>
     650:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     652:	89 2f       	mov	r24, r25
     654:	99 27       	eor	r25, r25
     656:	48 2f       	mov	r20, r24
     658:	4f 70       	andi	r20, 0x0F	; 15
     65a:	8f 70       	andi	r24, 0x0F	; 15
     65c:	90 70       	andi	r25, 0x00	; 0
     65e:	0a 97       	sbiw	r24, 0x0a	; 10
     660:	18 f4       	brcc	.+6      	; 0x668 <handle_sensor_query+0x1b2>
     662:	54 2f       	mov	r21, r20
     664:	50 5d       	subi	r21, 0xD0	; 208
     666:	02 c0       	rjmp	.+4      	; 0x66c <handle_sensor_query+0x1b6>
     668:	54 2f       	mov	r21, r20
     66a:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     66c:	c9 01       	movw	r24, r18
     66e:	a4 e0       	ldi	r26, 0x04	; 4
     670:	96 95       	lsr	r25
     672:	87 95       	ror	r24
     674:	aa 95       	dec	r26
     676:	e1 f7       	brne	.-8      	; 0x670 <handle_sensor_query+0x1ba>
     678:	48 2f       	mov	r20, r24
     67a:	4f 70       	andi	r20, 0x0F	; 15
     67c:	8f 70       	andi	r24, 0x0F	; 15
     67e:	90 70       	andi	r25, 0x00	; 0
     680:	0a 97       	sbiw	r24, 0x0a	; 10
     682:	18 f4       	brcc	.+6      	; 0x68a <handle_sensor_query+0x1d4>
     684:	84 2f       	mov	r24, r20
     686:	80 5d       	subi	r24, 0xD0	; 208
     688:	02 c0       	rjmp	.+4      	; 0x68e <handle_sensor_query+0x1d8>
     68a:	84 2f       	mov	r24, r20
     68c:	89 5c       	subi	r24, 0xC9	; 201
     68e:	92 2f       	mov	r25, r18
     690:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     692:	2f 70       	andi	r18, 0x0F	; 15
     694:	30 70       	andi	r19, 0x00	; 0
     696:	2a 30       	cpi	r18, 0x0A	; 10
     698:	31 05       	cpc	r19, r1
     69a:	10 f4       	brcc	.+4      	; 0x6a0 <handle_sensor_query+0x1ea>
     69c:	90 5d       	subi	r25, 0xD0	; 208
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <handle_sensor_query+0x1ec>
     6a0:	99 5c       	subi	r25, 0xC9	; 201
     6a2:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     6a4:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     6a6:	8a 83       	std	Y+2, r24	; 0x02
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     6a8:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     6aa:	c7 01       	movw	r24, r14
     6ac:	64 e0       	ldi	r22, 0x04	; 4
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	0b d3       	rcall	.+1558   	; 0xcc8 <usb_serial_write>
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     6b2:	0f 5f       	subi	r16, 0xFF	; 255
     6b4:	1f 4f       	sbci	r17, 0xFF	; 255
     6b6:	0a 30       	cpi	r16, 0x0A	; 10
     6b8:	11 05       	cpc	r17, r1
     6ba:	49 f6       	brne	.-110    	; 0x64e <handle_sensor_query+0x198>
     6bc:	7e c1       	rjmp	.+764    	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
     6be:	83 e0       	ldi	r24, 0x03	; 3
     6c0:	60 e4       	ldi	r22, 0x40	; 64
     6c2:	d3 d5       	rcall	.+2982   	; 0x126a <adc_start>
     6c4:	88 e8       	ldi	r24, 0x88	; 136
     6c6:	93 e1       	ldi	r25, 0x13	; 19
     6c8:	20 e9       	ldi	r18, 0x90	; 144
     6ca:	31 e0       	ldi	r19, 0x01	; 1
     6cc:	f9 01       	movw	r30, r18
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <handle_sensor_query+0x218>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d4:	d9 f7       	brne	.-10     	; 0x6cc <handle_sensor_query+0x216>
     6d6:	01 e0       	ldi	r16, 0x01	; 1
     6d8:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     6da:	f0 e2       	ldi	r31, 0x20	; 32
     6dc:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     6de:	7e 01       	movw	r14, r28
     6e0:	08 94       	sec
     6e2:	e1 1c       	adc	r14, r1
     6e4:	f1 1c       	adc	r15, r1
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     6e6:	d6 d5       	rcall	.+2988   	; 0x1294 <adc_read>
     6e8:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     6ea:	89 2f       	mov	r24, r25
     6ec:	99 27       	eor	r25, r25
     6ee:	48 2f       	mov	r20, r24
     6f0:	4f 70       	andi	r20, 0x0F	; 15
     6f2:	8f 70       	andi	r24, 0x0F	; 15
     6f4:	90 70       	andi	r25, 0x00	; 0
     6f6:	0a 97       	sbiw	r24, 0x0a	; 10
     6f8:	18 f4       	brcc	.+6      	; 0x700 <handle_sensor_query+0x24a>
     6fa:	54 2f       	mov	r21, r20
     6fc:	50 5d       	subi	r21, 0xD0	; 208
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <handle_sensor_query+0x24e>
     700:	54 2f       	mov	r21, r20
     702:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     704:	c9 01       	movw	r24, r18
     706:	74 e0       	ldi	r23, 0x04	; 4
     708:	96 95       	lsr	r25
     70a:	87 95       	ror	r24
     70c:	7a 95       	dec	r23
     70e:	e1 f7       	brne	.-8      	; 0x708 <handle_sensor_query+0x252>
     710:	48 2f       	mov	r20, r24
     712:	4f 70       	andi	r20, 0x0F	; 15
     714:	8f 70       	andi	r24, 0x0F	; 15
     716:	90 70       	andi	r25, 0x00	; 0
     718:	0a 97       	sbiw	r24, 0x0a	; 10
     71a:	18 f4       	brcc	.+6      	; 0x722 <handle_sensor_query+0x26c>
     71c:	84 2f       	mov	r24, r20
     71e:	80 5d       	subi	r24, 0xD0	; 208
     720:	02 c0       	rjmp	.+4      	; 0x726 <handle_sensor_query+0x270>
     722:	84 2f       	mov	r24, r20
     724:	89 5c       	subi	r24, 0xC9	; 201
     726:	92 2f       	mov	r25, r18
     728:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     72a:	2f 70       	andi	r18, 0x0F	; 15
     72c:	30 70       	andi	r19, 0x00	; 0
     72e:	2a 30       	cpi	r18, 0x0A	; 10
     730:	31 05       	cpc	r19, r1
     732:	10 f4       	brcc	.+4      	; 0x738 <handle_sensor_query+0x282>
     734:	90 5d       	subi	r25, 0xD0	; 208
     736:	01 c0       	rjmp	.+2      	; 0x73a <handle_sensor_query+0x284>
     738:	99 5c       	subi	r25, 0xC9	; 201
     73a:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     73c:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     73e:	8a 83       	std	Y+2, r24	; 0x02
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     740:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     742:	c7 01       	movw	r24, r14
     744:	64 e0       	ldi	r22, 0x04	; 4
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	bf d2       	rcall	.+1406   	; 0xcc8 <usb_serial_write>
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     74a:	0f 5f       	subi	r16, 0xFF	; 255
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
     74e:	0a 30       	cpi	r16, 0x0A	; 10
     750:	11 05       	cpc	r17, r1
     752:	49 f6       	brne	.-110    	; 0x6e6 <handle_sensor_query+0x230>
     754:	32 c1       	rjmp	.+612    	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	60 e4       	ldi	r22, 0x40	; 64
     75a:	87 d5       	rcall	.+2830   	; 0x126a <adc_start>
     75c:	88 e8       	ldi	r24, 0x88	; 136
     75e:	93 e1       	ldi	r25, 0x13	; 19
     760:	20 e9       	ldi	r18, 0x90	; 144
     762:	31 e0       	ldi	r19, 0x01	; 1
     764:	f9 01       	movw	r30, r18
     766:	31 97       	sbiw	r30, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <handle_sensor_query+0x2b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     76a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     76c:	d9 f7       	brne	.-10     	; 0x764 <handle_sensor_query+0x2ae>
     76e:	01 e0       	ldi	r16, 0x01	; 1
     770:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     772:	60 e2       	ldi	r22, 0x20	; 32
     774:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     776:	7e 01       	movw	r14, r28
     778:	08 94       	sec
     77a:	e1 1c       	adc	r14, r1
     77c:	f1 1c       	adc	r15, r1
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     77e:	8a d5       	rcall	.+2836   	; 0x1294 <adc_read>
     780:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     782:	89 2f       	mov	r24, r25
     784:	99 27       	eor	r25, r25
     786:	48 2f       	mov	r20, r24
     788:	4f 70       	andi	r20, 0x0F	; 15
     78a:	8f 70       	andi	r24, 0x0F	; 15
     78c:	90 70       	andi	r25, 0x00	; 0
     78e:	0a 97       	sbiw	r24, 0x0a	; 10
     790:	18 f4       	brcc	.+6      	; 0x798 <handle_sensor_query+0x2e2>
     792:	54 2f       	mov	r21, r20
     794:	50 5d       	subi	r21, 0xD0	; 208
     796:	02 c0       	rjmp	.+4      	; 0x79c <handle_sensor_query+0x2e6>
     798:	54 2f       	mov	r21, r20
     79a:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     79c:	c9 01       	movw	r24, r18
     79e:	44 e0       	ldi	r20, 0x04	; 4
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	4a 95       	dec	r20
     7a6:	e1 f7       	brne	.-8      	; 0x7a0 <handle_sensor_query+0x2ea>
     7a8:	48 2f       	mov	r20, r24
     7aa:	4f 70       	andi	r20, 0x0F	; 15
     7ac:	8f 70       	andi	r24, 0x0F	; 15
     7ae:	90 70       	andi	r25, 0x00	; 0
     7b0:	0a 97       	sbiw	r24, 0x0a	; 10
     7b2:	18 f4       	brcc	.+6      	; 0x7ba <handle_sensor_query+0x304>
     7b4:	84 2f       	mov	r24, r20
     7b6:	80 5d       	subi	r24, 0xD0	; 208
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <handle_sensor_query+0x308>
     7ba:	84 2f       	mov	r24, r20
     7bc:	89 5c       	subi	r24, 0xC9	; 201
     7be:	92 2f       	mov	r25, r18
     7c0:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     7c2:	2f 70       	andi	r18, 0x0F	; 15
     7c4:	30 70       	andi	r19, 0x00	; 0
     7c6:	2a 30       	cpi	r18, 0x0A	; 10
     7c8:	31 05       	cpc	r19, r1
     7ca:	10 f4       	brcc	.+4      	; 0x7d0 <handle_sensor_query+0x31a>
     7cc:	90 5d       	subi	r25, 0xD0	; 208
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <handle_sensor_query+0x31c>
     7d0:	99 5c       	subi	r25, 0xC9	; 201
     7d2:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     7d4:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     7d6:	8a 83       	std	Y+2, r24	; 0x02
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     7d8:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     7da:	c7 01       	movw	r24, r14
     7dc:	64 e0       	ldi	r22, 0x04	; 4
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	73 d2       	rcall	.+1254   	; 0xcc8 <usb_serial_write>
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     7e2:	0f 5f       	subi	r16, 0xFF	; 255
     7e4:	1f 4f       	sbci	r17, 0xFF	; 255
     7e6:	0a 30       	cpi	r16, 0x0A	; 10
     7e8:	11 05       	cpc	r17, r1
     7ea:	49 f6       	brne	.-110    	; 0x77e <handle_sensor_query+0x2c8>
     7ec:	e6 c0       	rjmp	.+460    	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
     7ee:	85 e0       	ldi	r24, 0x05	; 5
     7f0:	60 e4       	ldi	r22, 0x40	; 64
     7f2:	3b d5       	rcall	.+2678   	; 0x126a <adc_start>
     7f4:	88 e8       	ldi	r24, 0x88	; 136
     7f6:	93 e1       	ldi	r25, 0x13	; 19
     7f8:	20 e9       	ldi	r18, 0x90	; 144
     7fa:	31 e0       	ldi	r19, 0x01	; 1
     7fc:	f9 01       	movw	r30, r18
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <handle_sensor_query+0x348>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     802:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     804:	d9 f7       	brne	.-10     	; 0x7fc <handle_sensor_query+0x346>
     806:	01 e0       	ldi	r16, 0x01	; 1
     808:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     80a:	80 e2       	ldi	r24, 0x20	; 32
     80c:	d8 2e       	mov	r13, r24
	        	usb_serial_write((unsigned char *)buf, 4);
     80e:	7e 01       	movw	r14, r28
     810:	08 94       	sec
     812:	e1 1c       	adc	r14, r1
     814:	f1 1c       	adc	r15, r1
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     816:	3e d5       	rcall	.+2684   	; 0x1294 <adc_read>
     818:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     81a:	89 2f       	mov	r24, r25
     81c:	99 27       	eor	r25, r25
     81e:	48 2f       	mov	r20, r24
     820:	4f 70       	andi	r20, 0x0F	; 15
     822:	8f 70       	andi	r24, 0x0F	; 15
     824:	90 70       	andi	r25, 0x00	; 0
     826:	0a 97       	sbiw	r24, 0x0a	; 10
     828:	18 f4       	brcc	.+6      	; 0x830 <handle_sensor_query+0x37a>
     82a:	54 2f       	mov	r21, r20
     82c:	50 5d       	subi	r21, 0xD0	; 208
     82e:	02 c0       	rjmp	.+4      	; 0x834 <handle_sensor_query+0x37e>
     830:	54 2f       	mov	r21, r20
     832:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     834:	c9 01       	movw	r24, r18
     836:	a4 e0       	ldi	r26, 0x04	; 4
     838:	96 95       	lsr	r25
     83a:	87 95       	ror	r24
     83c:	aa 95       	dec	r26
     83e:	e1 f7       	brne	.-8      	; 0x838 <handle_sensor_query+0x382>
     840:	48 2f       	mov	r20, r24
     842:	4f 70       	andi	r20, 0x0F	; 15
     844:	8f 70       	andi	r24, 0x0F	; 15
     846:	90 70       	andi	r25, 0x00	; 0
     848:	0a 97       	sbiw	r24, 0x0a	; 10
     84a:	18 f4       	brcc	.+6      	; 0x852 <handle_sensor_query+0x39c>
     84c:	84 2f       	mov	r24, r20
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	02 c0       	rjmp	.+4      	; 0x856 <handle_sensor_query+0x3a0>
     852:	84 2f       	mov	r24, r20
     854:	89 5c       	subi	r24, 0xC9	; 201
     856:	92 2f       	mov	r25, r18
     858:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     85a:	2f 70       	andi	r18, 0x0F	; 15
     85c:	30 70       	andi	r19, 0x00	; 0
     85e:	2a 30       	cpi	r18, 0x0A	; 10
     860:	31 05       	cpc	r19, r1
     862:	10 f4       	brcc	.+4      	; 0x868 <handle_sensor_query+0x3b2>
     864:	90 5d       	subi	r25, 0xD0	; 208
     866:	01 c0       	rjmp	.+2      	; 0x86a <handle_sensor_query+0x3b4>
     868:	99 5c       	subi	r25, 0xC9	; 201
     86a:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     86c:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     86e:	8a 83       	std	Y+2, r24	; 0x02
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     870:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     872:	c7 01       	movw	r24, r14
     874:	64 e0       	ldi	r22, 0x04	; 4
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	27 d2       	rcall	.+1102   	; 0xcc8 <usb_serial_write>
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     87a:	0f 5f       	subi	r16, 0xFF	; 255
     87c:	1f 4f       	sbci	r17, 0xFF	; 255
     87e:	0a 30       	cpi	r16, 0x0A	; 10
     880:	11 05       	cpc	r17, r1
     882:	49 f6       	brne	.-110    	; 0x816 <handle_sensor_query+0x360>
     884:	9a c0       	rjmp	.+308    	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
     886:	86 e0       	ldi	r24, 0x06	; 6
     888:	60 e4       	ldi	r22, 0x40	; 64
     88a:	ef d4       	rcall	.+2526   	; 0x126a <adc_start>
     88c:	88 e8       	ldi	r24, 0x88	; 136
     88e:	93 e1       	ldi	r25, 0x13	; 19
     890:	20 e9       	ldi	r18, 0x90	; 144
     892:	31 e0       	ldi	r19, 0x01	; 1
     894:	f9 01       	movw	r30, r18
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	f1 f7       	brne	.-4      	; 0x896 <handle_sensor_query+0x3e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     89c:	d9 f7       	brne	.-10     	; 0x894 <handle_sensor_query+0x3de>
     89e:	01 e0       	ldi	r16, 0x01	; 1
     8a0:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     8a2:	f0 e2       	ldi	r31, 0x20	; 32
     8a4:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     8a6:	7e 01       	movw	r14, r28
     8a8:	08 94       	sec
     8aa:	e1 1c       	adc	r14, r1
     8ac:	f1 1c       	adc	r15, r1
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     8ae:	f2 d4       	rcall	.+2532   	; 0x1294 <adc_read>
     8b0:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     8b2:	89 2f       	mov	r24, r25
     8b4:	99 27       	eor	r25, r25
     8b6:	48 2f       	mov	r20, r24
     8b8:	4f 70       	andi	r20, 0x0F	; 15
     8ba:	8f 70       	andi	r24, 0x0F	; 15
     8bc:	90 70       	andi	r25, 0x00	; 0
     8be:	0a 97       	sbiw	r24, 0x0a	; 10
     8c0:	18 f4       	brcc	.+6      	; 0x8c8 <handle_sensor_query+0x412>
     8c2:	54 2f       	mov	r21, r20
     8c4:	50 5d       	subi	r21, 0xD0	; 208
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <handle_sensor_query+0x416>
     8c8:	54 2f       	mov	r21, r20
     8ca:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     8cc:	c9 01       	movw	r24, r18
     8ce:	74 e0       	ldi	r23, 0x04	; 4
     8d0:	96 95       	lsr	r25
     8d2:	87 95       	ror	r24
     8d4:	7a 95       	dec	r23
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <handle_sensor_query+0x41a>
     8d8:	48 2f       	mov	r20, r24
     8da:	4f 70       	andi	r20, 0x0F	; 15
     8dc:	8f 70       	andi	r24, 0x0F	; 15
     8de:	90 70       	andi	r25, 0x00	; 0
     8e0:	0a 97       	sbiw	r24, 0x0a	; 10
     8e2:	18 f4       	brcc	.+6      	; 0x8ea <handle_sensor_query+0x434>
     8e4:	84 2f       	mov	r24, r20
     8e6:	80 5d       	subi	r24, 0xD0	; 208
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <handle_sensor_query+0x438>
     8ea:	84 2f       	mov	r24, r20
     8ec:	89 5c       	subi	r24, 0xC9	; 201
     8ee:	92 2f       	mov	r25, r18
     8f0:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     8f2:	2f 70       	andi	r18, 0x0F	; 15
     8f4:	30 70       	andi	r19, 0x00	; 0
     8f6:	2a 30       	cpi	r18, 0x0A	; 10
     8f8:	31 05       	cpc	r19, r1
     8fa:	10 f4       	brcc	.+4      	; 0x900 <handle_sensor_query+0x44a>
     8fc:	90 5d       	subi	r25, 0xD0	; 208
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <handle_sensor_query+0x44c>
     900:	99 5c       	subi	r25, 0xC9	; 201
     902:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     904:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     906:	8a 83       	std	Y+2, r24	; 0x02
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     908:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     90a:	c7 01       	movw	r24, r14
     90c:	64 e0       	ldi	r22, 0x04	; 4
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	db d1       	rcall	.+950    	; 0xcc8 <usb_serial_write>
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     912:	0f 5f       	subi	r16, 0xFF	; 255
     914:	1f 4f       	sbci	r17, 0xFF	; 255
     916:	0a 30       	cpi	r16, 0x0A	; 10
     918:	11 05       	cpc	r17, r1
     91a:	49 f6       	brne	.-110    	; 0x8ae <handle_sensor_query+0x3f8>
     91c:	4e c0       	rjmp	.+156    	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
     91e:	87 e0       	ldi	r24, 0x07	; 7
     920:	60 e4       	ldi	r22, 0x40	; 64
     922:	a3 d4       	rcall	.+2374   	; 0x126a <adc_start>
     924:	88 e8       	ldi	r24, 0x88	; 136
     926:	93 e1       	ldi	r25, 0x13	; 19
     928:	20 e9       	ldi	r18, 0x90	; 144
     92a:	31 e0       	ldi	r19, 0x01	; 1
     92c:	f9 01       	movw	r30, r18
     92e:	31 97       	sbiw	r30, 0x01	; 1
     930:	f1 f7       	brne	.-4      	; 0x92e <handle_sensor_query+0x478>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     932:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     934:	d9 f7       	brne	.-10     	; 0x92c <handle_sensor_query+0x476>
     936:	01 e0       	ldi	r16, 0x01	; 1
     938:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     93a:	60 e2       	ldi	r22, 0x20	; 32
     93c:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     93e:	7e 01       	movw	r14, r28
     940:	08 94       	sec
     942:	e1 1c       	adc	r14, r1
     944:	f1 1c       	adc	r15, r1
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     946:	a6 d4       	rcall	.+2380   	; 0x1294 <adc_read>
     948:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     94a:	89 2f       	mov	r24, r25
     94c:	99 27       	eor	r25, r25
     94e:	48 2f       	mov	r20, r24
     950:	4f 70       	andi	r20, 0x0F	; 15
     952:	8f 70       	andi	r24, 0x0F	; 15
     954:	90 70       	andi	r25, 0x00	; 0
     956:	0a 97       	sbiw	r24, 0x0a	; 10
     958:	18 f4       	brcc	.+6      	; 0x960 <handle_sensor_query+0x4aa>
     95a:	54 2f       	mov	r21, r20
     95c:	50 5d       	subi	r21, 0xD0	; 208
     95e:	02 c0       	rjmp	.+4      	; 0x964 <handle_sensor_query+0x4ae>
     960:	54 2f       	mov	r21, r20
     962:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     964:	c9 01       	movw	r24, r18
     966:	44 e0       	ldi	r20, 0x04	; 4
     968:	96 95       	lsr	r25
     96a:	87 95       	ror	r24
     96c:	4a 95       	dec	r20
     96e:	e1 f7       	brne	.-8      	; 0x968 <handle_sensor_query+0x4b2>
     970:	48 2f       	mov	r20, r24
     972:	4f 70       	andi	r20, 0x0F	; 15
     974:	8f 70       	andi	r24, 0x0F	; 15
     976:	90 70       	andi	r25, 0x00	; 0
     978:	0a 97       	sbiw	r24, 0x0a	; 10
     97a:	18 f4       	brcc	.+6      	; 0x982 <handle_sensor_query+0x4cc>
     97c:	84 2f       	mov	r24, r20
     97e:	80 5d       	subi	r24, 0xD0	; 208
     980:	02 c0       	rjmp	.+4      	; 0x986 <handle_sensor_query+0x4d0>
     982:	84 2f       	mov	r24, r20
     984:	89 5c       	subi	r24, 0xC9	; 201
     986:	92 2f       	mov	r25, r18
     988:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     98a:	2f 70       	andi	r18, 0x0F	; 15
     98c:	30 70       	andi	r19, 0x00	; 0
     98e:	2a 30       	cpi	r18, 0x0A	; 10
     990:	31 05       	cpc	r19, r1
     992:	10 f4       	brcc	.+4      	; 0x998 <handle_sensor_query+0x4e2>
     994:	90 5d       	subi	r25, 0xD0	; 208
     996:	01 c0       	rjmp	.+2      	; 0x99a <handle_sensor_query+0x4e4>
     998:	99 5c       	subi	r25, 0xC9	; 201
     99a:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     99c:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     99e:	8a 83       	std	Y+2, r24	; 0x02
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     9a0:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     9a2:	c7 01       	movw	r24, r14
     9a4:	64 e0       	ldi	r22, 0x04	; 4
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8f d1       	rcall	.+798    	; 0xcc8 <usb_serial_write>
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     9aa:	0f 5f       	subi	r16, 0xFF	; 255
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
     9ae:	0a 30       	cpi	r16, 0x0A	; 10
     9b0:	11 05       	cpc	r17, r1
     9b2:	49 f6       	brne	.-110    	; 0x946 <handle_sensor_query+0x490>
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		default:
			usb_serial_putchar('\x01');
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	01 c0       	rjmp	.+2      	; 0x9bc <handle_sensor_query+0x506>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	43 d1       	rcall	.+646    	; 0xc44 <usb_serial_putchar>
	usb_serial_putchar('\n');
     9be:	8a e0       	ldi	r24, 0x0A	; 10
     9c0:	41 d1       	rcall	.+642    	; 0xc44 <usb_serial_putchar>
}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	cf 91       	pop	r28
     9cc:	df 91       	pop	r29
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	08 95       	ret

000009da <handle_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
}

void handle_command(const char *str, uint8_t len)
{
     9da:	fc 01       	movw	r30, r24
	if(len == 0)
     9dc:	66 23       	and	r22, r22
     9de:	d9 f0       	breq	.+54     	; 0xa16 <handle_command+0x3c>
		return;

	switch(str[0])
     9e0:	80 81       	ld	r24, Z
     9e2:	83 30       	cpi	r24, 0x03	; 3
     9e4:	79 f0       	breq	.+30     	; 0xa04 <handle_command+0x2a>
     9e6:	84 30       	cpi	r24, 0x04	; 4
     9e8:	28 f4       	brcc	.+10     	; 0x9f4 <handle_command+0x1a>
     9ea:	88 23       	and	r24, r24
     9ec:	41 f0       	breq	.+16     	; 0x9fe <handle_command+0x24>
     9ee:	81 30       	cpi	r24, 0x01	; 1
     9f0:	79 f4       	brne	.+30     	; 0xa10 <handle_command+0x36>
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <handle_command+0x26>
     9f4:	84 30       	cpi	r24, 0x04	; 4
     9f6:	39 f0       	breq	.+14     	; 0xa06 <handle_command+0x2c>
     9f8:	87 30       	cpi	r24, 0x07	; 7
     9fa:	51 f4       	brne	.+20     	; 0xa10 <handle_command+0x36>
     9fc:	07 c0       	rjmp	.+14     	; 0xa0c <handle_command+0x32>
	{
		case 0:
			handle_version_command();
     9fe:	dc cc       	rjmp	.-1608   	; 0x3b8 <handle_version_command>
			break;
		case 1:
			handle_ping_command(str, len);
     a00:	cf 01       	movw	r24, r30
     a02:	bc cc       	rjmp	.-1672   	; 0x37c <handle_ping_command>
			break;
		case 3:
			handle_pwm_ports_command();
     a04:	b4 cc       	rjmp	.-1688   	; 0x36e <handle_pwm_ports_command>
			break;
		case 4:
			handle_set_pwm_command(str[1], str[2]);
     a06:	81 81       	ldd	r24, Z+1	; 0x01
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	db cc       	rjmp	.-1610   	; 0x3c2 <handle_set_pwm_command>
			break;
        case 7:
            handle_sensor_query(str[1]);
     a0c:	81 81       	ldd	r24, Z+1	; 0x01
     a0e:	53 cd       	rjmp	.-1370   	; 0x4b6 <handle_sensor_query>
            break;
		default:
			send_str(PSTR("INVALID_COMMAND_CODE"));
     a10:	88 ee       	ldi	r24, 0xE8	; 232
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	9f cc       	rjmp	.-1730   	; 0x354 <send_str>
     a16:	08 95       	ret

00000a18 <sensor_display>:

void send_str(const char *s);
uint8_t recv_str(char *buf, uint8_t size);
void parse_and_execute_command(const char *buf, uint8_t num);

void sensor_display(){
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	00 d0       	rcall	.+0      	; 0xa22 <sensor_display+0xa>
     a22:	00 d0       	rcall	.+0      	; 0xa24 <sensor_display+0xc>
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
    uint8_t full = 255;
    uint8_t off = 0;
    uint16_t val;
    uint16_t val_;
    char buf[4];
    adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	60 e4       	ldi	r22, 0x40	; 64
     a2c:	1e d4       	rcall	.+2108   	; 0x126a <adc_start>
    val = adc_read();
     a2e:	32 d4       	rcall	.+2148   	; 0x1294 <adc_read>
     a30:	8c 01       	movw	r16, r24
     a32:	20 e0       	ldi	r18, 0x00	; 0
    buf[0] = HEX((val_ >> 8) & 15);
     a34:	20 5d       	subi	r18, 0xD0	; 208
    buf[1] = HEX((val_ >> 4) & 15);
    buf[2] = HEX(val_ & 15);
     a36:	2b 83       	std	Y+3, r18	; 0x03
    buf[3] = ' ';
     a38:	80 e2       	ldi	r24, 0x20	; 32
     a3a:	8c 83       	std	Y+4, r24	; 0x04
    uint16_t val_;
    char buf[4];
    adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
    val = adc_read();
    buf[0] = HEX((val_ >> 8) & 15);
    buf[1] = HEX((val_ >> 4) & 15);
     a3c:	2a 83       	std	Y+2, r18	; 0x02
    uint16_t val;
    uint16_t val_;
    char buf[4];
    adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
    val = adc_read();
    buf[0] = HEX((val_ >> 8) & 15);
     a3e:	29 83       	std	Y+1, r18	; 0x01
    buf[1] = HEX((val_ >> 4) & 15);
    buf[2] = HEX(val_ & 15);
    buf[3] = ' ';
    usb_serial_write((unsigned char *)buf, 4);
     a40:	ce 01       	movw	r24, r28
     a42:	01 96       	adiw	r24, 0x01	; 1
     a44:	64 e0       	ldi	r22, 0x04	; 4
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	3f d1       	rcall	.+638    	; 0xcc8 <usb_serial_write>

    if (val < 100){
     a4a:	04 36       	cpi	r16, 0x64	; 100
     a4c:	11 05       	cpc	r17, r1
     a4e:	10 f4       	brcc	.+4      	; 0xa54 <sensor_display+0x3c>
        OCR0B = off;
     a50:	18 bc       	out	0x28, r1	; 40
     a52:	29 c0       	rjmp	.+82     	; 0xaa6 <sensor_display+0x8e>
        OCR1A = off;
        OCR2A = off;
        OCR2B = off;
    }
    else
    if (val < 200){
     a54:	08 3c       	cpi	r16, 0xC8	; 200
     a56:	11 05       	cpc	r17, r1
     a58:	30 f4       	brcc	.+12     	; 0xa66 <sensor_display+0x4e>
        OCR0B = off;
     a5a:	18 bc       	out	0x28, r1	; 40
        OCR1A = off;
     a5c:	10 92 89 00 	sts	0x0089, r1
     a60:	10 92 88 00 	sts	0x0088, r1
     a64:	62 c0       	rjmp	.+196    	; 0xb2a <__stack+0x2b>
        OCR2A = off;
        OCR2B = full;
    }
    else
    if (val < 300){
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	0c 32       	cpi	r16, 0x2C	; 44
     a6a:	18 07       	cpc	r17, r24
     a6c:	58 f4       	brcc	.+22     	; 0xa84 <sensor_display+0x6c>
        OCR0B = off;
     a6e:	18 bc       	out	0x28, r1	; 40
        OCR1A = off;
     a70:	10 92 89 00 	sts	0x0089, r1
     a74:	10 92 88 00 	sts	0x0088, r1
        OCR2A = full;
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	80 93 b3 00 	sts	0x00B3, r24
        OCR2B = off;
     a7e:	10 92 b4 00 	sts	0x00B4, r1
     a82:	58 c0       	rjmp	.+176    	; 0xb34 <__stack+0x35>
    }
    else
    if (val < 400){
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	00 39       	cpi	r16, 0x90	; 144
     a88:	18 07       	cpc	r17, r24
     a8a:	38 f4       	brcc	.+14     	; 0xa9a <sensor_display+0x82>
        OCR0B = off;
     a8c:	18 bc       	out	0x28, r1	; 40
        OCR1A = off;
     a8e:	10 92 89 00 	sts	0x0089, r1
     a92:	10 92 88 00 	sts	0x0088, r1
        OCR2A = full;
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	2d c0       	rjmp	.+90     	; 0xaf4 <sensor_display+0xdc>
        OCR2B = full;
    }      
    else
    if (val < 500){
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	04 3f       	cpi	r16, 0xF4	; 244
     a9e:	18 07       	cpc	r17, r24
     aa0:	38 f4       	brcc	.+14     	; 0xab0 <sensor_display+0x98>
        OCR0B = full;
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     aa6:	10 92 89 00 	sts	0x0089, r1
     aaa:	10 92 88 00 	sts	0x0088, r1
     aae:	30 c0       	rjmp	.+96     	; 0xb10 <__stack+0x11>
        OCR2A = off;
        OCR2B = off;
    }
    else
    if (val < 600){
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	08 35       	cpi	r16, 0x58	; 88
     ab4:	18 07       	cpc	r17, r24
     ab6:	48 f4       	brcc	.+18     	; 0xaca <sensor_display+0xb2>
        OCR0B = full;
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     abc:	10 92 89 00 	sts	0x0089, r1
     ac0:	10 92 88 00 	sts	0x0088, r1
        OCR2A = off;
     ac4:	10 92 b3 00 	sts	0x00B3, r1
     ac8:	33 c0       	rjmp	.+102    	; 0xb30 <__stack+0x31>
        OCR2B = full;
    }  
    else
    if (val < 700){
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	0c 3b       	cpi	r16, 0xBC	; 188
     ace:	18 07       	cpc	r17, r24
     ad0:	38 f4       	brcc	.+14     	; 0xae0 <sensor_display+0xc8>
        OCR0B = full;
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     ad6:	10 92 89 00 	sts	0x0089, r1
     ada:	10 92 88 00 	sts	0x0088, r1
     ade:	cd cf       	rjmp	.-102    	; 0xa7a <sensor_display+0x62>
        OCR2A = full;
        OCR2B = off;
    } 
    else
    if (val < 800){
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	00 32       	cpi	r16, 0x20	; 32
     ae4:	18 07       	cpc	r17, r24
     ae6:	48 f4       	brcc	.+18     	; 0xafa <sensor_display+0xe2>
        OCR0B = full;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	88 bd       	out	0x28, r24	; 40
        OCR1A = off;
     aec:	10 92 89 00 	sts	0x0089, r1
     af0:	10 92 88 00 	sts	0x0088, r1
        OCR2A = full;
     af4:	80 93 b3 00 	sts	0x00B3, r24
     af8:	1b c0       	rjmp	.+54     	; 0xb30 <__stack+0x31>
        OCR2B = full;
    } 
    else
    if (val < 900){
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	04 38       	cpi	r16, 0x84	; 132
     afe:	18 07       	cpc	r17, r24
     b00:	50 f4       	brcc	.+20     	; 0xb16 <__stack+0x17>
        OCR0B = off;
     b02:	18 bc       	out	0x28, r1	; 40
        OCR1A = full;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	90 93 89 00 	sts	0x0089, r25
     b0c:	80 93 88 00 	sts	0x0088, r24
        OCR2A = off;
     b10:	10 92 b3 00 	sts	0x00B3, r1
     b14:	b4 cf       	rjmp	.-152    	; 0xa7e <sensor_display+0x66>
        OCR2B = off;
    }
    else
    if (val < 1000){
     b16:	08 5e       	subi	r16, 0xE8	; 232
     b18:	13 40       	sbci	r17, 0x03	; 3
     b1a:	60 f4       	brcc	.+24     	; 0xb34 <__stack+0x35>
        OCR0B = off;
     b1c:	18 bc       	out	0x28, r1	; 40
        OCR1A = full;
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	90 93 89 00 	sts	0x0089, r25
     b26:	80 93 88 00 	sts	0x0088, r24
        OCR2A = off;
     b2a:	10 92 b3 00 	sts	0x00B3, r1
        OCR2B = full;
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	80 93 b4 00 	sts	0x00B4, r24
    }


}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	08 95       	ret

00000b46 <main>:
			send_str(PSTR("INVALID_COMMAND_CODE"));
	}
}

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	a0 97       	sbiw	r28, 0x20	; 32
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	de bf       	out	0x3e, r29	; 62
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(2);
     b5e:	80 e8       	ldi	r24, 0x80	; 128
     b60:	80 93 61 00 	sts	0x0061, r24
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();
     b6a:	d7 db       	rcall	.-2130   	; 0x31a <setup_pwms>

   	usb_init();
     b6c:	1d d0       	rcall	.+58     	; 0xba8 <usb_init>
	while (!usb_configured()) /* wait */ ;
     b6e:	35 d0       	rcall	.+106    	; 0xbda <usb_configured>
     b70:	88 23       	and	r24, r24
     b72:	e9 f3       	breq	.-6      	; 0xb6e <main+0x28>
     b74:	80 e1       	ldi	r24, 0x10	; 16
     b76:	97 e2       	ldi	r25, 0x27	; 39
     b78:	20 e9       	ldi	r18, 0x90	; 144
     b7a:	31 e0       	ldi	r19, 0x01	; 1
     b7c:	f9 01       	movw	r30, r18
     b7e:	31 97       	sbiw	r30, 0x01	; 1
     b80:	f1 f7       	brne	.-4      	; 0xb7e <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b84:	d9 f7       	brne	.-10     	; 0xb7c <main+0x36>
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
		usb_serial_flush_input();

    //      send_str("Made it to the main loop");
    		while (1) {
		n = recv_str(buf, sizeof(buf));
     b86:	8e 01       	movw	r16, r28
     b88:	0f 5f       	subi	r16, 0xFF	; 255
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
   	usb_init();
	while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);

	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
     b8c:	c5 d1       	rcall	.+906    	; 0xf18 <usb_serial_get_control>
     b8e:	80 ff       	sbrs	r24, 0
     b90:	fd cf       	rjmp	.-6      	; 0xb8c <main+0x46>
		usb_serial_flush_input();
     b92:	45 d0       	rcall	.+138    	; 0xc1e <usb_serial_flush_input>

    //      send_str("Made it to the main loop");
    		while (1) {
		n = recv_str(buf, sizeof(buf));
     b94:	c8 01       	movw	r24, r16
     b96:	60 e2       	ldi	r22, 0x20	; 32
     b98:	68 dc       	rcall	.-1840   	; 0x46a <recv_str>
     b9a:	68 2f       	mov	r22, r24
			if (n == 255) break;
     b9c:	8f 3f       	cpi	r24, 0xFF	; 255
     b9e:	b1 f3       	breq	.-20     	; 0xb8c <main+0x46>
			handle_command(buf, n);
     ba0:	c8 01       	movw	r24, r16
     ba2:	1b df       	rcall	.-458    	; 0x9da <handle_command>
    //        send_str("Made it to the inner loop");
             sensor_display();
     ba4:	39 df       	rcall	.-398    	; 0xa18 <sensor_display>
     ba6:	f6 cf       	rjmp	.-20     	; 0xb94 <main+0x4e>

00000ba8 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     bae:	80 ea       	ldi	r24, 0xA0	; 160
     bb0:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     bb4:	82 e1       	ldi	r24, 0x12	; 18
     bb6:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     bb8:	09 b4       	in	r0, 0x29	; 41
     bba:	00 fe       	sbrs	r0, 0
     bbc:	fd cf       	rjmp	.-6      	; 0xbb8 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     bbe:	80 e9       	ldi	r24, 0x90	; 144
     bc0:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     bc4:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     bc8:	10 92 08 01 	sts	0x0108, r1
	cdc_line_rtsdtr = 0;
     bcc:	10 92 09 01 	sts	0x0109, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     bd0:	8c e0       	ldi	r24, 0x0C	; 12
     bd2:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     bd6:	78 94       	sei
}
     bd8:	08 95       	ret

00000bda <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     bda:	80 91 08 01 	lds	r24, 0x0108
}
     bde:	08 95       	ret

00000be0 <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     be0:	2f b7       	in	r18, 0x3f	; 63
	cli();
     be2:	f8 94       	cli
	if (!usb_configuration) {
     be4:	80 91 08 01 	lds	r24, 0x0108
     be8:	88 23       	and	r24, r24
     bea:	39 f0       	breq	.+14     	; 0xbfa <usb_serial_getchar+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     bf2:	80 91 e8 00 	lds	r24, 0x00E8
     bf6:	85 fd       	sbrc	r24, 5
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <usb_serial_getchar+0x22>
		// no data in buffer
		SREG = intr_state;
     bfa:	2f bf       	out	0x3f, r18	; 63
     bfc:	2f ef       	ldi	r18, 0xFF	; 255
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	0c c0       	rjmp	.+24     	; 0xc1a <usb_serial_getchar+0x3a>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     c02:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     c06:	80 91 e8 00 	lds	r24, 0x00E8
     c0a:	85 fd       	sbrc	r24, 5
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <usb_serial_getchar+0x34>
     c0e:	8b e6       	ldi	r24, 0x6B	; 107
     c10:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     c14:	2f bf       	out	0x3f, r18	; 63
	return c;
     c16:	29 2f       	mov	r18, r25
     c18:	30 e0       	ldi	r19, 0x00	; 0
}
     c1a:	c9 01       	movw	r24, r18
     c1c:	08 95       	ret

00000c1e <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     c1e:	80 91 08 01 	lds	r24, 0x0108
     c22:	88 23       	and	r24, r24
     c24:	71 f0       	breq	.+28     	; 0xc42 <usb_serial_flush_input+0x24>
		intr_state = SREG;
     c26:	9f b7       	in	r25, 0x3f	; 63
		cli();
     c28:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     c30:	2b e6       	ldi	r18, 0x6B	; 107
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <usb_serial_flush_input+0x1a>
     c34:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     c38:	80 91 e8 00 	lds	r24, 0x00E8
     c3c:	85 fd       	sbrc	r24, 5
     c3e:	fa cf       	rjmp	.-12     	; 0xc34 <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     c40:	9f bf       	out	0x3f, r25	; 63
     c42:	08 95       	ret

00000c44 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
     c44:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     c46:	80 91 08 01 	lds	r24, 0x0108
     c4a:	88 23       	and	r24, r24
     c4c:	d9 f1       	breq	.+118    	; 0xcc4 <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     c4e:	2f b7       	in	r18, 0x3f	; 63
	cli();
     c50:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     c58:	80 91 0b 01 	lds	r24, 0x010B
     c5c:	88 23       	and	r24, r24
     c5e:	41 f0       	breq	.+16     	; 0xc70 <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     c60:	80 91 e8 00 	lds	r24, 0x00E8
     c64:	85 fd       	sbrc	r24, 5
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <usb_serial_putchar+0x28>
			SREG = intr_state;
     c68:	2f bf       	out	0x3f, r18	; 63
     c6a:	12 c0       	rjmp	.+36     	; 0xc90 <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     c6c:	10 92 0b 01 	sts	0x010B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     c70:	90 91 e4 00 	lds	r25, 0x00E4
     c74:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     c76:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     c78:	80 91 e8 00 	lds	r24, 0x00E8
     c7c:	85 fd       	sbrc	r24, 5
     c7e:	13 c0       	rjmp	.+38     	; 0xca6 <usb_serial_putchar+0x62>
		SREG = intr_state;
     c80:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     c82:	80 91 e4 00 	lds	r24, 0x00E4
     c86:	89 17       	cp	r24, r25
     c88:	29 f4       	brne	.+10     	; 0xc94 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	80 93 0b 01 	sts	0x010B, r24
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     c94:	80 91 08 01 	lds	r24, 0x0108
     c98:	88 23       	and	r24, r24
     c9a:	a1 f0       	breq	.+40     	; 0xcc4 <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
     c9c:	2f b7       	in	r18, 0x3f	; 63
		cli();
     c9e:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     ca0:	30 93 e9 00 	sts	0x00E9, r19
     ca4:	e9 cf       	rjmp	.-46     	; 0xc78 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     ca6:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     caa:	80 91 e8 00 	lds	r24, 0x00E8
     cae:	85 fd       	sbrc	r24, 5
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <usb_serial_putchar+0x74>
     cb2:	8a e3       	ldi	r24, 0x3A	; 58
     cb4:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     cb8:	85 e0       	ldi	r24, 0x05	; 5
     cba:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
     cbe:	2f bf       	out	0x3f, r18	; 63
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	08 95       	ret
	return 0;
     cc4:	8f ef       	ldi	r24, 0xFF	; 255
}
     cc6:	08 95       	ret

00000cc8 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     cce:	80 91 08 01 	lds	r24, 0x0108
     cd2:	88 23       	and	r24, r24
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <usb_serial_write+0x10>
     cd6:	1c c1       	rjmp	.+568    	; 0xf10 <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     cd8:	3f b7       	in	r19, 0x3f	; 63
	cli();
     cda:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     cdc:	84 e0       	ldi	r24, 0x04	; 4
     cde:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     ce2:	80 91 0b 01 	lds	r24, 0x010B
     ce6:	88 23       	and	r24, r24
     ce8:	09 f4       	brne	.+2      	; 0xcec <usb_serial_write+0x24>
     cea:	07 c1       	rjmp	.+526    	; 0xefa <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
     cec:	80 91 e8 00 	lds	r24, 0x00E8
     cf0:	85 fd       	sbrc	r24, 5
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <usb_serial_write+0x30>
			SREG = intr_state;
     cf4:	3f bf       	out	0x3f, r19	; 63
     cf6:	0c c1       	rjmp	.+536    	; 0xf10 <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     cf8:	10 92 0b 01 	sts	0x010B, r1
     cfc:	fe c0       	rjmp	.+508    	; 0xefa <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     cfe:	90 91 e4 00 	lds	r25, 0x00E4
     d02:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     d04:	80 91 e8 00 	lds	r24, 0x00E8
     d08:	85 fd       	sbrc	r24, 5
     d0a:	13 c0       	rjmp	.+38     	; 0xd32 <usb_serial_write+0x6a>
			SREG = intr_state;
     d0c:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     d0e:	80 91 e4 00 	lds	r24, 0x00E4
     d12:	89 17       	cp	r24, r25
     d14:	21 f4       	brne	.+8      	; 0xd1e <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	80 93 0b 01 	sts	0x010B, r24
     d1c:	f9 c0       	rjmp	.+498    	; 0xf10 <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     d1e:	80 91 08 01 	lds	r24, 0x0108
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <usb_serial_write+0x60>
     d26:	f4 c0       	rjmp	.+488    	; 0xf10 <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     d28:	3f b7       	in	r19, 0x3f	; 63
			cli();
     d2a:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     d2c:	50 93 e9 00 	sts	0x00E9, r21
     d30:	e9 cf       	rjmp	.-46     	; 0xd04 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     d32:	80 91 f2 00 	lds	r24, 0x00F2
     d36:	2a 2f       	mov	r18, r26
     d38:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     d3a:	82 2f       	mov	r24, r18
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	68 17       	cp	r22, r24
     d40:	79 07       	cpc	r23, r25
     d42:	08 f4       	brcc	.+2      	; 0xd46 <usb_serial_write+0x7e>
     d44:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     d46:	82 2f       	mov	r24, r18
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	81 34       	cpi	r24, 0x41	; 65
     d4c:	91 05       	cpc	r25, r1
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <usb_serial_write+0x8a>
     d50:	c6 c0       	rjmp	.+396    	; 0xede <usb_serial_write+0x216>
     d52:	8a 5a       	subi	r24, 0xAA	; 170
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	fc 01       	movw	r30, r24
     d58:	ee 0f       	add	r30, r30
     d5a:	ff 1f       	adc	r31, r31
     d5c:	05 90       	lpm	r0, Z+
     d5e:	f4 91       	lpm	r31, Z+
     d60:	e0 2d       	mov	r30, r0
     d62:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     d64:	89 91       	ld	r24, Y+
     d66:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
     d6a:	89 91       	ld	r24, Y+
     d6c:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
     d70:	89 91       	ld	r24, Y+
     d72:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
     d76:	89 91       	ld	r24, Y+
     d78:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
     d7c:	89 91       	ld	r24, Y+
     d7e:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
     d82:	89 91       	ld	r24, Y+
     d84:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
     d88:	89 91       	ld	r24, Y+
     d8a:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
     d8e:	89 91       	ld	r24, Y+
     d90:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
     d94:	89 91       	ld	r24, Y+
     d96:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
     d9a:	89 91       	ld	r24, Y+
     d9c:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
     da0:	89 91       	ld	r24, Y+
     da2:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
     da6:	89 91       	ld	r24, Y+
     da8:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
     dac:	89 91       	ld	r24, Y+
     dae:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
     db2:	89 91       	ld	r24, Y+
     db4:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
     db8:	89 91       	ld	r24, Y+
     dba:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
     dbe:	89 91       	ld	r24, Y+
     dc0:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
     dc4:	89 91       	ld	r24, Y+
     dc6:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
     dca:	89 91       	ld	r24, Y+
     dcc:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
     dd0:	89 91       	ld	r24, Y+
     dd2:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
     dd6:	89 91       	ld	r24, Y+
     dd8:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
     ddc:	89 91       	ld	r24, Y+
     dde:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
     de2:	89 91       	ld	r24, Y+
     de4:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
     de8:	89 91       	ld	r24, Y+
     dea:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
     dee:	89 91       	ld	r24, Y+
     df0:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
     df4:	89 91       	ld	r24, Y+
     df6:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
     dfa:	89 91       	ld	r24, Y+
     dfc:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
     e00:	89 91       	ld	r24, Y+
     e02:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
     e06:	89 91       	ld	r24, Y+
     e08:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
     e0c:	89 91       	ld	r24, Y+
     e0e:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
     e12:	89 91       	ld	r24, Y+
     e14:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
     e18:	89 91       	ld	r24, Y+
     e1a:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
     e1e:	89 91       	ld	r24, Y+
     e20:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     e24:	89 91       	ld	r24, Y+
     e26:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
     e2a:	89 91       	ld	r24, Y+
     e2c:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
     e30:	89 91       	ld	r24, Y+
     e32:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
     e36:	89 91       	ld	r24, Y+
     e38:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
     e3c:	89 91       	ld	r24, Y+
     e3e:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
     e42:	89 91       	ld	r24, Y+
     e44:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
     e48:	89 91       	ld	r24, Y+
     e4a:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
     e4e:	89 91       	ld	r24, Y+
     e50:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
     e54:	89 91       	ld	r24, Y+
     e56:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
     e5a:	89 91       	ld	r24, Y+
     e5c:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
     e60:	89 91       	ld	r24, Y+
     e62:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
     e66:	89 91       	ld	r24, Y+
     e68:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
     e6c:	89 91       	ld	r24, Y+
     e6e:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
     e72:	89 91       	ld	r24, Y+
     e74:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
     e78:	89 91       	ld	r24, Y+
     e7a:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
     e7e:	89 91       	ld	r24, Y+
     e80:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
     e84:	89 91       	ld	r24, Y+
     e86:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
     e8a:	89 91       	ld	r24, Y+
     e8c:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
     e90:	89 91       	ld	r24, Y+
     e92:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
     e96:	89 91       	ld	r24, Y+
     e98:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
     e9c:	89 91       	ld	r24, Y+
     e9e:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
     ea2:	89 91       	ld	r24, Y+
     ea4:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
     ea8:	89 91       	ld	r24, Y+
     eaa:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
     eae:	89 91       	ld	r24, Y+
     eb0:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
     eb4:	89 91       	ld	r24, Y+
     eb6:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
     eba:	89 91       	ld	r24, Y+
     ebc:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
     ec0:	89 91       	ld	r24, Y+
     ec2:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
     ec6:	89 91       	ld	r24, Y+
     ec8:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
     ecc:	89 91       	ld	r24, Y+
     ece:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
     ed2:	89 91       	ld	r24, Y+
     ed4:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
     ed8:	89 91       	ld	r24, Y+
     eda:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
     ede:	89 91       	ld	r24, Y+
     ee0:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     ee4:	80 91 e8 00 	lds	r24, 0x00E8
     ee8:	85 fd       	sbrc	r24, 5
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <usb_serial_write+0x228>
     eec:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
     ef0:	62 1b       	sub	r22, r18
     ef2:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     ef4:	40 93 0a 01 	sts	0x010A, r20
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
     efa:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     efc:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     efe:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     f00:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
     f02:	61 15       	cp	r22, r1
     f04:	71 05       	cpc	r23, r1
     f06:	09 f0       	breq	.+2      	; 0xf0a <usb_serial_write+0x242>
     f08:	fa ce       	rjmp	.-524    	; 0xcfe <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
     f0a:	3f bf       	out	0x3f, r19	; 63
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <usb_serial_write+0x24a>
	return 0;
     f10:	8f ef       	ldi	r24, 0xFF	; 255
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	08 95       	ret

00000f18 <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
     f18:	80 91 09 01 	lds	r24, 0x0109
     f1c:	08 95       	ret

00000f1e <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	8f 93       	push	r24
     f2a:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
     f2c:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
     f30:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
     f34:	98 2f       	mov	r25, r24
     f36:	83 ff       	sbrs	r24, 3
     f38:	11 c0       	rjmp	.+34     	; 0xf5c <__vector_10+0x3e>
		UENUM = 0;
     f3a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
     f44:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     f48:	82 e1       	ldi	r24, 0x12	; 18
     f4a:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
     f4e:	88 e0       	ldi	r24, 0x08	; 8
     f50:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
     f54:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
     f58:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
     f5c:	92 ff       	sbrs	r25, 2
     f5e:	13 c0       	rjmp	.+38     	; 0xf86 <__vector_10+0x68>
		if (usb_configuration) {
     f60:	80 91 08 01 	lds	r24, 0x0108
     f64:	88 23       	and	r24, r24
     f66:	79 f0       	breq	.+30     	; 0xf86 <__vector_10+0x68>
			t = transmit_flush_timer;
     f68:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
     f6c:	88 23       	and	r24, r24
     f6e:	59 f0       	breq	.+22     	; 0xf86 <__vector_10+0x68>
				transmit_flush_timer = --t;
     f70:	81 50       	subi	r24, 0x01	; 1
     f72:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
     f76:	88 23       	and	r24, r24
     f78:	31 f4       	brne	.+12     	; 0xf86 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
     f7a:	84 e0       	ldi	r24, 0x04	; 4
     f7c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     f80:	8a e3       	ldi	r24, 0x3A	; 58
     f82:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	0f 90       	pop	r0
     f90:	1f 90       	pop	r1
     f92:	18 95       	reti

00000f94 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     f94:	1f 92       	push	r1
     f96:	0f 92       	push	r0
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	0f 92       	push	r0
     f9c:	11 24       	eor	r1, r1
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	2f 93       	push	r18
     fa4:	3f 93       	push	r19
     fa6:	4f 93       	push	r20
     fa8:	5f 93       	push	r21
     faa:	6f 93       	push	r22
     fac:	7f 93       	push	r23
     fae:	8f 93       	push	r24
     fb0:	9f 93       	push	r25
     fb2:	af 93       	push	r26
     fb4:	bf 93       	push	r27
     fb6:	ef 93       	push	r30
     fb8:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     fba:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     fbe:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     fc2:	83 ff       	sbrs	r24, 3
     fc4:	3c c1       	rjmp	.+632    	; 0x123e <__vector_11+0x2aa>
                bmRequestType = UEDATX;
     fc6:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
     fca:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
     fce:	80 91 f1 00 	lds	r24, 0x00F1
     fd2:	68 2f       	mov	r22, r24
     fd4:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
     fd6:	20 91 f1 00 	lds	r18, 0x00F1
     fda:	92 2f       	mov	r25, r18
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	68 2b       	or	r22, r24
     fe0:	79 2b       	or	r23, r25
                wIndex = UEDATX;
     fe2:	80 91 f1 00 	lds	r24, 0x00F1
     fe6:	a8 2f       	mov	r26, r24
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
     fea:	20 91 f1 00 	lds	r18, 0x00F1
     fee:	92 2f       	mov	r25, r18
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	a8 2b       	or	r26, r24
     ff4:	b9 2b       	or	r27, r25
                wLength = UEDATX;
     ff6:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
     ffa:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     ffe:	82 ef       	ldi	r24, 0xF2	; 242
    1000:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    1004:	36 30       	cpi	r19, 0x06	; 6
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_11+0x76>
    1008:	5a c0       	rjmp	.+180    	; 0x10be <__vector_11+0x12a>
    100a:	2e e1       	ldi	r18, 0x1E	; 30
    100c:	32 e0       	ldi	r19, 0x02	; 2
    100e:	a9 01       	movw	r20, r18
    1010:	45 50       	subi	r20, 0x05	; 5
    1012:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    1014:	f9 01       	movw	r30, r18
    1016:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    1018:	85 91       	lpm	r24, Z+
    101a:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    101c:	86 17       	cp	r24, r22
    101e:	97 07       	cpc	r25, r23
    1020:	01 f5       	brne	.+64     	; 0x1062 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    1022:	fa 01       	movw	r30, r20
    1024:	85 91       	lpm	r24, Z+
    1026:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    1028:	8a 17       	cp	r24, r26
    102a:	9b 07       	cpc	r25, r27
    102c:	d1 f4       	brne	.+52     	; 0x1062 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    102e:	9a 01       	movw	r18, r20
    1030:	2e 5f       	subi	r18, 0xFE	; 254
    1032:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1034:	f9 01       	movw	r30, r18
    1036:	65 91       	lpm	r22, Z+
    1038:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    103a:	2e 5f       	subi	r18, 0xFE	; 254
    103c:	3f 4f       	sbci	r19, 0xFF	; 255
    103e:	f9 01       	movw	r30, r18
    1040:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    1042:	21 2f       	mov	r18, r17
    1044:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1046:	90 2f       	mov	r25, r16
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	28 2b       	or	r18, r24
    104c:	39 2b       	or	r19, r25
    104e:	2f 3f       	cpi	r18, 0xFF	; 255
    1050:	31 05       	cpc	r19, r1
    1052:	19 f0       	breq	.+6      	; 0x105a <__vector_11+0xc6>
    1054:	10 f0       	brcs	.+4      	; 0x105a <__vector_11+0xc6>
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	24 17       	cp	r18, r20
    105c:	58 f4       	brcc	.+22     	; 0x1074 <__vector_11+0xe0>
    105e:	42 2f       	mov	r20, r18
    1060:	09 c0       	rjmp	.+18     	; 0x1074 <__vector_11+0xe0>
    1062:	29 5f       	subi	r18, 0xF9	; 249
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	49 5f       	subi	r20, 0xF9	; 249
    1068:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    106a:	f2 e0       	ldi	r31, 0x02	; 2
    106c:	28 34       	cpi	r18, 0x48	; 72
    106e:	3f 07       	cpc	r19, r31
    1070:	89 f6       	brne	.-94     	; 0x1014 <__vector_11+0x80>
    1072:	e5 c0       	rjmp	.+458    	; 0x123e <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1074:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1076:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	c9 01       	movw	r24, r18
    1080:	85 70       	andi	r24, 0x05	; 5
    1082:	90 70       	andi	r25, 0x00	; 0
    1084:	89 2b       	or	r24, r25
    1086:	b9 f3       	breq	.-18     	; 0x1076 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    1088:	22 fd       	sbrc	r18, 2
    108a:	dc c0       	rjmp	.+440    	; 0x1244 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    108c:	34 2f       	mov	r19, r20
    108e:	41 31       	cpi	r20, 0x11	; 17
    1090:	08 f0       	brcs	.+2      	; 0x1094 <__vector_11+0x100>
    1092:	30 e1       	ldi	r19, 0x10	; 16
    1094:	23 2f       	mov	r18, r19
    1096:	cb 01       	movw	r24, r22
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <__vector_11+0x112>
				for (i = n; i; i--) {
    109a:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    109c:	01 96       	adiw	r24, 0x01	; 1
    109e:	e4 91       	lpm	r30, Z+
    10a0:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    10a4:	21 50       	subi	r18, 0x01	; 1
    10a6:	22 23       	and	r18, r18
    10a8:	c1 f7       	brne	.-16     	; 0x109a <__vector_11+0x106>
    10aa:	63 0f       	add	r22, r19
    10ac:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    10ae:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10b0:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    10b4:	44 23       	and	r20, r20
    10b6:	f9 f6       	brne	.-66     	; 0x1076 <__vector_11+0xe2>
    10b8:	30 31       	cpi	r19, 0x10	; 16
    10ba:	e9 f2       	breq	.-70     	; 0x1076 <__vector_11+0xe2>
    10bc:	c3 c0       	rjmp	.+390    	; 0x1244 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    10be:	35 30       	cpi	r19, 0x05	; 5
    10c0:	61 f4       	brne	.+24     	; 0x10da <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10c2:	8e ef       	ldi	r24, 0xFE	; 254
    10c4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    10c8:	80 91 e8 00 	lds	r24, 0x00E8
    10cc:	80 ff       	sbrs	r24, 0
    10ce:	fc cf       	rjmp	.-8      	; 0x10c8 <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    10d0:	86 2f       	mov	r24, r22
    10d2:	80 68       	ori	r24, 0x80	; 128
    10d4:	80 93 e3 00 	sts	0x00E3, r24
    10d8:	b5 c0       	rjmp	.+362    	; 0x1244 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    10da:	39 30       	cpi	r19, 0x09	; 9
    10dc:	51 f5       	brne	.+84     	; 0x1132 <__vector_11+0x19e>
    10de:	44 23       	and	r20, r20
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <__vector_11+0x150>
    10e2:	ad c0       	rjmp	.+346    	; 0x123e <__vector_11+0x2aa>
			usb_configuration = wValue;
    10e4:	60 93 08 01 	sts	0x0108, r22
			cdc_line_rtsdtr = 0;
    10e8:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
    10ec:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10f0:	8e ef       	ldi	r24, 0xFE	; 254
    10f2:	80 93 e8 00 	sts	0x00E8, r24
    10f6:	81 e4       	ldi	r24, 0x41	; 65
    10f8:	92 e0       	ldi	r25, 0x02	; 2
    10fa:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    10fc:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    1100:	fc 01       	movw	r30, r24
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	e4 91       	lpm	r30, Z+
				UECONX = en;
    1106:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    110a:	ee 23       	and	r30, r30
    110c:	69 f0       	breq	.+26     	; 0x1128 <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
    110e:	ac 01       	movw	r20, r24
    1110:	4f 5f       	subi	r20, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
    1114:	fc 01       	movw	r30, r24
    1116:	84 91       	lpm	r24, Z+
    1118:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    111c:	ca 01       	movw	r24, r20
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	fa 01       	movw	r30, r20
    1122:	34 91       	lpm	r19, Z+
    1124:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	25 30       	cpi	r18, 0x05	; 5
    112c:	39 f7       	brne	.-50     	; 0x10fc <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    112e:	8e e1       	ldi	r24, 0x1E	; 30
    1130:	81 c0       	rjmp	.+258    	; 0x1234 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1132:	38 30       	cpi	r19, 0x08	; 8
    1134:	61 f4       	brne	.+24     	; 0x114e <__vector_11+0x1ba>
    1136:	40 38       	cpi	r20, 0x80	; 128
    1138:	09 f0       	breq	.+2      	; 0x113c <__vector_11+0x1a8>
    113a:	81 c0       	rjmp	.+258    	; 0x123e <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    113c:	80 91 e8 00 	lds	r24, 0x00E8
    1140:	80 ff       	sbrs	r24, 0
    1142:	fc cf       	rjmp	.-8      	; 0x113c <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1144:	80 91 08 01 	lds	r24, 0x0108
    1148:	80 93 f1 00 	sts	0x00F1, r24
    114c:	50 c0       	rjmp	.+160    	; 0x11ee <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    114e:	31 32       	cpi	r19, 0x21	; 33
    1150:	89 f4       	brne	.+34     	; 0x1174 <__vector_11+0x1e0>
    1152:	41 3a       	cpi	r20, 0xA1	; 161
    1154:	09 f0       	breq	.+2      	; 0x1158 <__vector_11+0x1c4>
    1156:	73 c0       	rjmp	.+230    	; 0x123e <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1158:	80 91 e8 00 	lds	r24, 0x00E8
    115c:	80 ff       	sbrs	r24, 0
    115e:	fc cf       	rjmp	.-8      	; 0x1158 <__vector_11+0x1c4>
    1160:	e0 e0       	ldi	r30, 0x00	; 0
    1162:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1164:	81 91       	ld	r24, Z+
    1166:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	e7 30       	cpi	r30, 0x07	; 7
    116e:	f8 07       	cpc	r31, r24
    1170:	c9 f7       	brne	.-14     	; 0x1164 <__vector_11+0x1d0>
    1172:	3d c0       	rjmp	.+122    	; 0x11ee <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1174:	30 32       	cpi	r19, 0x20	; 32
    1176:	a1 f4       	brne	.+40     	; 0x11a0 <__vector_11+0x20c>
    1178:	41 32       	cpi	r20, 0x21	; 33
    117a:	09 f0       	breq	.+2      	; 0x117e <__vector_11+0x1ea>
    117c:	60 c0       	rjmp	.+192    	; 0x123e <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    117e:	80 91 e8 00 	lds	r24, 0x00E8
    1182:	82 ff       	sbrs	r24, 2
    1184:	fc cf       	rjmp	.-8      	; 0x117e <__vector_11+0x1ea>
    1186:	e0 e0       	ldi	r30, 0x00	; 0
    1188:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    118a:	80 91 f1 00 	lds	r24, 0x00F1
    118e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	e7 30       	cpi	r30, 0x07	; 7
    1194:	f8 07       	cpc	r31, r24
    1196:	c9 f7       	brne	.-14     	; 0x118a <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1198:	8b ef       	ldi	r24, 0xFB	; 251
    119a:	80 93 e8 00 	sts	0x00E8, r24
    119e:	27 c0       	rjmp	.+78     	; 0x11ee <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    11a0:	32 32       	cpi	r19, 0x22	; 34
    11a2:	51 f4       	brne	.+20     	; 0x11b8 <__vector_11+0x224>
    11a4:	41 32       	cpi	r20, 0x21	; 33
    11a6:	09 f0       	breq	.+2      	; 0x11aa <__vector_11+0x216>
    11a8:	4a c0       	rjmp	.+148    	; 0x123e <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    11aa:	60 93 09 01 	sts	0x0109, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    11ae:	80 91 e8 00 	lds	r24, 0x00E8
    11b2:	80 ff       	sbrs	r24, 0
    11b4:	fc cf       	rjmp	.-8      	; 0x11ae <__vector_11+0x21a>
    11b6:	1b c0       	rjmp	.+54     	; 0x11ee <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    11b8:	33 23       	and	r19, r19
    11ba:	e9 f4       	brne	.+58     	; 0x11f6 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    11bc:	80 91 e8 00 	lds	r24, 0x00E8
    11c0:	80 ff       	sbrs	r24, 0
    11c2:	fc cf       	rjmp	.-8      	; 0x11bc <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    11c4:	42 38       	cpi	r20, 0x82	; 130
    11c6:	11 f0       	breq	.+4      	; 0x11cc <__vector_11+0x238>
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	0d c0       	rjmp	.+26     	; 0x11e6 <__vector_11+0x252>
				UENUM = wIndex;
    11cc:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    11d0:	80 91 eb 00 	lds	r24, 0x00EB
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	25 e0       	ldi	r18, 0x05	; 5
    11d8:	96 95       	lsr	r25
    11da:	87 95       	ror	r24
    11dc:	2a 95       	dec	r18
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <__vector_11+0x244>
    11e0:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    11e2:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    11e6:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    11ea:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    11ee:	8e ef       	ldi	r24, 0xFE	; 254
    11f0:	80 93 e8 00 	sts	0x00E8, r24
    11f4:	27 c0       	rjmp	.+78     	; 0x1244 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    11f6:	31 30       	cpi	r19, 0x01	; 1
    11f8:	11 f0       	breq	.+4      	; 0x11fe <__vector_11+0x26a>
    11fa:	33 30       	cpi	r19, 0x03	; 3
    11fc:	01 f5       	brne	.+64     	; 0x123e <__vector_11+0x2aa>
    11fe:	42 30       	cpi	r20, 0x02	; 2
    1200:	f1 f4       	brne	.+60     	; 0x123e <__vector_11+0x2aa>
    1202:	67 2b       	or	r22, r23
    1204:	e1 f4       	brne	.+56     	; 0x123e <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    1206:	2a 2f       	mov	r18, r26
    1208:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    120a:	82 2f       	mov	r24, r18
    120c:	81 50       	subi	r24, 0x01	; 1
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	b0 f4       	brcc	.+44     	; 0x123e <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1212:	8e ef       	ldi	r24, 0xFE	; 254
    1214:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1218:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    121c:	33 30       	cpi	r19, 0x03	; 3
    121e:	79 f0       	breq	.+30     	; 0x123e <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1220:	89 e1       	ldi	r24, 0x19	; 25
    1222:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <__vector_11+0x29c>
    122c:	88 0f       	add	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <__vector_11+0x298>
    1234:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    1238:	10 92 ea 00 	sts	0x00EA, r1
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    123e:	81 e2       	ldi	r24, 0x21	; 33
    1240:	80 93 eb 00 	sts	0x00EB, r24
}
    1244:	ff 91       	pop	r31
    1246:	ef 91       	pop	r30
    1248:	bf 91       	pop	r27
    124a:	af 91       	pop	r26
    124c:	9f 91       	pop	r25
    124e:	8f 91       	pop	r24
    1250:	7f 91       	pop	r23
    1252:	6f 91       	pop	r22
    1254:	5f 91       	pop	r21
    1256:	4f 91       	pop	r20
    1258:	3f 91       	pop	r19
    125a:	2f 91       	pop	r18
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <adc_start>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
    126a:	ea e7       	ldi	r30, 0x7A	; 122
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	96 e8       	ldi	r25, 0x86	; 134
    1270:	90 83       	st	Z, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
    1272:	98 2f       	mov	r25, r24
    1274:	90 72       	andi	r25, 0x20	; 32
    1276:	90 68       	ori	r25, 0x80	; 128
    1278:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
    127c:	8f 71       	andi	r24, 0x1F	; 31
    127e:	86 2b       	or	r24, r22
    1280:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
    1284:	10 92 0c 01 	sts	0x010C, r1
	tail = 0;				// and then begin auto trigger mode
    1288:	10 92 0d 01 	sts	0x010D, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
    128c:	8e ee       	ldi	r24, 0xEE	; 238
    128e:	80 83       	st	Z, r24
	sei();
    1290:	78 94       	sei
}
    1292:	08 95       	ret

00001294 <adc_read>:
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
    1294:	80 91 0c 01 	lds	r24, 0x010C
		t = tail;		// wait for data in buffer
    1298:	e0 91 0d 01 	lds	r30, 0x010D
	} while (h == t);
    129c:	8e 17       	cp	r24, r30
    129e:	d1 f3       	breq	.-12     	; 0x1294 <adc_read>
	if (++t >= BUFSIZE) t = 0;
    12a0:	8e 2f       	mov	r24, r30
    12a2:	8f 5f       	subi	r24, 0xFF	; 255
    12a4:	82 30       	cpi	r24, 0x02	; 2
    12a6:	08 f0       	brcs	.+2      	; 0x12aa <adc_read+0x16>
    12a8:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
    12aa:	e8 2f       	mov	r30, r24
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	ee 0f       	add	r30, r30
    12b0:	ff 1f       	adc	r31, r31
    12b2:	e2 5f       	subi	r30, 0xF2	; 242
    12b4:	fe 4f       	sbci	r31, 0xFE	; 254
    12b6:	20 81       	ld	r18, Z
    12b8:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
    12ba:	80 93 0d 01 	sts	0x010D, r24
	return val;
}
    12be:	c9 01       	movw	r24, r18
    12c0:	08 95       	ret

000012c2 <__vector_29>:

ISR(ADC_vect)
{
    12c2:	1f 92       	push	r1
    12c4:	0f 92       	push	r0
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	0f 92       	push	r0
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 93       	push	r18
    12ce:	3f 93       	push	r19
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	ef 93       	push	r30
    12d6:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
    12d8:	20 91 78 00 	lds	r18, 0x0078
    12dc:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
    12e0:	90 91 0c 01 	lds	r25, 0x010C
    12e4:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
    12e6:	92 30       	cpi	r25, 0x02	; 2
    12e8:	08 f0       	brcs	.+2      	; 0x12ec <__vector_29+0x2a>
    12ea:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
    12ec:	80 91 0d 01 	lds	r24, 0x010D
    12f0:	98 17       	cp	r25, r24
    12f2:	51 f0       	breq	.+20     	; 0x1308 <__vector_29+0x46>
		buffer[h] = val;	// put new data into buffer
    12f4:	e9 2f       	mov	r30, r25
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e2 5f       	subi	r30, 0xF2	; 242
    12fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1300:	31 83       	std	Z+1, r19	; 0x01
    1302:	20 83       	st	Z, r18
		head = h;
    1304:	90 93 0c 01 	sts	0x010C, r25
	}
}
    1308:	ff 91       	pop	r31
    130a:	ef 91       	pop	r30
    130c:	9f 91       	pop	r25
    130e:	8f 91       	pop	r24
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	0f 90       	pop	r0
    131a:	1f 90       	pop	r1
    131c:	18 95       	reti

0000131e <_exit>:
    131e:	f8 94       	cli

00001320 <__stop_program>:
    1320:	ff cf       	rjmp	.-2      	; 0x1320 <__stop_program>
