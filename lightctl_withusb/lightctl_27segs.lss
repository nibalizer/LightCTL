
lightctl_27segs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800108  00800108  0000082a  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000110  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000027c  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000c17  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000039c  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010c6  00000000  00000000  00002273  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000333c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000048e  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000bc0  00000000  00000000  000039aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000118  00000000  00000000  0000456a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	} while (h == t);
	if (++t >= BUFSIZE) t = 0;
	val = buffer[t];		// remove 1 sample from buffer
	tail = t;
	return val;
}
   0:	ba c0       	rjmp	.+372    	; 0x176 <__ctors_end>
	UEDATX = signals;
	UEDATX = 0;
	UEINTX = 0x3A;
	SREG = intr_state;
	return 0;
}
   2:	00 00       	nop
   4:	d3 c0       	rjmp	.+422    	; 0x1ac <__bad_interrupt>
   6:	00 00       	nop
   8:	d1 c0       	rjmp	.+418    	; 0x1ac <__bad_interrupt>
   a:	00 00       	nop
   c:	cf c0       	rjmp	.+414    	; 0x1ac <__bad_interrupt>
   e:	00 00       	nop
  10:	cd c0       	rjmp	.+410    	; 0x1ac <__bad_interrupt>
  12:	00 00       	nop
  14:	cb c0       	rjmp	.+406    	; 0x1ac <__bad_interrupt>
  16:	00 00       	nop
  18:	c9 c0       	rjmp	.+402    	; 0x1ac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c7 c0       	rjmp	.+398    	; 0x1ac <__bad_interrupt>
  1e:	00 00       	nop
  20:	c5 c0       	rjmp	.+394    	; 0x1ac <__bad_interrupt>
  22:	00 00       	nop
  24:	c3 c0       	rjmp	.+390    	; 0x1ac <__bad_interrupt>
  26:	00 00       	nop
  28:	e3 c1       	rjmp	.+966    	; 0x3f0 <__vector_10>
  2a:	00 00       	nop
  2c:	1c c2       	rjmp	.+1080   	; 0x466 <__vector_11>
  2e:	00 00       	nop
  30:	bd c0       	rjmp	.+378    	; 0x1ac <__bad_interrupt>
  32:	00 00       	nop
  34:	bb c0       	rjmp	.+374    	; 0x1ac <__bad_interrupt>
  36:	00 00       	nop
  38:	b9 c0       	rjmp	.+370    	; 0x1ac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b7 c0       	rjmp	.+366    	; 0x1ac <__bad_interrupt>
  3e:	00 00       	nop
  40:	b5 c0       	rjmp	.+362    	; 0x1ac <__bad_interrupt>
  42:	00 00       	nop
  44:	b3 c0       	rjmp	.+358    	; 0x1ac <__bad_interrupt>
  46:	00 00       	nop
  48:	b1 c0       	rjmp	.+354    	; 0x1ac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	af c0       	rjmp	.+350    	; 0x1ac <__bad_interrupt>
  4e:	00 00       	nop
  50:	ad c0       	rjmp	.+346    	; 0x1ac <__bad_interrupt>
  52:	00 00       	nop
  54:	ab c0       	rjmp	.+342    	; 0x1ac <__bad_interrupt>
  56:	00 00       	nop
  58:	a9 c0       	rjmp	.+338    	; 0x1ac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a7 c0       	rjmp	.+334    	; 0x1ac <__bad_interrupt>
  5e:	00 00       	nop
  60:	a5 c0       	rjmp	.+330    	; 0x1ac <__bad_interrupt>
  62:	00 00       	nop
  64:	a3 c0       	rjmp	.+326    	; 0x1ac <__bad_interrupt>
  66:	00 00       	nop
  68:	a1 c0       	rjmp	.+322    	; 0x1ac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9f c0       	rjmp	.+318    	; 0x1ac <__bad_interrupt>
  6e:	00 00       	nop
  70:	9d c0       	rjmp	.+314    	; 0x1ac <__bad_interrupt>
  72:	00 00       	nop
  74:	9c c0       	rjmp	.+312    	; 0x1ae <__vector_29>
  76:	00 00       	nop
  78:	99 c0       	rjmp	.+306    	; 0x1ac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	97 c0       	rjmp	.+302    	; 0x1ac <__bad_interrupt>
  7e:	00 00       	nop
  80:	95 c0       	rjmp	.+298    	; 0x1ac <__bad_interrupt>
  82:	00 00       	nop
  84:	93 c0       	rjmp	.+294    	; 0x1ac <__bad_interrupt>
  86:	00 00       	nop
  88:	91 c0       	rjmp	.+290    	; 0x1ac <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8f c0       	rjmp	.+286    	; 0x1ac <__bad_interrupt>
  8e:	00 00       	nop
  90:	8d c0       	rjmp	.+282    	; 0x1ac <__bad_interrupt>
  92:	00 00       	nop
  94:	8b c0       	rjmp	.+278    	; 0x1ac <__bad_interrupt>
  96:	00 00       	nop
  98:	89 c0       	rjmp	.+274    	; 0x1ac <__bad_interrupt>
  9a:	00 00       	nop
  9c:	87 c0       	rjmp	.+270    	; 0x1ac <__bad_interrupt>
  9e:	00 00       	nop
  a0:	85 c0       	rjmp	.+266    	; 0x1ac <__bad_interrupt>
  a2:	00 00       	nop
  a4:	83 c0       	rjmp	.+262    	; 0x1ac <__bad_interrupt>
  a6:	00 00       	nop
  a8:	81 c0       	rjmp	.+258    	; 0x1ac <__bad_interrupt>
  aa:	00 00       	nop

000000ac <descriptor_list>:
  ac:	00 01 00 00 e0 00 12 00 02 00 00 f2 00 43 00 03     .............C..
  bc:	00 00 35 01 04 01 03 09 04 39 01 14 02 03 09 04     ..5......9......
  cc:	4f 01 16 03 03 09 04 67 01 0c                       O......g..

000000d6 <endpoint_config_table>:
  d6:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000000e0 <device_descriptor>:
  e0:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
  f0:	03 01                                               ..

000000f2 <config1_descriptor>:
  f2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 102:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 112:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 122:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 132:	40 00 00                                            @..

00000135 <string0>:
 135:	04 03 09 04                                         ....

00000139 <string1>:
 139:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 149:	6d 00 65 00 00 00                                   m.e...

0000014f <string2>:
 14f:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 15f:	69 00 61 00 6c 00 00 00                             i.a.l...

00000167 <string3>:
 167:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00 00        ..1.2.3.4.5....

00000176 <__ctors_end>:
 176:	11 24       	eor	r1, r1
 178:	1f be       	out	0x3f, r1	; 63
 17a:	cf ef       	ldi	r28, 0xFF	; 255
 17c:	da e0       	ldi	r29, 0x0A	; 10
 17e:	de bf       	out	0x3e, r29	; 62
 180:	cd bf       	out	0x3d, r28	; 61

00000182 <__do_copy_data>:
 182:	11 e0       	ldi	r17, 0x01	; 1
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b1 e0       	ldi	r27, 0x01	; 1
 188:	ee e8       	ldi	r30, 0x8E	; 142
 18a:	f7 e0       	ldi	r31, 0x07	; 7
 18c:	02 c0       	rjmp	.+4      	; 0x192 <.do_copy_data_start>

0000018e <.do_copy_data_loop>:
 18e:	05 90       	lpm	r0, Z+
 190:	0d 92       	st	X+, r0

00000192 <.do_copy_data_start>:
 192:	a8 30       	cpi	r26, 0x08	; 8
 194:	b1 07       	cpc	r27, r17
 196:	d9 f7       	brne	.-10     	; 0x18e <.do_copy_data_loop>

00000198 <__do_clear_bss>:
 198:	11 e0       	ldi	r17, 0x01	; 1
 19a:	a8 e0       	ldi	r26, 0x08	; 8
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <.do_clear_bss_start>

000001a0 <.do_clear_bss_loop>:
 1a0:	1d 92       	st	X+, r1

000001a2 <.do_clear_bss_start>:
 1a2:	a4 31       	cpi	r26, 0x14	; 20
 1a4:	b1 07       	cpc	r27, r17
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <.do_clear_bss_loop>
 1a8:	17 d1       	rcall	.+558    	; 0x3d8 <main>
 1aa:	ef c2       	rjmp	.+1502   	; 0x78a <_exit>

000001ac <__bad_interrupt>:
 1ac:	29 cf       	rjmp	.-430    	; 0x0 <__vectors>

000001ae <__vector_29>:

ISR(ADC_vect)
{
 1ae:	1f 92       	push	r1
 1b0:	0f 92       	push	r0
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	0f 92       	push	r0
 1b6:	11 24       	eor	r1, r1
 1b8:	2f 93       	push	r18
 1ba:	3f 93       	push	r19
 1bc:	8f 93       	push	r24
 1be:	9f 93       	push	r25
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
 1c4:	20 91 78 00 	lds	r18, 0x0078
 1c8:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
 1cc:	90 91 08 01 	lds	r25, 0x0108
 1d0:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
 1d2:	92 30       	cpi	r25, 0x02	; 2
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <__vector_29+0x2a>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
 1d8:	80 91 09 01 	lds	r24, 0x0109
 1dc:	98 17       	cp	r25, r24
 1de:	51 f0       	breq	.+20     	; 0x1f4 <__vector_29+0x46>
		buffer[h] = val;	// put new data into buffer
 1e0:	e9 2f       	mov	r30, r25
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	ee 0f       	add	r30, r30
 1e6:	ff 1f       	adc	r31, r31
 1e8:	e6 5f       	subi	r30, 0xF6	; 246
 1ea:	fe 4f       	sbci	r31, 0xFE	; 254
 1ec:	31 83       	std	Z+1, r19	; 0x01
 1ee:	20 83       	st	Z, r18
		head = h;
 1f0:	90 93 08 01 	sts	0x0108, r25
	}
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	3f 91       	pop	r19
 1fe:	2f 91       	pop	r18
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <read_sensor>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
 20a:	86 e8       	ldi	r24, 0x86	; 134
 20c:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
 216:	80 e4       	ldi	r24, 0x40	; 64
 218:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
 21c:	10 92 08 01 	sts	0x0108, r1
	tail = 0;				// and then begin auto trigger mode
 220:	10 92 09 01 	sts	0x0109, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
 224:	8e ee       	ldi	r24, 0xEE	; 238
 226:	80 93 7a 00 	sts	0x007A, r24
	sei();
 22a:	78 94       	sei
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
 22c:	80 91 08 01 	lds	r24, 0x0108
		t = tail;		// wait for data in buffer
 230:	e0 91 09 01 	lds	r30, 0x0109
	} while (h == t);
 234:	8e 17       	cp	r24, r30
 236:	d1 f3       	breq	.-12     	; 0x22c <read_sensor+0x22>
	if (++t >= BUFSIZE) t = 0;
 238:	8e 2f       	mov	r24, r30
 23a:	8f 5f       	subi	r24, 0xFF	; 255
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	08 f0       	brcs	.+2      	; 0x242 <read_sensor+0x38>
 240:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
 242:	e8 2f       	mov	r30, r24
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	e6 5f       	subi	r30, 0xF6	; 246
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	20 81       	ld	r18, Z
 250:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
 252:	80 93 09 01 	sts	0x0109, r24
uint16_t read_sensor(void){
	uint16_t val;
	adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
	val = adc_read();
	return val;
}
 256:	c9 01       	movw	r24, r18
 258:	08 95       	ret

0000025a <set_display>:

void set_display(uint16_t val)
{
	int val_ = val;
	uint8_t high, low;
	val_ /= 4;
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	6e d2       	rcall	.+1244   	; 0x73c <__divmodhi4>
 260:	26 2f       	mov	r18, r22
 262:	97 2f       	mov	r25, r23
	high = val_ / 16;
 264:	86 2f       	mov	r24, r22
 266:	60 e1       	ldi	r22, 0x10	; 16
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	68 d2       	rcall	.+1232   	; 0x73c <__divmodhi4>
	low = (val_ - (high * 16));
	HIGHBIT = high;
 26c:	60 93 12 01 	sts	0x0112, r22
	LOWBIT = low;
 270:	86 2f       	mov	r24, r22
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	34 e0       	ldi	r19, 0x04	; 4
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	3a 95       	dec	r19
 27c:	e1 f7       	brne	.-8      	; 0x276 <set_display+0x1c>
 27e:	28 1b       	sub	r18, r24
 280:	20 93 13 01 	sts	0x0113, r18
}
 284:	08 95       	ret

00000286 <display_num>:

void display_num(uint8_t number)
{
	uint8_t full = 255;
	uint8_t off  = 0;
	switch(number)
 286:	88 30       	cpi	r24, 0x08	; 8
 288:	09 f4       	brne	.+2      	; 0x28c <display_num+0x6>
 28a:	57 c0       	rjmp	.+174    	; 0x33a <display_num+0xb4>
 28c:	89 30       	cpi	r24, 0x09	; 9
 28e:	88 f4       	brcc	.+34     	; 0x2b2 <display_num+0x2c>
 290:	83 30       	cpi	r24, 0x03	; 3
 292:	b9 f1       	breq	.+110    	; 0x302 <display_num+0x7c>
 294:	84 30       	cpi	r24, 0x04	; 4
 296:	28 f4       	brcc	.+10     	; 0x2a2 <display_num+0x1c>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	21 f1       	breq	.+72     	; 0x2e4 <display_num+0x5e>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	40 f5       	brcc	.+80     	; 0x2f0 <display_num+0x6a>
 2a0:	61 c0       	rjmp	.+194    	; 0x364 <display_num+0xde>
 2a2:	85 30       	cpi	r24, 0x05	; 5
 2a4:	c1 f1       	breq	.+112    	; 0x316 <display_num+0x90>
 2a6:	85 30       	cpi	r24, 0x05	; 5
 2a8:	98 f1       	brcs	.+102    	; 0x310 <display_num+0x8a>
 2aa:	87 30       	cpi	r24, 0x07	; 7
 2ac:	09 f0       	breq	.+2      	; 0x2b0 <display_num+0x2a>
 2ae:	6d c0       	rjmp	.+218    	; 0x38a <display_num+0x104>
 2b0:	3b c0       	rjmp	.+118    	; 0x328 <display_num+0xa2>
 2b2:	8c 30       	cpi	r24, 0x0C	; 12
 2b4:	09 f4       	brne	.+2      	; 0x2b8 <display_num+0x32>
 2b6:	56 c0       	rjmp	.+172    	; 0x364 <display_num+0xde>
 2b8:	8d 30       	cpi	r24, 0x0D	; 13
 2ba:	38 f4       	brcc	.+14     	; 0x2ca <display_num+0x44>
 2bc:	8a 30       	cpi	r24, 0x0A	; 10
 2be:	09 f4       	brne	.+2      	; 0x2c2 <display_num+0x3c>
 2c0:	51 c0       	rjmp	.+162    	; 0x364 <display_num+0xde>
 2c2:	8b 30       	cpi	r24, 0x0B	; 11
 2c4:	08 f0       	brcs	.+2      	; 0x2c8 <display_num+0x42>
 2c6:	4e c0       	rjmp	.+156    	; 0x364 <display_num+0xde>
 2c8:	40 c0       	rjmp	.+128    	; 0x34a <display_num+0xc4>
 2ca:	8e 30       	cpi	r24, 0x0E	; 14
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <display_num+0x4a>
 2ce:	4a c0       	rjmp	.+148    	; 0x364 <display_num+0xde>
 2d0:	8e 30       	cpi	r24, 0x0E	; 14
 2d2:	08 f4       	brcc	.+2      	; 0x2d6 <display_num+0x50>
 2d4:	47 c0       	rjmp	.+142    	; 0x364 <display_num+0xde>
 2d6:	8f 30       	cpi	r24, 0x0F	; 15
 2d8:	09 f4       	brne	.+2      	; 0x2dc <display_num+0x56>
 2da:	44 c0       	rjmp	.+136    	; 0x364 <display_num+0xde>
 2dc:	80 31       	cpi	r24, 0x10	; 16
 2de:	09 f0       	breq	.+2      	; 0x2e2 <display_num+0x5c>
 2e0:	54 c0       	rjmp	.+168    	; 0x38a <display_num+0x104>
 2e2:	4a c0       	rjmp	.+148    	; 0x378 <display_num+0xf2>
			OCR1A = off;
			OCR2A = off;
			OCR2B = off;
			break;
		case 1:
			OCR0B = off;
 2e4:	18 bc       	out	0x28, r1	; 40
			OCR1A = off;
 2e6:	10 92 89 00 	sts	0x0089, r1
 2ea:	10 92 88 00 	sts	0x0088, r1
 2ee:	34 c0       	rjmp	.+104    	; 0x358 <display_num+0xd2>
			OCR2A = off;
			OCR2B = full;
			break;
		case 2:
			OCR0B = off;
 2f0:	18 bc       	out	0x28, r1	; 40
			OCR1A = off;
 2f2:	10 92 89 00 	sts	0x0089, r1
 2f6:	10 92 88 00 	sts	0x0088, r1
			OCR2A = full;
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	80 93 b3 00 	sts	0x00B3, r24
 300:	38 c0       	rjmp	.+112    	; 0x372 <display_num+0xec>
			OCR2B = off;
			break;
		case 3:
			OCR0B = off;
 302:	18 bc       	out	0x28, r1	; 40
			OCR1A = off;
 304:	10 92 89 00 	sts	0x0089, r1
 308:	10 92 88 00 	sts	0x0088, r1
			OCR2A = full;
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	12 c0       	rjmp	.+36     	; 0x334 <display_num+0xae>
			OCR2B = full;
			break;
		case 4:
			OCR0B = full;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	88 bd       	out	0x28, r24	; 40
 314:	28 c0       	rjmp	.+80     	; 0x366 <display_num+0xe0>
			OCR1A = off;
			OCR2A = off;
			OCR2B = off;
			break;
		case 5:
			OCR0B = full;
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	88 bd       	out	0x28, r24	; 40
			OCR1A = off;
 31a:	10 92 89 00 	sts	0x0089, r1
 31e:	10 92 88 00 	sts	0x0088, r1
			OCR2A = off;
 322:	10 92 b3 00 	sts	0x00B3, r1
 326:	1b c0       	rjmp	.+54     	; 0x35e <display_num+0xd8>
			OCR2B = full;
			break;
		case 7:
			OCR0B = full;
 328:	8f ef       	ldi	r24, 0xFF	; 255
 32a:	88 bd       	out	0x28, r24	; 40
			OCR1A = off;
 32c:	10 92 89 00 	sts	0x0089, r1
 330:	10 92 88 00 	sts	0x0088, r1
			OCR2A = full;
 334:	80 93 b3 00 	sts	0x00B3, r24
 338:	12 c0       	rjmp	.+36     	; 0x35e <display_num+0xd8>
			OCR2B = full;
			break;
		case 8:
			OCR0B = off;
 33a:	18 bc       	out	0x28, r1	; 40
			OCR1A = full;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 89 00 	sts	0x0089, r25
 344:	80 93 88 00 	sts	0x0088, r24
 348:	12 c0       	rjmp	.+36     	; 0x36e <display_num+0xe8>
			OCR2A = off;
			OCR2B = off;
			break;
		case 9:
			OCR0B = off;
 34a:	18 bc       	out	0x28, r1	; 40
			OCR1A = full;
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	90 93 89 00 	sts	0x0089, r25
 354:	80 93 88 00 	sts	0x0088, r24
			OCR2A = off;
 358:	10 92 b3 00 	sts	0x00B3, r1
			OCR2B = full;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	80 93 b4 00 	sts	0x00B4, r24
 362:	08 95       	ret
			OCR1A = off;
			OCR2A = off;
			OCR2B = off;
			break;
		case 15:
			OCR0B = off;
 364:	18 bc       	out	0x28, r1	; 40
			OCR1A = off;
 366:	10 92 89 00 	sts	0x0089, r1
 36a:	10 92 88 00 	sts	0x0088, r1
			OCR2A = off;
 36e:	10 92 b3 00 	sts	0x00B3, r1
			OCR2B = off;
 372:	10 92 b4 00 	sts	0x00B4, r1
 376:	08 95       	ret
			break;
		case 16:
			OCR0B = off;
 378:	18 bc       	out	0x28, r1	; 40
			OCR1A = off;
 37a:	10 92 89 00 	sts	0x0089, r1
 37e:	10 92 88 00 	sts	0x0088, r1
			OCR2A = off;
 382:	10 92 b3 00 	sts	0x00B3, r1
			OCR2B = off;
 386:	10 92 b4 00 	sts	0x00B4, r1
 38a:	08 95       	ret

0000038c <display>:

void display(void){
	uint8_t full = 255;
	uint8_t off = 0;
	
	OCR0A = full;
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	87 bd       	out	0x27, r24	; 39
	display_num(HIGHBIT);
 390:	80 91 12 01 	lds	r24, 0x0112
 394:	78 df       	rcall	.-272    	; 0x286 <display_num>
	OCR0A = off;
 396:	17 bc       	out	0x27, r1	; 39
	display_num(LOWBIT);
 398:	80 91 13 01 	lds	r24, 0x0113
	
}
 39c:	74 cf       	rjmp	.-280    	; 0x286 <display_num>

0000039e <setup_pwms>:
	//TODO figure out what the f*** is going on here
	//TODO become a bittwidddling mastah

	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
 39e:	84 b1       	in	r24, 0x04	; 4
 3a0:	80 6f       	ori	r24, 0xF0	; 240
 3a2:	84 b9       	out	0x04, r24	; 4
//	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
	DDRD |= (1 << DDD0) | (1 << DDD1);
 3a4:	8a b1       	in	r24, 0x0a	; 10
 3a6:	83 60       	ori	r24, 0x03	; 3
 3a8:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
 3aa:	93 ea       	ldi	r25, 0xA3	; 163
 3ac:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 3b2:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
 3b6:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 3ba:	91 ea       	ldi	r25, 0xA1	; 161
 3bc:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
 3c0:	89 e0       	ldi	r24, 0x09	; 9
 3c2:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
 3c6:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
 3ca:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
 3ce:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
 3d2:	10 92 92 00 	sts	0x0092, r1
}
 3d6:	08 95       	ret

000003d8 <main>:

int main(void)
{
	uint8_t val;

	CPU_PRESCALE(2); //why?
 3d8:	80 e8       	ldi	r24, 0x80	; 128
 3da:	80 93 61 00 	sts	0x0061, r24
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();  
 3e4:	dc df       	rcall	.-72     	; 0x39e <setup_pwms>
	
	while(1){
		val = read_sensor();
 3e6:	11 df       	rcall	.-478    	; 0x20a <read_sensor>
		set_display(val);
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	37 df       	rcall	.-402    	; 0x25a <set_display>
		display();
 3ec:	cf df       	rcall	.-98     	; 0x38c <display>
 3ee:	fb cf       	rjmp	.-10     	; 0x3e6 <main+0xe>

000003f0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 3f0:	1f 92       	push	r1
 3f2:	0f 92       	push	r0
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	0f 92       	push	r0
 3f8:	11 24       	eor	r1, r1
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 3fe:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 402:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 406:	98 2f       	mov	r25, r24
 408:	83 ff       	sbrs	r24, 3
 40a:	11 c0       	rjmp	.+34     	; 0x42e <__vector_10+0x3e>
		UENUM = 0;
 40c:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 416:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 41a:	82 e1       	ldi	r24, 0x12	; 18
 41c:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 420:	88 e0       	ldi	r24, 0x08	; 8
 422:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 426:	10 92 0e 01 	sts	0x010E, r1
		cdc_line_rtsdtr = 0;
 42a:	10 92 0f 01 	sts	0x010F, r1
        }
	if (intbits & (1<<SOFI)) {
 42e:	92 ff       	sbrs	r25, 2
 430:	13 c0       	rjmp	.+38     	; 0x458 <__vector_10+0x68>
		if (usb_configuration) {
 432:	80 91 0e 01 	lds	r24, 0x010E
 436:	88 23       	and	r24, r24
 438:	79 f0       	breq	.+30     	; 0x458 <__vector_10+0x68>
			t = transmit_flush_timer;
 43a:	80 91 10 01 	lds	r24, 0x0110
			if (t) {
 43e:	88 23       	and	r24, r24
 440:	59 f0       	breq	.+22     	; 0x458 <__vector_10+0x68>
				transmit_flush_timer = --t;
 442:	81 50       	subi	r24, 0x01	; 1
 444:	80 93 10 01 	sts	0x0110, r24
				if (!t) {
 448:	88 23       	and	r24, r24
 44a:	31 f4       	brne	.+12     	; 0x458 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 452:	8a e3       	ldi	r24, 0x3A	; 58
 454:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 458:	9f 91       	pop	r25
 45a:	8f 91       	pop	r24
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 48c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 490:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 494:	83 ff       	sbrs	r24, 3
 496:	3c c1       	rjmp	.+632    	; 0x710 <__vector_11+0x2aa>
                bmRequestType = UEDATX;
 498:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 49c:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 4a0:	80 91 f1 00 	lds	r24, 0x00F1
 4a4:	68 2f       	mov	r22, r24
 4a6:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 4a8:	20 91 f1 00 	lds	r18, 0x00F1
 4ac:	92 2f       	mov	r25, r18
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	68 2b       	or	r22, r24
 4b2:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 4b4:	80 91 f1 00 	lds	r24, 0x00F1
 4b8:	a8 2f       	mov	r26, r24
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 4bc:	20 91 f1 00 	lds	r18, 0x00F1
 4c0:	92 2f       	mov	r25, r18
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	a8 2b       	or	r26, r24
 4c6:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 4c8:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 4cc:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 4d0:	82 ef       	ldi	r24, 0xF2	; 242
 4d2:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 4d6:	36 30       	cpi	r19, 0x06	; 6
 4d8:	09 f0       	breq	.+2      	; 0x4dc <__vector_11+0x76>
 4da:	5a c0       	rjmp	.+180    	; 0x590 <__vector_11+0x12a>
 4dc:	23 eb       	ldi	r18, 0xB3	; 179
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	a9 01       	movw	r20, r18
 4e2:	45 50       	subi	r20, 0x05	; 5
 4e4:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 4e6:	f9 01       	movw	r30, r18
 4e8:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 4ea:	85 91       	lpm	r24, Z+
 4ec:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 4ee:	86 17       	cp	r24, r22
 4f0:	97 07       	cpc	r25, r23
 4f2:	01 f5       	brne	.+64     	; 0x534 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 4f4:	fa 01       	movw	r30, r20
 4f6:	85 91       	lpm	r24, Z+
 4f8:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 4fa:	8a 17       	cp	r24, r26
 4fc:	9b 07       	cpc	r25, r27
 4fe:	d1 f4       	brne	.+52     	; 0x534 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 500:	9a 01       	movw	r18, r20
 502:	2e 5f       	subi	r18, 0xFE	; 254
 504:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 506:	f9 01       	movw	r30, r18
 508:	65 91       	lpm	r22, Z+
 50a:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 50c:	2e 5f       	subi	r18, 0xFE	; 254
 50e:	3f 4f       	sbci	r19, 0xFF	; 255
 510:	f9 01       	movw	r30, r18
 512:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 514:	21 2f       	mov	r18, r17
 516:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 518:	90 2f       	mov	r25, r16
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	28 2b       	or	r18, r24
 51e:	39 2b       	or	r19, r25
 520:	2f 3f       	cpi	r18, 0xFF	; 255
 522:	31 05       	cpc	r19, r1
 524:	19 f0       	breq	.+6      	; 0x52c <__vector_11+0xc6>
 526:	10 f0       	brcs	.+4      	; 0x52c <__vector_11+0xc6>
 528:	2f ef       	ldi	r18, 0xFF	; 255
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	24 17       	cp	r18, r20
 52e:	58 f4       	brcc	.+22     	; 0x546 <__vector_11+0xe0>
 530:	42 2f       	mov	r20, r18
 532:	09 c0       	rjmp	.+18     	; 0x546 <__vector_11+0xe0>
 534:	29 5f       	subi	r18, 0xF9	; 249
 536:	3f 4f       	sbci	r19, 0xFF	; 255
 538:	49 5f       	subi	r20, 0xF9	; 249
 53a:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	2d 3d       	cpi	r18, 0xDD	; 221
 540:	3f 07       	cpc	r19, r31
 542:	89 f6       	brne	.-94     	; 0x4e6 <__vector_11+0x80>
 544:	e5 c0       	rjmp	.+458    	; 0x710 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 546:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 548:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	c9 01       	movw	r24, r18
 552:	85 70       	andi	r24, 0x05	; 5
 554:	90 70       	andi	r25, 0x00	; 0
 556:	89 2b       	or	r24, r25
 558:	b9 f3       	breq	.-18     	; 0x548 <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
 55a:	22 fd       	sbrc	r18, 2
 55c:	dc c0       	rjmp	.+440    	; 0x716 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 55e:	34 2f       	mov	r19, r20
 560:	41 31       	cpi	r20, 0x11	; 17
 562:	08 f0       	brcs	.+2      	; 0x566 <__vector_11+0x100>
 564:	30 e1       	ldi	r19, 0x10	; 16
 566:	23 2f       	mov	r18, r19
 568:	cb 01       	movw	r24, r22
 56a:	06 c0       	rjmp	.+12     	; 0x578 <__vector_11+0x112>
				for (i = n; i; i--) {
 56c:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	e4 91       	lpm	r30, Z+
 572:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 576:	21 50       	subi	r18, 0x01	; 1
 578:	22 23       	and	r18, r18
 57a:	c1 f7       	brne	.-16     	; 0x56c <__vector_11+0x106>
 57c:	63 0f       	add	r22, r19
 57e:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 580:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 582:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 586:	44 23       	and	r20, r20
 588:	f9 f6       	brne	.-66     	; 0x548 <__vector_11+0xe2>
 58a:	30 31       	cpi	r19, 0x10	; 16
 58c:	e9 f2       	breq	.-70     	; 0x548 <__vector_11+0xe2>
 58e:	c3 c0       	rjmp	.+390    	; 0x716 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 590:	35 30       	cpi	r19, 0x05	; 5
 592:	61 f4       	brne	.+24     	; 0x5ac <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 594:	8e ef       	ldi	r24, 0xFE	; 254
 596:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 59a:	80 91 e8 00 	lds	r24, 0x00E8
 59e:	80 ff       	sbrs	r24, 0
 5a0:	fc cf       	rjmp	.-8      	; 0x59a <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 5a2:	86 2f       	mov	r24, r22
 5a4:	80 68       	ori	r24, 0x80	; 128
 5a6:	80 93 e3 00 	sts	0x00E3, r24
 5aa:	b5 c0       	rjmp	.+362    	; 0x716 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 5ac:	39 30       	cpi	r19, 0x09	; 9
 5ae:	51 f5       	brne	.+84     	; 0x604 <__vector_11+0x19e>
 5b0:	44 23       	and	r20, r20
 5b2:	09 f0       	breq	.+2      	; 0x5b6 <__vector_11+0x150>
 5b4:	ad c0       	rjmp	.+346    	; 0x710 <__vector_11+0x2aa>
			usb_configuration = wValue;
 5b6:	60 93 0e 01 	sts	0x010E, r22
			cdc_line_rtsdtr = 0;
 5ba:	10 92 0f 01 	sts	0x010F, r1
			transmit_flush_timer = 0;
 5be:	10 92 10 01 	sts	0x0110, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 5c2:	8e ef       	ldi	r24, 0xFE	; 254
 5c4:	80 93 e8 00 	sts	0x00E8, r24
 5c8:	86 ed       	ldi	r24, 0xD6	; 214
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 5ce:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 5d2:	fc 01       	movw	r30, r24
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	e4 91       	lpm	r30, Z+
				UECONX = en;
 5d8:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 5dc:	ee 23       	and	r30, r30
 5de:	69 f0       	breq	.+26     	; 0x5fa <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
 5e0:	ac 01       	movw	r20, r24
 5e2:	4f 5f       	subi	r20, 0xFF	; 255
 5e4:	5f 4f       	sbci	r21, 0xFF	; 255
 5e6:	fc 01       	movw	r30, r24
 5e8:	84 91       	lpm	r24, Z+
 5ea:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 5ee:	ca 01       	movw	r24, r20
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	fa 01       	movw	r30, r20
 5f4:	34 91       	lpm	r19, Z+
 5f6:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 5fa:	2f 5f       	subi	r18, 0xFF	; 255
 5fc:	25 30       	cpi	r18, 0x05	; 5
 5fe:	39 f7       	brne	.-50     	; 0x5ce <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 600:	8e e1       	ldi	r24, 0x1E	; 30
 602:	81 c0       	rjmp	.+258    	; 0x706 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 604:	38 30       	cpi	r19, 0x08	; 8
 606:	61 f4       	brne	.+24     	; 0x620 <__vector_11+0x1ba>
 608:	40 38       	cpi	r20, 0x80	; 128
 60a:	09 f0       	breq	.+2      	; 0x60e <__vector_11+0x1a8>
 60c:	81 c0       	rjmp	.+258    	; 0x710 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 60e:	80 91 e8 00 	lds	r24, 0x00E8
 612:	80 ff       	sbrs	r24, 0
 614:	fc cf       	rjmp	.-8      	; 0x60e <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 616:	80 91 0e 01 	lds	r24, 0x010E
 61a:	80 93 f1 00 	sts	0x00F1, r24
 61e:	50 c0       	rjmp	.+160    	; 0x6c0 <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 620:	31 32       	cpi	r19, 0x21	; 33
 622:	89 f4       	brne	.+34     	; 0x646 <__vector_11+0x1e0>
 624:	41 3a       	cpi	r20, 0xA1	; 161
 626:	09 f0       	breq	.+2      	; 0x62a <__vector_11+0x1c4>
 628:	73 c0       	rjmp	.+230    	; 0x710 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 62a:	80 91 e8 00 	lds	r24, 0x00E8
 62e:	80 ff       	sbrs	r24, 0
 630:	fc cf       	rjmp	.-8      	; 0x62a <__vector_11+0x1c4>
 632:	e0 e0       	ldi	r30, 0x00	; 0
 634:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 636:	81 91       	ld	r24, Z+
 638:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	e7 30       	cpi	r30, 0x07	; 7
 640:	f8 07       	cpc	r31, r24
 642:	c9 f7       	brne	.-14     	; 0x636 <__vector_11+0x1d0>
 644:	3d c0       	rjmp	.+122    	; 0x6c0 <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 646:	30 32       	cpi	r19, 0x20	; 32
 648:	a1 f4       	brne	.+40     	; 0x672 <__vector_11+0x20c>
 64a:	41 32       	cpi	r20, 0x21	; 33
 64c:	09 f0       	breq	.+2      	; 0x650 <__vector_11+0x1ea>
 64e:	60 c0       	rjmp	.+192    	; 0x710 <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 650:	80 91 e8 00 	lds	r24, 0x00E8
 654:	82 ff       	sbrs	r24, 2
 656:	fc cf       	rjmp	.-8      	; 0x650 <__vector_11+0x1ea>
 658:	e0 e0       	ldi	r30, 0x00	; 0
 65a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 65c:	80 91 f1 00 	lds	r24, 0x00F1
 660:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	e7 30       	cpi	r30, 0x07	; 7
 666:	f8 07       	cpc	r31, r24
 668:	c9 f7       	brne	.-14     	; 0x65c <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 66a:	8b ef       	ldi	r24, 0xFB	; 251
 66c:	80 93 e8 00 	sts	0x00E8, r24
 670:	27 c0       	rjmp	.+78     	; 0x6c0 <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 672:	32 32       	cpi	r19, 0x22	; 34
 674:	51 f4       	brne	.+20     	; 0x68a <__vector_11+0x224>
 676:	41 32       	cpi	r20, 0x21	; 33
 678:	09 f0       	breq	.+2      	; 0x67c <__vector_11+0x216>
 67a:	4a c0       	rjmp	.+148    	; 0x710 <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
 67c:	60 93 0f 01 	sts	0x010F, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 680:	80 91 e8 00 	lds	r24, 0x00E8
 684:	80 ff       	sbrs	r24, 0
 686:	fc cf       	rjmp	.-8      	; 0x680 <__vector_11+0x21a>
 688:	1b c0       	rjmp	.+54     	; 0x6c0 <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 68a:	33 23       	and	r19, r19
 68c:	e9 f4       	brne	.+58     	; 0x6c8 <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 68e:	80 91 e8 00 	lds	r24, 0x00E8
 692:	80 ff       	sbrs	r24, 0
 694:	fc cf       	rjmp	.-8      	; 0x68e <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 696:	42 38       	cpi	r20, 0x82	; 130
 698:	11 f0       	breq	.+4      	; 0x69e <__vector_11+0x238>
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0d c0       	rjmp	.+26     	; 0x6b8 <__vector_11+0x252>
				UENUM = wIndex;
 69e:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 6a2:	80 91 eb 00 	lds	r24, 0x00EB
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	25 e0       	ldi	r18, 0x05	; 5
 6aa:	96 95       	lsr	r25
 6ac:	87 95       	ror	r24
 6ae:	2a 95       	dec	r18
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <__vector_11+0x244>
 6b2:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 6b4:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 6b8:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 6bc:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6c0:	8e ef       	ldi	r24, 0xFE	; 254
 6c2:	80 93 e8 00 	sts	0x00E8, r24
 6c6:	27 c0       	rjmp	.+78     	; 0x716 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 6c8:	31 30       	cpi	r19, 0x01	; 1
 6ca:	11 f0       	breq	.+4      	; 0x6d0 <__vector_11+0x26a>
 6cc:	33 30       	cpi	r19, 0x03	; 3
 6ce:	01 f5       	brne	.+64     	; 0x710 <__vector_11+0x2aa>
 6d0:	42 30       	cpi	r20, 0x02	; 2
 6d2:	f1 f4       	brne	.+60     	; 0x710 <__vector_11+0x2aa>
 6d4:	67 2b       	or	r22, r23
 6d6:	e1 f4       	brne	.+56     	; 0x710 <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 6d8:	2a 2f       	mov	r18, r26
 6da:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 6dc:	82 2f       	mov	r24, r18
 6de:	81 50       	subi	r24, 0x01	; 1
 6e0:	84 30       	cpi	r24, 0x04	; 4
 6e2:	b0 f4       	brcc	.+44     	; 0x710 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6e4:	8e ef       	ldi	r24, 0xFE	; 254
 6e6:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 6ea:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 6ee:	33 30       	cpi	r19, 0x03	; 3
 6f0:	79 f0       	breq	.+30     	; 0x710 <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 6f2:	89 e1       	ldi	r24, 0x19	; 25
 6f4:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <__vector_11+0x29c>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	2a 95       	dec	r18
 704:	e2 f7       	brpl	.-8      	; 0x6fe <__vector_11+0x298>
 706:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 70a:	10 92 ea 00 	sts	0x00EA, r1
 70e:	03 c0       	rjmp	.+6      	; 0x716 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 710:	81 e2       	ldi	r24, 0x21	; 33
 712:	80 93 eb 00 	sts	0x00EB, r24
}
 716:	ff 91       	pop	r31
 718:	ef 91       	pop	r30
 71a:	bf 91       	pop	r27
 71c:	af 91       	pop	r26
 71e:	9f 91       	pop	r25
 720:	8f 91       	pop	r24
 722:	7f 91       	pop	r23
 724:	6f 91       	pop	r22
 726:	5f 91       	pop	r21
 728:	4f 91       	pop	r20
 72a:	3f 91       	pop	r19
 72c:	2f 91       	pop	r18
 72e:	1f 91       	pop	r17
 730:	0f 91       	pop	r16
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <__divmodhi4>:
 73c:	97 fb       	bst	r25, 7
 73e:	09 2e       	mov	r0, r25
 740:	07 26       	eor	r0, r23
 742:	0a d0       	rcall	.+20     	; 0x758 <__divmodhi4_neg1>
 744:	77 fd       	sbrc	r23, 7
 746:	04 d0       	rcall	.+8      	; 0x750 <__divmodhi4_neg2>
 748:	0c d0       	rcall	.+24     	; 0x762 <__udivmodhi4>
 74a:	06 d0       	rcall	.+12     	; 0x758 <__divmodhi4_neg1>
 74c:	00 20       	and	r0, r0
 74e:	1a f4       	brpl	.+6      	; 0x756 <__divmodhi4_exit>

00000750 <__divmodhi4_neg2>:
 750:	70 95       	com	r23
 752:	61 95       	neg	r22
 754:	7f 4f       	sbci	r23, 0xFF	; 255

00000756 <__divmodhi4_exit>:
 756:	08 95       	ret

00000758 <__divmodhi4_neg1>:
 758:	f6 f7       	brtc	.-4      	; 0x756 <__divmodhi4_exit>
 75a:	90 95       	com	r25
 75c:	81 95       	neg	r24
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__udivmodhi4>:
 762:	aa 1b       	sub	r26, r26
 764:	bb 1b       	sub	r27, r27
 766:	51 e1       	ldi	r21, 0x11	; 17
 768:	07 c0       	rjmp	.+14     	; 0x778 <__udivmodhi4_ep>

0000076a <__udivmodhi4_loop>:
 76a:	aa 1f       	adc	r26, r26
 76c:	bb 1f       	adc	r27, r27
 76e:	a6 17       	cp	r26, r22
 770:	b7 07       	cpc	r27, r23
 772:	10 f0       	brcs	.+4      	; 0x778 <__udivmodhi4_ep>
 774:	a6 1b       	sub	r26, r22
 776:	b7 0b       	sbc	r27, r23

00000778 <__udivmodhi4_ep>:
 778:	88 1f       	adc	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	5a 95       	dec	r21
 77e:	a9 f7       	brne	.-22     	; 0x76a <__udivmodhi4_loop>
 780:	80 95       	com	r24
 782:	90 95       	com	r25
 784:	bc 01       	movw	r22, r24
 786:	cd 01       	movw	r24, r26
 788:	08 95       	ret

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
