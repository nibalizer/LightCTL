
arm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000009ca  00000a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  0080010c  0080010c  00000a6a  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000138  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000344  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000f7a  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000446  00000000  00000000  00002606  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012c5  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000230  00000000  00000000  00003d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000560  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ed2  00000000  00000000  000044a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000140  00000000  00000000  00005376  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR3AL = 0x00; // Register used by 8bit pwm
	OCR3BH = 0x00;
	OCR3BL = 0x00; // Register used by 8bit pwm
	OCR3CH = 0x00;
	OCR3CL = 0x00; // Register used by 8bit pwm
}
   0:	26 c1       	rjmp	.+588    	; 0x24e <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
   2:	00 00       	nop
   4:	41 c1       	rjmp	.+642    	; 0x288 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c1       	rjmp	.+638    	; 0x288 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c1       	rjmp	.+634    	; 0x288 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c1       	rjmp	.+630    	; 0x288 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c1       	rjmp	.+626    	; 0x288 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c1       	rjmp	.+622    	; 0x288 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c1       	rjmp	.+618    	; 0x288 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c1       	rjmp	.+614    	; 0x288 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c1       	rjmp	.+610    	; 0x288 <__bad_interrupt>
  26:	00 00       	nop
  28:	24 c3       	rjmp	.+1608   	; 0x672 <__vector_10>
  2a:	00 00       	nop
  2c:	5d c3       	rjmp	.+1722   	; 0x6e8 <__vector_11>
  2e:	00 00       	nop
  30:	2b c1       	rjmp	.+598    	; 0x288 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c1       	rjmp	.+594    	; 0x288 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c1       	rjmp	.+590    	; 0x288 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c1       	rjmp	.+586    	; 0x288 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c1       	rjmp	.+582    	; 0x288 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c1       	rjmp	.+578    	; 0x288 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c1       	rjmp	.+574    	; 0x288 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c1       	rjmp	.+570    	; 0x288 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c1       	rjmp	.+566    	; 0x288 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c1       	rjmp	.+562    	; 0x288 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c1       	rjmp	.+558    	; 0x288 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c1       	rjmp	.+554    	; 0x288 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c1       	rjmp	.+550    	; 0x288 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c1       	rjmp	.+546    	; 0x288 <__bad_interrupt>
  66:	00 00       	nop
  68:	0f c1       	rjmp	.+542    	; 0x288 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	0d c1       	rjmp	.+538    	; 0x288 <__bad_interrupt>
  6e:	00 00       	nop
  70:	0b c1       	rjmp	.+534    	; 0x288 <__bad_interrupt>
  72:	00 00       	nop
  74:	09 c1       	rjmp	.+530    	; 0x288 <__bad_interrupt>
  76:	00 00       	nop
  78:	07 c1       	rjmp	.+526    	; 0x288 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	05 c1       	rjmp	.+522    	; 0x288 <__bad_interrupt>
  7e:	00 00       	nop
  80:	03 c1       	rjmp	.+518    	; 0x288 <__bad_interrupt>
  82:	00 00       	nop
  84:	01 c1       	rjmp	.+514    	; 0x288 <__bad_interrupt>
  86:	00 00       	nop
  88:	ff c0       	rjmp	.+510    	; 0x288 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fd c0       	rjmp	.+506    	; 0x288 <__bad_interrupt>
  8e:	00 00       	nop
  90:	fb c0       	rjmp	.+502    	; 0x288 <__bad_interrupt>
  92:	00 00       	nop
  94:	f9 c0       	rjmp	.+498    	; 0x288 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__c.1611>:
  98:	22 2c 20 6d 75 73 74 20 62 65 20 3f 20 6f 72 20     ", must be ? or 
  a8:	3d 0d 0a 00                                         =...

000000ac <__c.1609>:
  ac:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
  bc:	22 00                                               ".

000000be <__c.1607>:
  be:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
  ce:	31 0d 0a 00                                         1...

000000d2 <__c.1605>:
  d2:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

000000e2 <__c.1603>:
  e2:	0d 0a 00                                            ...

000000e5 <__c.1601>:
  e5:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
  f5:	37 0d 0a 00                                         7...

000000f9 <__c.1599>:
  f9:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

00000107 <__c.1597>:
 107:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
 117:	0d 0a 00                                            ...

0000011a <__c.1595>:
 11a:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

00000129 <__c.1593>:
 129:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
 139:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
 149:	20 72 65 71 27 64 0d 0a 00                           req'd...

00000152 <__c.1526>:
 152:	49 4e 56 41 4c 49 44 5f 43 4f 4d 4d 41 4e 44 5f     INVALID_COMMAND_
 162:	43 4f 44 45 00                                      CODE.

00000167 <__c.1490>:
 167:	01 02 03 04 05 06 07 08 0a 00                       ..........

00000171 <__c.1473>:
 171:	41 72 6d 20 43 6f 6e 74 72 6f 6c 6c 65 72 20 31     Arm Controller 1
 181:	2e 30 0a 00                                         .0..

00000185 <descriptor_list>:
 185:	00 01 00 00 b9 01 12 00 02 00 00 cb 01 43 00 03     .............C..
 195:	00 00 0e 02 04 01 03 09 04 12 02 14 02 03 09 04     ................
 1a5:	28 02 16 03 03 09 04 40 02 0c                       (......@..

000001af <endpoint_config_table>:
 1af:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

000001b9 <device_descriptor>:
 1b9:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 1c9:	03 01                                               ..

000001cb <config1_descriptor>:
 1cb:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 1db:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 1eb:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 1fb:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 20b:	40 00 00                                            @..

0000020e <string0>:
 20e:	04 03 09 04                                         ....

00000212 <string1>:
 212:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 222:	6d 00 65 00 00 00                                   m.e...

00000228 <string2>:
 228:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 238:	69 00 61 00 6c 00 00 00                             i.a.l...

00000240 <string3>:
 240:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

0000024e <__ctors_end>:
 24e:	11 24       	eor	r1, r1
 250:	1f be       	out	0x3f, r1	; 63
 252:	cf ef       	ldi	r28, 0xFF	; 255
 254:	d0 e2       	ldi	r29, 0x20	; 32
 256:	de bf       	out	0x3e, r29	; 62
 258:	cd bf       	out	0x3d, r28	; 61

0000025a <__do_copy_data>:
 25a:	11 e0       	ldi	r17, 0x01	; 1
 25c:	a0 e0       	ldi	r26, 0x00	; 0
 25e:	b1 e0       	ldi	r27, 0x01	; 1
 260:	ea ec       	ldi	r30, 0xCA	; 202
 262:	f9 e0       	ldi	r31, 0x09	; 9
 264:	00 e0       	ldi	r16, 0x00	; 0
 266:	0b bf       	out	0x3b, r16	; 59
 268:	02 c0       	rjmp	.+4      	; 0x26e <__do_copy_data+0x14>
 26a:	07 90       	elpm	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	ac 30       	cpi	r26, 0x0C	; 12
 270:	b1 07       	cpc	r27, r17
 272:	d9 f7       	brne	.-10     	; 0x26a <__do_copy_data+0x10>

00000274 <__do_clear_bss>:
 274:	11 e0       	ldi	r17, 0x01	; 1
 276:	ac e0       	ldi	r26, 0x0C	; 12
 278:	b1 e0       	ldi	r27, 0x01	; 1
 27a:	01 c0       	rjmp	.+2      	; 0x27e <.do_clear_bss_start>

0000027c <.do_clear_bss_loop>:
 27c:	1d 92       	st	X+, r1

0000027e <.do_clear_bss_start>:
 27e:	a1 32       	cpi	r26, 0x21	; 33
 280:	b1 07       	cpc	r27, r17
 282:	e1 f7       	brne	.-8      	; 0x27c <.do_clear_bss_loop>
 284:	1a d1       	rcall	.+564    	; 0x4ba <main>
 286:	9f c3       	rjmp	.+1854   	; 0x9c6 <_exit>

00000288 <__bad_interrupt>:
 288:	bb ce       	rjmp	.-650    	; 0x0 <__vectors>

0000028a <setup_pwms>:

void setup_pwms(void)
{
	// Timer 1
	// Set ports to output
	DDRB = (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
 28a:	80 ee       	ldi	r24, 0xE0	; 224
 28c:	84 b9       	out	0x04, r24	; 4
	DDRC = (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
 28e:	80 e7       	ldi	r24, 0x70	; 112
 290:	87 b9       	out	0x07, r24	; 7

	OCR1A = 0;
 292:	10 92 89 00 	sts	0x0089, r1
 296:	10 92 88 00 	sts	0x0088, r1
	OCR1B = 0;
 29a:	10 92 8b 00 	sts	0x008B, r1
 29e:	10 92 8a 00 	sts	0x008A, r1
	OCR1C = 0;
 2a2:	10 92 8d 00 	sts	0x008D, r1
 2a6:	10 92 8c 00 	sts	0x008C, r1

	TCCR1A= (1<<COM1A1) | (1 << COM1B1) | (1 << COM1C1);
 2aa:	98 ea       	ldi	r25, 0xA8	; 168
 2ac:	90 93 80 00 	sts	0x0080, r25
	TCCR1B=0x12;
 2b0:	82 e1       	ldi	r24, 0x12	; 18
 2b2:	80 93 81 00 	sts	0x0081, r24
	TCNT1H=0x00;
 2b6:	10 92 85 00 	sts	0x0085, r1
	TCNT1L=0x00;
 2ba:	10 92 84 00 	sts	0x0084, r1

	OCR3A = 0;
 2be:	10 92 99 00 	sts	0x0099, r1
 2c2:	10 92 98 00 	sts	0x0098, r1
	OCR3B = 0;
 2c6:	10 92 9b 00 	sts	0x009B, r1
 2ca:	10 92 9a 00 	sts	0x009A, r1
	OCR3C = 0;
 2ce:	10 92 9d 00 	sts	0x009D, r1
 2d2:	10 92 9c 00 	sts	0x009C, r1

	TCCR3A= (1<<COM3A1) | (1 << COM3B1) | (1 << COM3C1);
 2d6:	90 93 90 00 	sts	0x0090, r25
	TCCR3B=0x12;
 2da:	80 93 91 00 	sts	0x0091, r24
	TCNT3H=0x00;
 2de:	10 92 95 00 	sts	0x0095, r1
	TCNT3L=0x00;
 2e2:	10 92 94 00 	sts	0x0094, r1

	// 50hz
	ICR1=20000;
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	9e e4       	ldi	r25, 0x4E	; 78
 2ea:	90 93 87 00 	sts	0x0087, r25
 2ee:	80 93 86 00 	sts	0x0086, r24
	ICR3=20000;
 2f2:	90 93 97 00 	sts	0x0097, r25
 2f6:	80 93 96 00 	sts	0x0096, r24
}
 2fa:	08 95       	ret

000002fc <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ec 01       	movw	r28, r24
 302:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
 304:	21 96       	adiw	r28, 0x01	; 1
 306:	84 91       	lpm	r24, Z+
		if (!c) break;
 308:	88 23       	and	r24, r24
 30a:	11 f0       	breq	.+4      	; 0x310 <send_str+0x14>
		usb_serial_putchar(c);
 30c:	6d d1       	rcall	.+730    	; 0x5e8 <usb_serial_putchar>
 30e:	f9 cf       	rjmp	.-14     	; 0x302 <send_str+0x6>
	}
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <handle_query_adc_command>:
{
	usb_serial_putchar("\x06\x03\n");
}

void handle_query_adc_command(uint8_t port)
{
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
	START_ADC;
 31a:	80 91 7a 00 	lds	r24, 0x007A
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	80 93 7a 00 	sts	0x007A, r24
	while(!ADC_COMPLETE);
 324:	80 91 7a 00 	lds	r24, 0x007A
 328:	84 ff       	sbrs	r24, 4
 32a:	fc cf       	rjmp	.-8      	; 0x324 <handle_query_adc_command+0xe>
	uint8_t ah, al;
	ah = ADCL;
 32c:	10 91 78 00 	lds	r17, 0x0078
	al = ADCH;
 330:	00 91 79 00 	lds	r16, 0x0079
	usb_serial_putchar('\x07');
 334:	87 e0       	ldi	r24, 0x07	; 7
 336:	58 d1       	rcall	.+688    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar('\x03');
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	56 d1       	rcall	.+684    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar(ah);
 33c:	81 2f       	mov	r24, r17
 33e:	54 d1       	rcall	.+680    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar(al);
 340:	80 2f       	mov	r24, r16
 342:	52 d1       	rcall	.+676    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar('\n');
 344:	8a e0       	ldi	r24, 0x0A	; 10
 346:	50 d1       	rcall	.+672    	; 0x5e8 <usb_serial_putchar>
}
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	08 95       	ret

0000034e <handle_pwm_ports_command>:
	usb_serial_putchar('\n');
}

void handle_pwm_ports_command(void)
{
	usb_serial_putchar('\x03');
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	4b d1       	rcall	.+662    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar('\x00');
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	49 d1       	rcall	.+658    	; 0x5e8 <usb_serial_putchar>
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
 356:	87 e6       	ldi	r24, 0x67	; 103
 358:	91 e0       	ldi	r25, 0x01	; 1
}
 35a:	d0 cf       	rjmp	.-96     	; 0x2fc <send_str>

0000035c <handle_ping_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("Arm Controller 1.0\n"));
}

void handle_ping_command(const char *str, uint8_t len)
{
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	18 2f       	mov	r17, r24
 368:	09 2f       	mov	r16, r25
 36a:	f6 2e       	mov	r15, r22
	const char *data_itr;
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	3c d1       	rcall	.+632    	; 0x5e8 <usb_serial_putchar>
 370:	21 2f       	mov	r18, r17
 372:	30 2f       	mov	r19, r16
 374:	c9 01       	movw	r24, r18
 376:	ec 01       	movw	r28, r24
 378:	11 e0       	ldi	r17, 0x01	; 1
 37a:	03 c0       	rjmp	.+6      	; 0x382 <handle_ping_command+0x26>
	while(ndx < len)
	{
		usb_serial_putchar(data_itr[ndx]);
 37c:	88 81       	ld	r24, Y
 37e:	34 d1       	rcall	.+616    	; 0x5e8 <usb_serial_putchar>
		++ndx;
 380:	1f 5f       	subi	r17, 0xFF	; 255
 382:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
	while(ndx < len)
 384:	1f 15       	cp	r17, r15
 386:	d0 f3       	brcs	.-12     	; 0x37c <handle_ping_command+0x20>
	{
		usb_serial_putchar(data_itr[ndx]);
		++ndx;
	}
	usb_serial_putchar('\n');
 388:	8a e0       	ldi	r24, 0x0A	; 10
 38a:	2e d1       	rcall	.+604    	; 0x5e8 <usb_serial_putchar>
}
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	1f 91       	pop	r17
 392:	0f 91       	pop	r16
 394:	ff 90       	pop	r15
 396:	08 95       	ret

00000398 <handle_version_command>:
	usb_serial_putchar('\n');
}

void handle_version_command(void)
{
	usb_serial_putchar('\x00');
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	26 d1       	rcall	.+588    	; 0x5e8 <usb_serial_putchar>
	send_str(PSTR("Arm Controller 1.0\n"));
 39c:	81 e7       	ldi	r24, 0x71	; 113
 39e:	91 e0       	ldi	r25, 0x01	; 1
}
 3a0:	ad cf       	rjmp	.-166    	; 0x2fc <send_str>

000003a2 <handle_set_pwm_command>:

/**
 * @breif Handle a set pwm command
 */
void handle_set_pwm_command(uint8_t port, uint8_t vall, uint8_t valh)
{
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	18 2f       	mov	r17, r24
 3aa:	f6 2e       	mov	r15, r22
 3ac:	04 2f       	mov	r16, r20
	usb_serial_putchar('\x04');
 3ae:	84 e0       	ldi	r24, 0x04	; 4
 3b0:	1b d1       	rcall	.+566    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar(port);
 3b2:	81 2f       	mov	r24, r17
 3b4:	19 d1       	rcall	.+562    	; 0x5e8 <usb_serial_putchar>
	switch(port)
 3b6:	12 30       	cpi	r17, 0x02	; 2
 3b8:	c1 f0       	breq	.+48     	; 0x3ea <handle_set_pwm_command+0x48>
 3ba:	13 30       	cpi	r17, 0x03	; 3
 3bc:	28 f4       	brcc	.+10     	; 0x3c8 <handle_set_pwm_command+0x26>
 3be:	11 23       	and	r17, r17
 3c0:	51 f0       	breq	.+20     	; 0x3d6 <handle_set_pwm_command+0x34>
 3c2:	11 30       	cpi	r17, 0x01	; 1
 3c4:	29 f5       	brne	.+74     	; 0x410 <handle_set_pwm_command+0x6e>
 3c6:	0c c0       	rjmp	.+24     	; 0x3e0 <handle_set_pwm_command+0x3e>
 3c8:	14 30       	cpi	r17, 0x04	; 4
 3ca:	c9 f0       	breq	.+50     	; 0x3fe <handle_set_pwm_command+0x5c>
 3cc:	14 30       	cpi	r17, 0x04	; 4
 3ce:	90 f0       	brcs	.+36     	; 0x3f4 <handle_set_pwm_command+0x52>
 3d0:	15 30       	cpi	r17, 0x05	; 5
 3d2:	f1 f4       	brne	.+60     	; 0x410 <handle_set_pwm_command+0x6e>
 3d4:	19 c0       	rjmp	.+50     	; 0x408 <handle_set_pwm_command+0x66>
	{
		case 0:
			OCR1AH = valh;
 3d6:	00 93 89 00 	sts	0x0089, r16
			OCR1AL = vall;
 3da:	f0 92 88 00 	sts	0x0088, r15
 3de:	18 c0       	rjmp	.+48     	; 0x410 <handle_set_pwm_command+0x6e>
			break;
		case 1:
			OCR1BH = valh;
 3e0:	00 93 8b 00 	sts	0x008B, r16
			OCR1BL = vall;
 3e4:	f0 92 8a 00 	sts	0x008A, r15
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <handle_set_pwm_command+0x6e>
			break;
		case 2:
			OCR1CH = valh;
 3ea:	00 93 8d 00 	sts	0x008D, r16
			OCR1CL = vall;
 3ee:	f0 92 8c 00 	sts	0x008C, r15
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <handle_set_pwm_command+0x6e>
			break;
		case 3:
			OCR3AH = valh;
 3f4:	00 93 99 00 	sts	0x0099, r16
			OCR3AL = vall;
 3f8:	f0 92 98 00 	sts	0x0098, r15
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <handle_set_pwm_command+0x6e>
			break;
		case 4:
			OCR3BH = valh;
 3fe:	00 93 9b 00 	sts	0x009B, r16
			OCR3BL = vall;
 402:	f0 92 9a 00 	sts	0x009A, r15
 406:	04 c0       	rjmp	.+8      	; 0x410 <handle_set_pwm_command+0x6e>
			break;
		case 5:
			OCR3CH = valh;
 408:	00 93 9d 00 	sts	0x009D, r16
			OCR3CL = vall;
 40c:	f0 92 9c 00 	sts	0x009C, r15
			break;
	}
	usb_serial_putchar('\x00');
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	ea d0       	rcall	.+468    	; 0x5e8 <usb_serial_putchar>
	usb_serial_putchar('\n');
 414:	8a e0       	ldi	r24, 0x0A	; 10
 416:	e8 d0       	rcall	.+464    	; 0x5e8 <usb_serial_putchar>
}
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	08 95       	ret

00000420 <handle_command>:
	usb_serial_putchar(al);
	usb_serial_putchar('\n');
}

void handle_command(const char *str, uint8_t len)
{
 420:	fc 01       	movw	r30, r24
	if(len == 0)
 422:	66 23       	and	r22, r22
 424:	19 f1       	breq	.+70     	; 0x46c <handle_command+0x4c>
		return;

	switch(str[0])
 426:	80 81       	ld	r24, Z
 428:	84 30       	cpi	r24, 0x04	; 4
 42a:	a1 f0       	breq	.+40     	; 0x454 <handle_command+0x34>
 42c:	85 30       	cpi	r24, 0x05	; 5
 42e:	38 f4       	brcc	.+14     	; 0x43e <handle_command+0x1e>
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	69 f0       	breq	.+26     	; 0x44e <handle_command+0x2e>
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	50 f0       	brcs	.+20     	; 0x44c <handle_command+0x2c>
 438:	83 30       	cpi	r24, 0x03	; 3
 43a:	a9 f4       	brne	.+42     	; 0x466 <handle_command+0x46>
 43c:	0a c0       	rjmp	.+20     	; 0x452 <handle_command+0x32>
 43e:	86 30       	cpi	r24, 0x06	; 6
 440:	69 f0       	breq	.+26     	; 0x45c <handle_command+0x3c>
 442:	86 30       	cpi	r24, 0x06	; 6
 444:	98 f0       	brcs	.+38     	; 0x46c <handle_command+0x4c>
 446:	87 30       	cpi	r24, 0x07	; 7
 448:	71 f4       	brne	.+28     	; 0x466 <handle_command+0x46>
 44a:	0b c0       	rjmp	.+22     	; 0x462 <handle_command+0x42>
	{
		case 0:
			handle_version_command();
 44c:	a5 cf       	rjmp	.-182    	; 0x398 <handle_version_command>
			break;
		case 1:
			handle_ping_command(str, len);
 44e:	cf 01       	movw	r24, r30
 450:	85 cf       	rjmp	.-246    	; 0x35c <handle_ping_command>
			break;
		case 3:
			handle_pwm_ports_command();
 452:	7d cf       	rjmp	.-262    	; 0x34e <handle_pwm_ports_command>
			break;
		case 4:
			handle_set_pwm_command(str[1], str[2], str[3]);
 454:	81 81       	ldd	r24, Z+1	; 0x01
 456:	62 81       	ldd	r22, Z+2	; 0x02
 458:	43 81       	ldd	r20, Z+3	; 0x03
 45a:	a3 cf       	rjmp	.-186    	; 0x3a2 <handle_set_pwm_command>
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
}

void handle_adc_ports_command(void)
{
	usb_serial_putchar("\x06\x03\n");
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	c3 c0       	rjmp	.+390    	; 0x5e8 <usb_serial_putchar>
			break;
		case 6:
			handle_adc_ports_command();
			break;
		case 7:
			handle_query_adc_command(str[1]);
 462:	81 81       	ldd	r24, Z+1	; 0x01
 464:	58 cf       	rjmp	.-336    	; 0x316 <handle_query_adc_command>
			break;
		default:
			send_str(PSTR("INVALID_COMMAND_CODE"));
 466:	82 e5       	ldi	r24, 0x52	; 82
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	48 cf       	rjmp	.-368    	; 0x2fc <send_str>
 46c:	08 95       	ret

0000046e <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
 478:	06 2f       	mov	r16, r22
 47a:	10 e0       	ldi	r17, 0x00	; 0
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <recv_str+0x38>
	int16_t r;
	uint8_t count=0;

	while (count < size) {
		r = usb_serial_getchar();
 47e:	82 d0       	rcall	.+260    	; 0x584 <usb_serial_getchar>
		if (r != -1) {
 480:	2f ef       	ldi	r18, 0xFF	; 255
 482:	8f 3f       	cpi	r24, 0xFF	; 255
 484:	92 07       	cpc	r25, r18
 486:	49 f0       	breq	.+18     	; 0x49a <recv_str+0x2c>
			if (r == '\r' || r == '\n') return count;
 488:	8d 30       	cpi	r24, 0x0D	; 13
 48a:	91 05       	cpc	r25, r1
 48c:	81 f0       	breq	.+32     	; 0x4ae <recv_str+0x40>
 48e:	8a 30       	cpi	r24, 0x0A	; 10
 490:	91 05       	cpc	r25, r1
 492:	69 f0       	breq	.+26     	; 0x4ae <recv_str+0x40>
			*buf++ = r;
 494:	89 93       	st	Y+, r24
			//usb_serial_putchar(r);
			count++;
 496:	1f 5f       	subi	r17, 0xFF	; 255
 498:	06 c0       	rjmp	.+12     	; 0x4a6 <recv_str+0x38>
		} else {
			if (!usb_configured() ||
 49a:	71 d0       	rcall	.+226    	; 0x57e <usb_configured>
 49c:	88 23       	and	r24, r24
 49e:	31 f0       	breq	.+12     	; 0x4ac <recv_str+0x3e>
 4a0:	e5 d0       	rcall	.+458    	; 0x66c <usb_serial_get_control>
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <recv_str+0x3e>
uint8_t recv_str(char *buf, uint8_t size)
{
	int16_t r;
	uint8_t count=0;

	while (count < size) {
 4a6:	10 17       	cp	r17, r16
 4a8:	50 f3       	brcs	.-44     	; 0x47e <recv_str+0x10>
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <recv_str+0x40>
 4ac:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
 4ae:	81 2f       	mov	r24, r17
 4b0:	df 91       	pop	r29
 4b2:	cf 91       	pop	r28
 4b4:	1f 91       	pop	r17
 4b6:	0f 91       	pop	r16
 4b8:	08 95       	ret

000004ba <main>:
			send_str(PSTR("INVALID_COMMAND_CODE"));
	}
}

int main(void)
{
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	df 93       	push	r29
 4c0:	cf 93       	push	r28
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	a0 97       	sbiw	r28, 0x20	; 32
 4c8:	0f b6       	in	r0, 0x3f	; 63
 4ca:	f8 94       	cli
 4cc:	de bf       	out	0x3e, r29	; 62
 4ce:	0f be       	out	0x3f, r0	; 63
 4d0:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(0);
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	80 93 61 00 	sts	0x0061, r24
 4d8:	10 92 61 00 	sts	0x0061, r1
	setup_pwms();
 4dc:	d6 de       	rcall	.-596    	; 0x28a <setup_pwms>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t i;

	for(i = 0;i < 8;i++)
	{
		adcl_vals[i] = 0;
 4e2:	fc 01       	movw	r30, r24
 4e4:	e8 5e       	subi	r30, 0xE8	; 232
 4e6:	fe 4f       	sbci	r31, 0xFE	; 254
 4e8:	10 82       	st	Z, r1
		adch_vals[i] = 0;
 4ea:	fc 01       	movw	r30, r24
 4ec:	e0 5f       	subi	r30, 0xF0	; 240
 4ee:	fe 4f       	sbci	r31, 0xFE	; 254
 4f0:	10 82       	st	Z, r1
 4f2:	01 96       	adiw	r24, 0x01	; 1

void setup_adc(void)
{
	uint8_t i;

	for(i = 0;i < 8;i++)
 4f4:	88 30       	cpi	r24, 0x08	; 8
 4f6:	91 05       	cpc	r25, r1
 4f8:	a1 f7       	brne	.-24     	; 0x4e2 <main+0x28>
	{
		adcl_vals[i] = 0;
		adch_vals[i] = 0;
	}

	cur_adc_mux = 3;
 4fa:	83 e0       	ldi	r24, 0x03	; 3
 4fc:	80 93 20 01 	sts	0x0120, r24

	// Set ref voltage / MUX
	ADMUX = (1 << REFS1) | (1 << REFS0) | (1 << MUX1) | (1 << MUX0);
 500:	83 ec       	ldi	r24, 0xC3	; 195
 502:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 506:	87 e8       	ldi	r24, 0x87	; 135
 508:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = (1 << ADTS2) | (1 << ADTS1);
 50c:	86 e0       	ldi	r24, 0x06	; 6
 50e:	80 93 7b 00 	sts	0x007B, r24

	CPU_PRESCALE(0);
	setup_pwms();
	setup_adc();

	usb_init();
 512:	1c d0       	rcall	.+56     	; 0x54c <usb_init>
	while (!usb_configured()) /* wait */ ;
 514:	34 d0       	rcall	.+104    	; 0x57e <usb_configured>
 516:	88 23       	and	r24, r24
 518:	e9 f3       	breq	.-6      	; 0x514 <main+0x5a>
 51a:	80 e1       	ldi	r24, 0x10	; 16
 51c:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 51e:	20 e9       	ldi	r18, 0x90	; 144
 520:	31 e0       	ldi	r19, 0x01	; 1
 522:	f9 01       	movw	r30, r18
 524:	31 97       	sbiw	r30, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <main+0x6a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 528:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 52a:	d9 f7       	brne	.-10     	; 0x522 <main+0x68>
	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
		usb_serial_flush_input();

		while (1) {
			n = recv_str(buf, sizeof(buf));
 52c:	8e 01       	movw	r16, r28
 52e:	0f 5f       	subi	r16, 0xFF	; 255
 530:	1f 4f       	sbci	r17, 0xFF	; 255
	usb_init();
	while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);

	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
 532:	9c d0       	rcall	.+312    	; 0x66c <usb_serial_get_control>
 534:	80 ff       	sbrs	r24, 0
 536:	fd cf       	rjmp	.-6      	; 0x532 <main+0x78>
		usb_serial_flush_input();
 538:	44 d0       	rcall	.+136    	; 0x5c2 <usb_serial_flush_input>

		while (1) {
			n = recv_str(buf, sizeof(buf));
 53a:	c8 01       	movw	r24, r16
 53c:	60 e2       	ldi	r22, 0x20	; 32
 53e:	97 df       	rcall	.-210    	; 0x46e <recv_str>
 540:	68 2f       	mov	r22, r24
			if (n == 255) break;
 542:	8f 3f       	cpi	r24, 0xFF	; 255
 544:	b1 f3       	breq	.-20     	; 0x532 <main+0x78>
			handle_command(buf, n);
 546:	c8 01       	movw	r24, r16
 548:	6b df       	rcall	.-298    	; 0x420 <handle_command>
 54a:	f7 cf       	rjmp	.-18     	; 0x53a <main+0x80>

0000054c <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
 54c:	81 e8       	ldi	r24, 0x81	; 129
 54e:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 552:	80 ea       	ldi	r24, 0xA0	; 160
 554:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 558:	86 e1       	ldi	r24, 0x16	; 22
 55a:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 55c:	09 b4       	in	r0, 0x29	; 41
 55e:	00 fe       	sbrs	r0, 0
 560:	fd cf       	rjmp	.-6      	; 0x55c <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 562:	80 e9       	ldi	r24, 0x90	; 144
 564:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 568:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 56c:	10 92 0c 01 	sts	0x010C, r1
	cdc_line_rtsdtr = 0;
 570:	10 92 0d 01 	sts	0x010D, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 574:	8c e0       	ldi	r24, 0x0C	; 12
 576:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 57a:	78 94       	sei
}
 57c:	08 95       	ret

0000057e <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 57e:	80 91 0c 01 	lds	r24, 0x010C
}
 582:	08 95       	ret

00000584 <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 584:	2f b7       	in	r18, 0x3f	; 63
	cli();
 586:	f8 94       	cli
	if (!usb_configuration) {
 588:	80 91 0c 01 	lds	r24, 0x010C
 58c:	88 23       	and	r24, r24
 58e:	39 f0       	breq	.+14     	; 0x59e <usb_serial_getchar+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
 590:	83 e0       	ldi	r24, 0x03	; 3
 592:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
 596:	80 91 e8 00 	lds	r24, 0x00E8
 59a:	85 fd       	sbrc	r24, 5
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <usb_serial_getchar+0x22>
		// no data in buffer
		SREG = intr_state;
 59e:	2f bf       	out	0x3f, r18	; 63
 5a0:	2f ef       	ldi	r18, 0xFF	; 255
 5a2:	3f ef       	ldi	r19, 0xFF	; 255
 5a4:	0c c0       	rjmp	.+24     	; 0x5be <usb_serial_getchar+0x3a>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
 5a6:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 5aa:	80 91 e8 00 	lds	r24, 0x00E8
 5ae:	85 fd       	sbrc	r24, 5
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <usb_serial_getchar+0x34>
 5b2:	8b e6       	ldi	r24, 0x6B	; 107
 5b4:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 5b8:	2f bf       	out	0x3f, r18	; 63
	return c;
 5ba:	29 2f       	mov	r18, r25
 5bc:	30 e0       	ldi	r19, 0x00	; 0
}
 5be:	c9 01       	movw	r24, r18
 5c0:	08 95       	ret

000005c2 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
 5c2:	80 91 0c 01 	lds	r24, 0x010C
 5c6:	88 23       	and	r24, r24
 5c8:	71 f0       	breq	.+28     	; 0x5e6 <usb_serial_flush_input+0x24>
		intr_state = SREG;
 5ca:	9f b7       	in	r25, 0x3f	; 63
		cli();
 5cc:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
 5d4:	2b e6       	ldi	r18, 0x6B	; 107
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <usb_serial_flush_input+0x1a>
 5d8:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
 5dc:	80 91 e8 00 	lds	r24, 0x00E8
 5e0:	85 fd       	sbrc	r24, 5
 5e2:	fa cf       	rjmp	.-12     	; 0x5d8 <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
 5e4:	9f bf       	out	0x3f, r25	; 63
 5e6:	08 95       	ret

000005e8 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
 5e8:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 5ea:	80 91 0c 01 	lds	r24, 0x010C
 5ee:	88 23       	and	r24, r24
 5f0:	d9 f1       	breq	.+118    	; 0x668 <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 5f2:	2f b7       	in	r18, 0x3f	; 63
	cli();
 5f4:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 5f6:	84 e0       	ldi	r24, 0x04	; 4
 5f8:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 5fc:	80 91 0f 01 	lds	r24, 0x010F
 600:	88 23       	and	r24, r24
 602:	41 f0       	breq	.+16     	; 0x614 <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 604:	80 91 e8 00 	lds	r24, 0x00E8
 608:	85 fd       	sbrc	r24, 5
 60a:	02 c0       	rjmp	.+4      	; 0x610 <usb_serial_putchar+0x28>
			SREG = intr_state;
 60c:	2f bf       	out	0x3f, r18	; 63
 60e:	12 c0       	rjmp	.+36     	; 0x634 <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
 610:	10 92 0f 01 	sts	0x010F, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 614:	90 91 e4 00 	lds	r25, 0x00E4
 618:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 61a:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 61c:	80 91 e8 00 	lds	r24, 0x00E8
 620:	85 fd       	sbrc	r24, 5
 622:	13 c0       	rjmp	.+38     	; 0x64a <usb_serial_putchar+0x62>
		SREG = intr_state;
 624:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 626:	80 91 e4 00 	lds	r24, 0x00E4
 62a:	89 17       	cp	r24, r25
 62c:	29 f4       	brne	.+10     	; 0x638 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 0f 01 	sts	0x010F, r24
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 638:	80 91 0c 01 	lds	r24, 0x010C
 63c:	88 23       	and	r24, r24
 63e:	a1 f0       	breq	.+40     	; 0x668 <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
 640:	2f b7       	in	r18, 0x3f	; 63
		cli();
 642:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 644:	30 93 e9 00 	sts	0x00E9, r19
 648:	e9 cf       	rjmp	.-46     	; 0x61c <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 64a:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 64e:	80 91 e8 00 	lds	r24, 0x00E8
 652:	85 fd       	sbrc	r24, 5
 654:	03 c0       	rjmp	.+6      	; 0x65c <usb_serial_putchar+0x74>
 656:	8a e3       	ldi	r24, 0x3A	; 58
 658:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 65c:	85 e0       	ldi	r24, 0x05	; 5
 65e:	80 93 0e 01 	sts	0x010E, r24
	SREG = intr_state;
 662:	2f bf       	out	0x3f, r18	; 63
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	08 95       	ret
	return 0;
 668:	8f ef       	ldi	r24, 0xFF	; 255
}
 66a:	08 95       	ret

0000066c <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
 66c:	80 91 0d 01 	lds	r24, 0x010D
 670:	08 95       	ret

00000672 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 680:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 684:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 688:	98 2f       	mov	r25, r24
 68a:	83 ff       	sbrs	r24, 3
 68c:	11 c0       	rjmp	.+34     	; 0x6b0 <__vector_10+0x3e>
		UENUM = 0;
 68e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 698:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 69c:	82 e1       	ldi	r24, 0x12	; 18
 69e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 6a2:	88 e0       	ldi	r24, 0x08	; 8
 6a4:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 6a8:	10 92 0c 01 	sts	0x010C, r1
		cdc_line_rtsdtr = 0;
 6ac:	10 92 0d 01 	sts	0x010D, r1
        }
	if (intbits & (1<<SOFI)) {
 6b0:	92 ff       	sbrs	r25, 2
 6b2:	13 c0       	rjmp	.+38     	; 0x6da <__vector_10+0x68>
		if (usb_configuration) {
 6b4:	80 91 0c 01 	lds	r24, 0x010C
 6b8:	88 23       	and	r24, r24
 6ba:	79 f0       	breq	.+30     	; 0x6da <__vector_10+0x68>
			t = transmit_flush_timer;
 6bc:	80 91 0e 01 	lds	r24, 0x010E
			if (t) {
 6c0:	88 23       	and	r24, r24
 6c2:	59 f0       	breq	.+22     	; 0x6da <__vector_10+0x68>
				transmit_flush_timer = --t;
 6c4:	81 50       	subi	r24, 0x01	; 1
 6c6:	80 93 0e 01 	sts	0x010E, r24
				if (!t) {
 6ca:	88 23       	and	r24, r24
 6cc:	31 f4       	brne	.+12     	; 0x6da <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
 6ce:	84 e0       	ldi	r24, 0x04	; 4
 6d0:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 6d4:	8a e3       	ldi	r24, 0x3A	; 58
 6d6:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 6e8:	1f 92       	push	r1
 6ea:	0f 92       	push	r0
 6ec:	0f b6       	in	r0, 0x3f	; 63
 6ee:	0f 92       	push	r0
 6f0:	0b b6       	in	r0, 0x3b	; 59
 6f2:	0f 92       	push	r0
 6f4:	11 24       	eor	r1, r1
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	2f 93       	push	r18
 6fc:	3f 93       	push	r19
 6fe:	4f 93       	push	r20
 700:	5f 93       	push	r21
 702:	6f 93       	push	r22
 704:	7f 93       	push	r23
 706:	8f 93       	push	r24
 708:	9f 93       	push	r25
 70a:	af 93       	push	r26
 70c:	bf 93       	push	r27
 70e:	ef 93       	push	r30
 710:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 712:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 716:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 71a:	83 ff       	sbrs	r24, 3
 71c:	3c c1       	rjmp	.+632    	; 0x996 <__vector_11+0x2ae>
                bmRequestType = UEDATX;
 71e:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 722:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 726:	80 91 f1 00 	lds	r24, 0x00F1
 72a:	68 2f       	mov	r22, r24
 72c:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 72e:	20 91 f1 00 	lds	r18, 0x00F1
 732:	92 2f       	mov	r25, r18
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	68 2b       	or	r22, r24
 738:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 73a:	80 91 f1 00 	lds	r24, 0x00F1
 73e:	a8 2f       	mov	r26, r24
 740:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 742:	20 91 f1 00 	lds	r18, 0x00F1
 746:	92 2f       	mov	r25, r18
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	a8 2b       	or	r26, r24
 74c:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 74e:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 752:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 756:	82 ef       	ldi	r24, 0xF2	; 242
 758:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 75c:	36 30       	cpi	r19, 0x06	; 6
 75e:	09 f0       	breq	.+2      	; 0x762 <__vector_11+0x7a>
 760:	5a c0       	rjmp	.+180    	; 0x816 <__vector_11+0x12e>
 762:	2c e8       	ldi	r18, 0x8C	; 140
 764:	31 e0       	ldi	r19, 0x01	; 1
 766:	a9 01       	movw	r20, r18
 768:	45 50       	subi	r20, 0x05	; 5
 76a:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 76c:	f9 01       	movw	r30, r18
 76e:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 770:	85 91       	lpm	r24, Z+
 772:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 774:	86 17       	cp	r24, r22
 776:	97 07       	cpc	r25, r23
 778:	01 f5       	brne	.+64     	; 0x7ba <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 77a:	fa 01       	movw	r30, r20
 77c:	85 91       	lpm	r24, Z+
 77e:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 780:	8a 17       	cp	r24, r26
 782:	9b 07       	cpc	r25, r27
 784:	d1 f4       	brne	.+52     	; 0x7ba <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 786:	9a 01       	movw	r18, r20
 788:	2e 5f       	subi	r18, 0xFE	; 254
 78a:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 78c:	f9 01       	movw	r30, r18
 78e:	65 91       	lpm	r22, Z+
 790:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 792:	2e 5f       	subi	r18, 0xFE	; 254
 794:	3f 4f       	sbci	r19, 0xFF	; 255
 796:	f9 01       	movw	r30, r18
 798:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 79a:	21 2f       	mov	r18, r17
 79c:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 79e:	90 2f       	mov	r25, r16
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	28 2b       	or	r18, r24
 7a4:	39 2b       	or	r19, r25
 7a6:	2f 3f       	cpi	r18, 0xFF	; 255
 7a8:	31 05       	cpc	r19, r1
 7aa:	19 f0       	breq	.+6      	; 0x7b2 <__vector_11+0xca>
 7ac:	10 f0       	brcs	.+4      	; 0x7b2 <__vector_11+0xca>
 7ae:	2f ef       	ldi	r18, 0xFF	; 255
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	24 17       	cp	r18, r20
 7b4:	58 f4       	brcc	.+22     	; 0x7cc <__vector_11+0xe4>
 7b6:	42 2f       	mov	r20, r18
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <__vector_11+0xe4>
 7ba:	29 5f       	subi	r18, 0xF9	; 249
 7bc:	3f 4f       	sbci	r19, 0xFF	; 255
 7be:	49 5f       	subi	r20, 0xF9	; 249
 7c0:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 7c2:	f1 e0       	ldi	r31, 0x01	; 1
 7c4:	26 3b       	cpi	r18, 0xB6	; 182
 7c6:	3f 07       	cpc	r19, r31
 7c8:	89 f6       	brne	.-94     	; 0x76c <__vector_11+0x84>
 7ca:	e5 c0       	rjmp	.+458    	; 0x996 <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 7cc:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 7ce:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 7d2:	28 2f       	mov	r18, r24
 7d4:	30 e0       	ldi	r19, 0x00	; 0
 7d6:	c9 01       	movw	r24, r18
 7d8:	85 70       	andi	r24, 0x05	; 5
 7da:	90 70       	andi	r25, 0x00	; 0
 7dc:	89 2b       	or	r24, r25
 7de:	b9 f3       	breq	.-18     	; 0x7ce <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 7e0:	22 fd       	sbrc	r18, 2
 7e2:	dc c0       	rjmp	.+440    	; 0x99c <__vector_11+0x2b4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 7e4:	34 2f       	mov	r19, r20
 7e6:	41 31       	cpi	r20, 0x11	; 17
 7e8:	08 f0       	brcs	.+2      	; 0x7ec <__vector_11+0x104>
 7ea:	30 e1       	ldi	r19, 0x10	; 16
 7ec:	23 2f       	mov	r18, r19
 7ee:	cb 01       	movw	r24, r22
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <__vector_11+0x116>
				for (i = n; i; i--) {
 7f2:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	e4 91       	lpm	r30, Z+
 7f8:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 7fc:	21 50       	subi	r18, 0x01	; 1
 7fe:	22 23       	and	r18, r18
 800:	c1 f7       	brne	.-16     	; 0x7f2 <__vector_11+0x10a>
 802:	63 0f       	add	r22, r19
 804:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 806:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 808:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 80c:	44 23       	and	r20, r20
 80e:	f9 f6       	brne	.-66     	; 0x7ce <__vector_11+0xe6>
 810:	30 31       	cpi	r19, 0x10	; 16
 812:	e9 f2       	breq	.-70     	; 0x7ce <__vector_11+0xe6>
 814:	c3 c0       	rjmp	.+390    	; 0x99c <__vector_11+0x2b4>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 816:	35 30       	cpi	r19, 0x05	; 5
 818:	61 f4       	brne	.+24     	; 0x832 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 81a:	8e ef       	ldi	r24, 0xFE	; 254
 81c:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 820:	80 91 e8 00 	lds	r24, 0x00E8
 824:	80 ff       	sbrs	r24, 0
 826:	fc cf       	rjmp	.-8      	; 0x820 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 828:	86 2f       	mov	r24, r22
 82a:	80 68       	ori	r24, 0x80	; 128
 82c:	80 93 e3 00 	sts	0x00E3, r24
 830:	b5 c0       	rjmp	.+362    	; 0x99c <__vector_11+0x2b4>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 832:	39 30       	cpi	r19, 0x09	; 9
 834:	51 f5       	brne	.+84     	; 0x88a <__vector_11+0x1a2>
 836:	44 23       	and	r20, r20
 838:	09 f0       	breq	.+2      	; 0x83c <__vector_11+0x154>
 83a:	ad c0       	rjmp	.+346    	; 0x996 <__vector_11+0x2ae>
			usb_configuration = wValue;
 83c:	60 93 0c 01 	sts	0x010C, r22
			cdc_line_rtsdtr = 0;
 840:	10 92 0d 01 	sts	0x010D, r1
			transmit_flush_timer = 0;
 844:	10 92 0e 01 	sts	0x010E, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 848:	8e ef       	ldi	r24, 0xFE	; 254
 84a:	80 93 e8 00 	sts	0x00E8, r24
 84e:	8f ea       	ldi	r24, 0xAF	; 175
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 854:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 858:	fc 01       	movw	r30, r24
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	e4 91       	lpm	r30, Z+
				UECONX = en;
 85e:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 862:	ee 23       	and	r30, r30
 864:	69 f0       	breq	.+26     	; 0x880 <__vector_11+0x198>
					UECFG0X = pgm_read_byte(cfg++);
 866:	ac 01       	movw	r20, r24
 868:	4f 5f       	subi	r20, 0xFF	; 255
 86a:	5f 4f       	sbci	r21, 0xFF	; 255
 86c:	fc 01       	movw	r30, r24
 86e:	84 91       	lpm	r24, Z+
 870:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 874:	ca 01       	movw	r24, r20
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	fa 01       	movw	r30, r20
 87a:	34 91       	lpm	r19, Z+
 87c:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 880:	2f 5f       	subi	r18, 0xFF	; 255
 882:	25 30       	cpi	r18, 0x05	; 5
 884:	39 f7       	brne	.-50     	; 0x854 <__vector_11+0x16c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 886:	8e e1       	ldi	r24, 0x1E	; 30
 888:	81 c0       	rjmp	.+258    	; 0x98c <__vector_11+0x2a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 88a:	38 30       	cpi	r19, 0x08	; 8
 88c:	61 f4       	brne	.+24     	; 0x8a6 <__vector_11+0x1be>
 88e:	40 38       	cpi	r20, 0x80	; 128
 890:	09 f0       	breq	.+2      	; 0x894 <__vector_11+0x1ac>
 892:	81 c0       	rjmp	.+258    	; 0x996 <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 894:	80 91 e8 00 	lds	r24, 0x00E8
 898:	80 ff       	sbrs	r24, 0
 89a:	fc cf       	rjmp	.-8      	; 0x894 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 89c:	80 91 0c 01 	lds	r24, 0x010C
 8a0:	80 93 f1 00 	sts	0x00F1, r24
 8a4:	50 c0       	rjmp	.+160    	; 0x946 <__vector_11+0x25e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 8a6:	31 32       	cpi	r19, 0x21	; 33
 8a8:	89 f4       	brne	.+34     	; 0x8cc <__vector_11+0x1e4>
 8aa:	41 3a       	cpi	r20, 0xA1	; 161
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <__vector_11+0x1c8>
 8ae:	73 c0       	rjmp	.+230    	; 0x996 <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 8b0:	80 91 e8 00 	lds	r24, 0x00E8
 8b4:	80 ff       	sbrs	r24, 0
 8b6:	fc cf       	rjmp	.-8      	; 0x8b0 <__vector_11+0x1c8>
 8b8:	e4 e0       	ldi	r30, 0x04	; 4
 8ba:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 8bc:	81 91       	ld	r24, Z+
 8be:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	eb 30       	cpi	r30, 0x0B	; 11
 8c6:	f8 07       	cpc	r31, r24
 8c8:	c9 f7       	brne	.-14     	; 0x8bc <__vector_11+0x1d4>
 8ca:	3d c0       	rjmp	.+122    	; 0x946 <__vector_11+0x25e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 8cc:	30 32       	cpi	r19, 0x20	; 32
 8ce:	a1 f4       	brne	.+40     	; 0x8f8 <__vector_11+0x210>
 8d0:	41 32       	cpi	r20, 0x21	; 33
 8d2:	09 f0       	breq	.+2      	; 0x8d6 <__vector_11+0x1ee>
 8d4:	60 c0       	rjmp	.+192    	; 0x996 <__vector_11+0x2ae>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 8d6:	80 91 e8 00 	lds	r24, 0x00E8
 8da:	82 ff       	sbrs	r24, 2
 8dc:	fc cf       	rjmp	.-8      	; 0x8d6 <__vector_11+0x1ee>
 8de:	e4 e0       	ldi	r30, 0x04	; 4
 8e0:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 8e2:	80 91 f1 00 	lds	r24, 0x00F1
 8e6:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 8e8:	81 e0       	ldi	r24, 0x01	; 1
 8ea:	eb 30       	cpi	r30, 0x0B	; 11
 8ec:	f8 07       	cpc	r31, r24
 8ee:	c9 f7       	brne	.-14     	; 0x8e2 <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 8f0:	8b ef       	ldi	r24, 0xFB	; 251
 8f2:	80 93 e8 00 	sts	0x00E8, r24
 8f6:	27 c0       	rjmp	.+78     	; 0x946 <__vector_11+0x25e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 8f8:	32 32       	cpi	r19, 0x22	; 34
 8fa:	51 f4       	brne	.+20     	; 0x910 <__vector_11+0x228>
 8fc:	41 32       	cpi	r20, 0x21	; 33
 8fe:	09 f0       	breq	.+2      	; 0x902 <__vector_11+0x21a>
 900:	4a c0       	rjmp	.+148    	; 0x996 <__vector_11+0x2ae>
			cdc_line_rtsdtr = wValue;
 902:	60 93 0d 01 	sts	0x010D, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 906:	80 91 e8 00 	lds	r24, 0x00E8
 90a:	80 ff       	sbrs	r24, 0
 90c:	fc cf       	rjmp	.-8      	; 0x906 <__vector_11+0x21e>
 90e:	1b c0       	rjmp	.+54     	; 0x946 <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 910:	33 23       	and	r19, r19
 912:	e9 f4       	brne	.+58     	; 0x94e <__vector_11+0x266>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 914:	80 91 e8 00 	lds	r24, 0x00E8
 918:	80 ff       	sbrs	r24, 0
 91a:	fc cf       	rjmp	.-8      	; 0x914 <__vector_11+0x22c>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 91c:	42 38       	cpi	r20, 0x82	; 130
 91e:	11 f0       	breq	.+4      	; 0x924 <__vector_11+0x23c>
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	0d c0       	rjmp	.+26     	; 0x93e <__vector_11+0x256>
				UENUM = wIndex;
 924:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 928:	80 91 eb 00 	lds	r24, 0x00EB
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	25 e0       	ldi	r18, 0x05	; 5
 930:	96 95       	lsr	r25
 932:	87 95       	ror	r24
 934:	2a 95       	dec	r18
 936:	e1 f7       	brne	.-8      	; 0x930 <__vector_11+0x248>
 938:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 93a:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 93e:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 942:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 946:	8e ef       	ldi	r24, 0xFE	; 254
 948:	80 93 e8 00 	sts	0x00E8, r24
 94c:	27 c0       	rjmp	.+78     	; 0x99c <__vector_11+0x2b4>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 94e:	31 30       	cpi	r19, 0x01	; 1
 950:	11 f0       	breq	.+4      	; 0x956 <__vector_11+0x26e>
 952:	33 30       	cpi	r19, 0x03	; 3
 954:	01 f5       	brne	.+64     	; 0x996 <__vector_11+0x2ae>
 956:	42 30       	cpi	r20, 0x02	; 2
 958:	f1 f4       	brne	.+60     	; 0x996 <__vector_11+0x2ae>
 95a:	67 2b       	or	r22, r23
 95c:	e1 f4       	brne	.+56     	; 0x996 <__vector_11+0x2ae>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 95e:	2a 2f       	mov	r18, r26
 960:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 962:	82 2f       	mov	r24, r18
 964:	81 50       	subi	r24, 0x01	; 1
 966:	84 30       	cpi	r24, 0x04	; 4
 968:	b0 f4       	brcc	.+44     	; 0x996 <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 96a:	8e ef       	ldi	r24, 0xFE	; 254
 96c:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 970:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 974:	33 30       	cpi	r19, 0x03	; 3
 976:	79 f0       	breq	.+30     	; 0x996 <__vector_11+0x2ae>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 978:	89 e1       	ldi	r24, 0x19	; 25
 97a:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <__vector_11+0x2a0>
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	2a 95       	dec	r18
 98a:	e2 f7       	brpl	.-8      	; 0x984 <__vector_11+0x29c>
 98c:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 990:	10 92 ea 00 	sts	0x00EA, r1
 994:	03 c0       	rjmp	.+6      	; 0x99c <__vector_11+0x2b4>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 996:	81 e2       	ldi	r24, 0x21	; 33
 998:	80 93 eb 00 	sts	0x00EB, r24
}
 99c:	ff 91       	pop	r31
 99e:	ef 91       	pop	r30
 9a0:	bf 91       	pop	r27
 9a2:	af 91       	pop	r26
 9a4:	9f 91       	pop	r25
 9a6:	8f 91       	pop	r24
 9a8:	7f 91       	pop	r23
 9aa:	6f 91       	pop	r22
 9ac:	5f 91       	pop	r21
 9ae:	4f 91       	pop	r20
 9b0:	3f 91       	pop	r19
 9b2:	2f 91       	pop	r18
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	0f 90       	pop	r0
 9ba:	0b be       	out	0x3b, r0	; 59
 9bc:	0f 90       	pop	r0
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	0f 90       	pop	r0
 9c2:	1f 90       	pop	r1
 9c4:	18 95       	reti

000009c6 <_exit>:
 9c6:	f8 94       	cli

000009c8 <__stop_program>:
 9c8:	ff cf       	rjmp	.-2      	; 0x9c8 <__stop_program>
