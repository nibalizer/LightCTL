
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000ed0  00000f64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ed0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  00000f6c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000150  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000309  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001077  00000000  00000000  00001b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004a2  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001446  00000000  00000000  00003082  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  000044c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000053b  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001050  00000000  00000000  00004c43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  00005c93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR3AH = 0x00;
	OCR3AL = 0x00; // Register used by 8bit pwm
	OCR3BH = 0x00;
	OCR3BL = 0x00; // Register used by 8bit pwm
	OCR3CH = 0x00;
	OCR3CL = 0x00; // Register used by 8bit pwm
   0:	68 c1       	rjmp	.+720    	; 0x2d2 <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
   2:	00 00       	nop
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
	sei();
}

uint8_t adc_available(void)
{
   4:	83 c1       	rjmp	.+774    	; 0x30c <__bad_interrupt>
   6:	00 00       	nop
   8:	81 c1       	rjmp	.+770    	; 0x30c <__bad_interrupt>
   a:	00 00       	nop
   c:	7f c1       	rjmp	.+766    	; 0x30c <__bad_interrupt>
   e:	00 00       	nop
  10:	7d c1       	rjmp	.+762    	; 0x30c <__bad_interrupt>
  12:	00 00       	nop
  14:	7b c1       	rjmp	.+758    	; 0x30c <__bad_interrupt>
  16:	00 00       	nop
  18:	79 c1       	rjmp	.+754    	; 0x30c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	77 c1       	rjmp	.+750    	; 0x30c <__bad_interrupt>
  1e:	00 00       	nop
  20:	75 c1       	rjmp	.+746    	; 0x30c <__bad_interrupt>
  22:	00 00       	nop
  24:	73 c1       	rjmp	.+742    	; 0x30c <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c5       	rjmp	.+2706   	; 0xabc <__vector_10>
  2a:	00 00       	nop
  2c:	82 c5       	rjmp	.+2820   	; 0xb32 <__vector_11>
  2e:	00 00       	nop
  30:	6d c1       	rjmp	.+730    	; 0x30c <__bad_interrupt>
  32:	00 00       	nop
  34:	6b c1       	rjmp	.+726    	; 0x30c <__bad_interrupt>
  36:	00 00       	nop
  38:	69 c1       	rjmp	.+722    	; 0x30c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	67 c1       	rjmp	.+718    	; 0x30c <__bad_interrupt>
  3e:	00 00       	nop
  40:	65 c1       	rjmp	.+714    	; 0x30c <__bad_interrupt>
  42:	00 00       	nop
  44:	63 c1       	rjmp	.+710    	; 0x30c <__bad_interrupt>
  46:	00 00       	nop
  48:	61 c1       	rjmp	.+706    	; 0x30c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5f c1       	rjmp	.+702    	; 0x30c <__bad_interrupt>
  4e:	00 00       	nop
  50:	5d c1       	rjmp	.+698    	; 0x30c <__bad_interrupt>
  52:	00 00       	nop
  54:	5b c1       	rjmp	.+694    	; 0x30c <__bad_interrupt>
  56:	00 00       	nop
  58:	59 c1       	rjmp	.+690    	; 0x30c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	57 c1       	rjmp	.+686    	; 0x30c <__bad_interrupt>
  5e:	00 00       	nop
  60:	55 c1       	rjmp	.+682    	; 0x30c <__bad_interrupt>
  62:	00 00       	nop
  64:	53 c1       	rjmp	.+678    	; 0x30c <__bad_interrupt>
  66:	00 00       	nop
  68:	51 c1       	rjmp	.+674    	; 0x30c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4f c1       	rjmp	.+670    	; 0x30c <__bad_interrupt>
  6e:	00 00       	nop
  70:	4d c1       	rjmp	.+666    	; 0x30c <__bad_interrupt>
  72:	00 00       	nop
  74:	f9 c6       	rjmp	.+3570   	; 0xe68 <__vector_29>
  76:	00 00       	nop
  78:	49 c1       	rjmp	.+658    	; 0x30c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	47 c1       	rjmp	.+654    	; 0x30c <__bad_interrupt>
  7e:	00 00       	nop
  80:	45 c1       	rjmp	.+650    	; 0x30c <__bad_interrupt>
  82:	00 00       	nop
  84:	43 c1       	rjmp	.+646    	; 0x30c <__bad_interrupt>
  86:	00 00       	nop
  88:	41 c1       	rjmp	.+642    	; 0x30c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3f c1       	rjmp	.+638    	; 0x30c <__bad_interrupt>
  8e:	00 00       	nop
  90:	3d c1       	rjmp	.+634    	; 0x30c <__bad_interrupt>
  92:	00 00       	nop
  94:	3b c1       	rjmp	.+630    	; 0x30c <__bad_interrupt>
  96:	00 00       	nop
  98:	41 05       	cpc	r20, r1
  9a:	3e 05       	cpc	r19, r14
  9c:	3b 05       	cpc	r19, r11
  9e:	38 05       	cpc	r19, r8
  a0:	35 05       	cpc	r19, r5
  a2:	32 05       	cpc	r19, r2
  a4:	2f 05       	cpc	r18, r15
  a6:	2c 05       	cpc	r18, r12
  a8:	29 05       	cpc	r18, r9
  aa:	26 05       	cpc	r18, r6
  ac:	23 05       	cpc	r18, r3
  ae:	20 05       	cpc	r18, r0
  b0:	1d 05       	cpc	r17, r13
  b2:	1a 05       	cpc	r17, r10
  b4:	17 05       	cpc	r17, r7
  b6:	14 05       	cpc	r17, r4
  b8:	11 05       	cpc	r17, r1
  ba:	0e 05       	cpc	r16, r14
  bc:	0b 05       	cpc	r16, r11
  be:	08 05       	cpc	r16, r8
  c0:	05 05       	cpc	r16, r5
  c2:	02 05       	cpc	r16, r2
  c4:	ff 04       	cpc	r15, r15
  c6:	fc 04       	cpc	r15, r12
  c8:	f9 04       	cpc	r15, r9
  ca:	f6 04       	cpc	r15, r6
  cc:	f3 04       	cpc	r15, r3
  ce:	f0 04       	cpc	r15, r0
  d0:	ed 04       	cpc	r14, r13
  d2:	ea 04       	cpc	r14, r10
  d4:	e7 04       	cpc	r14, r7
  d6:	e4 04       	cpc	r14, r4
  d8:	e1 04       	cpc	r14, r1
  da:	de 04       	cpc	r13, r14
  dc:	db 04       	cpc	r13, r11
  de:	d8 04       	cpc	r13, r8
  e0:	d5 04       	cpc	r13, r5
  e2:	d2 04       	cpc	r13, r2
  e4:	cf 04       	cpc	r12, r15
  e6:	cc 04       	cpc	r12, r12
  e8:	c9 04       	cpc	r12, r9
  ea:	c6 04       	cpc	r12, r6
  ec:	c3 04       	cpc	r12, r3
  ee:	c0 04       	cpc	r12, r0
  f0:	bd 04       	cpc	r11, r13
  f2:	ba 04       	cpc	r11, r10
  f4:	b7 04       	cpc	r11, r7
  f6:	b4 04       	cpc	r11, r4
  f8:	b1 04       	cpc	r11, r1
  fa:	ae 04       	cpc	r10, r14
  fc:	ab 04       	cpc	r10, r11
  fe:	a8 04       	cpc	r10, r8
 100:	a5 04       	cpc	r10, r5
 102:	a2 04       	cpc	r10, r2
 104:	9f 04       	cpc	r9, r15
 106:	9c 04       	cpc	r9, r12
 108:	99 04       	cpc	r9, r9
 10a:	96 04       	cpc	r9, r6
 10c:	93 04       	cpc	r9, r3
 10e:	90 04       	cpc	r9, r0
 110:	8d 04       	cpc	r8, r13
 112:	8a 04       	cpc	r8, r10
 114:	87 04       	cpc	r8, r7
 116:	84 04       	cpc	r8, r4
 118:	81 04       	cpc	r8, r1

0000011a <__c.1627>:
 11a:	22 2c 20 6d 75 73 74 20 62 65 20 3f 20 6f 72 20     ", must be ? or 
 12a:	3d 0d 0a 00                                         =...

0000012e <__c.1625>:
 12e:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
 13e:	22 00                                               ".

00000140 <__c.1623>:
 140:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
 150:	31 0d 0a 00                                         1...

00000154 <__c.1621>:
 154:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

00000164 <__c.1619>:
 164:	0d 0a 00                                            ...

00000167 <__c.1617>:
 167:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
 177:	37 0d 0a 00                                         7...

0000017b <__c.1615>:
 17b:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

00000189 <__c.1613>:
 189:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
 199:	0d 0a 00                                            ...

0000019c <__c.1611>:
 19c:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

000001ab <__c.1609>:
 1ab:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
 1bb:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
 1cb:	20 72 65 71 27 64 0d 0a 00                           req'd...

000001d4 <__c.1544>:
 1d4:	49 4e 56 41 4c 49 44 5f 43 4f 4d 4d 41 4e 44 5f     INVALID_COMMAND_
 1e4:	43 4f 44 45 00                                      CODE.

000001e9 <__c.1531>:
 1e9:	01 02 03 04 05 06 07 08 0a 00                       ..........

000001f3 <__c.1514>:
 1f3:	4d 6f 74 6f 72 20 43 6f 6e 74 72 6f 6c 6c 65 72     Motor Controller
 203:	20 31 2e 30 0a 00                                    1.0..

00000209 <descriptor_list>:
 209:	00 01 00 00 3d 02 12 00 02 00 00 4f 02 43 00 03     ....=......O.C..
 219:	00 00 92 02 04 01 03 09 04 96 02 14 02 03 09 04     ................
 229:	ac 02 16 03 03 09 04 c4 02 0c                       ..........

00000233 <endpoint_config_table>:
 233:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000023d <device_descriptor>:
 23d:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 24d:	03 01                                               ..

0000024f <config1_descriptor>:
 24f:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 25f:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 26f:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 27f:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 28f:	40 00 00                                            @..

00000292 <string0>:
 292:	04 03 09 04                                         ....

00000296 <string1>:
 296:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 2a6:	6d 00 65 00 00 00                                   m.e...

000002ac <string2>:
 2ac:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 2bc:	69 00 61 00 6c 00 00 00                             i.a.l...

000002c4 <string3>:
 2c4:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000002d2 <__ctors_end>:
 2d2:	11 24       	eor	r1, r1
 2d4:	1f be       	out	0x3f, r1	; 63
 2d6:	cf ef       	ldi	r28, 0xFF	; 255
 2d8:	d0 e2       	ldi	r29, 0x20	; 32
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	cd bf       	out	0x3d, r28	; 61

000002de <__do_copy_data>:
 2de:	11 e0       	ldi	r17, 0x01	; 1
 2e0:	a0 e0       	ldi	r26, 0x00	; 0
 2e2:	b1 e0       	ldi	r27, 0x01	; 1
 2e4:	e0 ed       	ldi	r30, 0xD0	; 208
 2e6:	fe e0       	ldi	r31, 0x0E	; 14
 2e8:	00 e0       	ldi	r16, 0x00	; 0
 2ea:	0b bf       	out	0x3b, r16	; 59
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__do_copy_data+0x14>
 2ee:	07 90       	elpm	r0, Z+
 2f0:	0d 92       	st	X+, r0
 2f2:	a8 30       	cpi	r26, 0x08	; 8
 2f4:	b1 07       	cpc	r27, r17
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <__do_copy_data+0x10>

000002f8 <__do_clear_bss>:
 2f8:	11 e0       	ldi	r17, 0x01	; 1
 2fa:	a8 e0       	ldi	r26, 0x08	; 8
 2fc:	b1 e0       	ldi	r27, 0x01	; 1
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <.do_clear_bss_start>

00000300 <.do_clear_bss_loop>:
 300:	1d 92       	st	X+, r1

00000302 <.do_clear_bss_start>:
 302:	a2 31       	cpi	r26, 0x12	; 18
 304:	b1 07       	cpc	r27, r17
 306:	e1 f7       	brne	.-8      	; 0x300 <.do_clear_bss_loop>
 308:	ee d1       	rcall	.+988    	; 0x6e6 <main>
 30a:	e0 c5       	rjmp	.+3008   	; 0xecc <_exit>

0000030c <__bad_interrupt>:
 30c:	79 ce       	rjmp	.-782    	; 0x0 <__vectors>

0000030e <setup_pwms>:

void setup_pwms(void)
{
	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
 30e:	84 b1       	in	r24, 0x04	; 4
 310:	80 6f       	ori	r24, 0xF0	; 240
 312:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
 314:	87 b1       	in	r24, 0x07	; 7
 316:	80 67       	ori	r24, 0x70	; 112
 318:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDD0) | (1 << DDD1);
 31a:	8a b1       	in	r24, 0x0a	; 10
 31c:	83 60       	ori	r24, 0x03	; 3
 31e:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
 320:	93 ea       	ldi	r25, 0xA3	; 163
 322:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
 328:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
 32c:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
 330:	91 ea       	ldi	r25, 0xA1	; 161
 332:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
 336:	89 e0       	ldi	r24, 0x09	; 9
 338:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
 33c:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
 340:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
 344:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
 348:	10 92 92 00 	sts	0x0092, r1
}
 34c:	08 95       	ret

0000034e <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	ec 01       	movw	r28, r24
 354:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
 356:	21 96       	adiw	r28, 0x01	; 1
 358:	84 91       	lpm	r24, Z+
		if (!c) break;
 35a:	88 23       	and	r24, r24
 35c:	11 f0       	breq	.+4      	; 0x362 <send_str+0x14>
		usb_serial_putchar(c);
 35e:	41 d2       	rcall	.+1154   	; 0x7e2 <usb_serial_putchar>
 360:	f9 cf       	rjmp	.-14     	; 0x354 <send_str+0x6>
	}
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <handle_pwm_ports_command>:
	usb_serial_putchar('\n');
}

void handle_pwm_ports_command(void)
{
	usb_serial_putchar('\x03');
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	3b d2       	rcall	.+1142   	; 0x7e2 <usb_serial_putchar>
	usb_serial_putchar('\x00');
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	39 d2       	rcall	.+1138   	; 0x7e2 <usb_serial_putchar>
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
 370:	89 ee       	ldi	r24, 0xE9	; 233
 372:	91 e0       	ldi	r25, 0x01	; 1
}
 374:	ec cf       	rjmp	.-40     	; 0x34e <send_str>

00000376 <handle_ping_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("Motor Controller 1.0\n"));
}

void handle_ping_command(const char *str, uint8_t len)
{
 376:	ff 92       	push	r15
 378:	0f 93       	push	r16
 37a:	1f 93       	push	r17
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	18 2f       	mov	r17, r24
 382:	09 2f       	mov	r16, r25
 384:	f6 2e       	mov	r15, r22
	const char *data_itr;
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	2c d2       	rcall	.+1112   	; 0x7e2 <usb_serial_putchar>
 38a:	21 2f       	mov	r18, r17
 38c:	30 2f       	mov	r19, r16
 38e:	c9 01       	movw	r24, r18
 390:	ec 01       	movw	r28, r24
 392:	11 e0       	ldi	r17, 0x01	; 1
 394:	03 c0       	rjmp	.+6      	; 0x39c <handle_ping_command+0x26>
	while(ndx < len)
	{
		usb_serial_putchar(data_itr[ndx]);
 396:	88 81       	ld	r24, Y
 398:	24 d2       	rcall	.+1096   	; 0x7e2 <usb_serial_putchar>
		++ndx;
 39a:	1f 5f       	subi	r17, 0xFF	; 255
 39c:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
	while(ndx < len)
 39e:	1f 15       	cp	r17, r15
 3a0:	d0 f3       	brcs	.-12     	; 0x396 <handle_ping_command+0x20>
	{
		usb_serial_putchar(data_itr[ndx]);
		++ndx;
	}
	usb_serial_putchar('\n');
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	1e d2       	rcall	.+1084   	; 0x7e2 <usb_serial_putchar>
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	08 95       	ret

000003b2 <handle_version_command>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}
void handle_version_command(void)
{
	usb_serial_putchar('\x00');
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	16 d2       	rcall	.+1068   	; 0x7e2 <usb_serial_putchar>
	send_str(PSTR("Motor Controller 1.0\n"));
 3b6:	83 ef       	ldi	r24, 0xF3	; 243
 3b8:	91 e0       	ldi	r25, 0x01	; 1
}
 3ba:	c9 cf       	rjmp	.-110    	; 0x34e <send_str>

000003bc <handle_set_pwm_command>:
/**
 * @breif Handle a set pwm command
 */

void handle_set_pwm_command(uint8_t port, uint8_t val)
{
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	18 2f       	mov	r17, r24
 3c2:	06 2f       	mov	r16, r22
	usb_serial_putchar('\x04');
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	0d d2       	rcall	.+1050   	; 0x7e2 <usb_serial_putchar>
	usb_serial_putchar(port);
 3c8:	81 2f       	mov	r24, r17
 3ca:	0b d2       	rcall	.+1046   	; 0x7e2 <usb_serial_putchar>
	switch(port)
 3cc:	14 30       	cpi	r17, 0x04	; 4
 3ce:	31 f1       	breq	.+76     	; 0x41c <handle_set_pwm_command+0x60>
 3d0:	15 30       	cpi	r17, 0x05	; 5
 3d2:	48 f4       	brcc	.+18     	; 0x3e6 <handle_set_pwm_command+0x2a>
 3d4:	11 30       	cpi	r17, 0x01	; 1
 3d6:	91 f0       	breq	.+36     	; 0x3fc <handle_set_pwm_command+0x40>
 3d8:	11 30       	cpi	r17, 0x01	; 1
 3da:	70 f0       	brcs	.+28     	; 0x3f8 <handle_set_pwm_command+0x3c>
 3dc:	12 30       	cpi	r17, 0x02	; 2
 3de:	81 f0       	breq	.+32     	; 0x400 <handle_set_pwm_command+0x44>
 3e0:	13 30       	cpi	r17, 0x03	; 3
 3e2:	b9 f5       	brne	.+110    	; 0x452 <handle_set_pwm_command+0x96>
 3e4:	14 c0       	rjmp	.+40     	; 0x40e <handle_set_pwm_command+0x52>
 3e6:	16 30       	cpi	r17, 0x06	; 6
 3e8:	f9 f0       	breq	.+62     	; 0x428 <handle_set_pwm_command+0x6c>
 3ea:	16 30       	cpi	r17, 0x06	; 6
 3ec:	d0 f0       	brcs	.+52     	; 0x422 <handle_set_pwm_command+0x66>
 3ee:	17 30       	cpi	r17, 0x07	; 7
 3f0:	11 f1       	breq	.+68     	; 0x436 <handle_set_pwm_command+0x7a>
 3f2:	18 30       	cpi	r17, 0x08	; 8
 3f4:	71 f5       	brne	.+92     	; 0x452 <handle_set_pwm_command+0x96>
 3f6:	26 c0       	rjmp	.+76     	; 0x444 <handle_set_pwm_command+0x88>
	{
		case 0:
			OCR0A = val;
 3f8:	07 bd       	out	0x27, r16	; 39
 3fa:	2d c0       	rjmp	.+90     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 1:
			OCR0B = val;
 3fc:	08 bd       	out	0x28, r16	; 40
 3fe:	2b c0       	rjmp	.+86     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 2:
			OCR1A = val;
 400:	80 2f       	mov	r24, r16
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 89 00 	sts	0x0089, r25
 408:	80 93 88 00 	sts	0x0088, r24
 40c:	24 c0       	rjmp	.+72     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 3:
			OCR1B = val;
 40e:	80 2f       	mov	r24, r16
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	90 93 8b 00 	sts	0x008B, r25
 416:	80 93 8a 00 	sts	0x008A, r24
 41a:	1d c0       	rjmp	.+58     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 4:
			OCR2A = val;
 41c:	00 93 b3 00 	sts	0x00B3, r16
 420:	1a c0       	rjmp	.+52     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 5:
			OCR2B = val;
 422:	00 93 b4 00 	sts	0x00B4, r16
 426:	17 c0       	rjmp	.+46     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 6:
			OCR3A = val;
 428:	80 2f       	mov	r24, r16
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 99 00 	sts	0x0099, r25
 430:	80 93 98 00 	sts	0x0098, r24
 434:	10 c0       	rjmp	.+32     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 7:
			OCR3B = val;
 436:	80 2f       	mov	r24, r16
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	90 93 9b 00 	sts	0x009B, r25
 43e:	80 93 9a 00 	sts	0x009A, r24
 442:	09 c0       	rjmp	.+18     	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		case 8:
			OCR3C = val;
 444:	80 2f       	mov	r24, r16
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 9d 00 	sts	0x009D, r25
 44c:	80 93 9c 00 	sts	0x009C, r24
 450:	02 c0       	rjmp	.+4      	; 0x456 <handle_set_pwm_command+0x9a>
			break;
		default:
			usb_serial_putchar('\x01');
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	01 c0       	rjmp	.+2      	; 0x458 <handle_set_pwm_command+0x9c>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	c4 d1       	rcall	.+904    	; 0x7e2 <usb_serial_putchar>
	usb_serial_putchar('\n');
 45a:	8a e0       	ldi	r24, 0x0A	; 10
 45c:	c2 d1       	rcall	.+900    	; 0x7e2 <usb_serial_putchar>
}
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	08 95       	ret

00000464 <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
 464:	0f 93       	push	r16
 466:	1f 93       	push	r17
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	ec 01       	movw	r28, r24
 46e:	06 2f       	mov	r16, r22
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	14 c0       	rjmp	.+40     	; 0x49c <recv_str+0x38>
	int16_t r;
	uint8_t count=0;

	while (count < size) {
		r = usb_serial_getchar();
 474:	84 d1       	rcall	.+776    	; 0x77e <usb_serial_getchar>
		if (r != -1) {
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	8f 3f       	cpi	r24, 0xFF	; 255
 47a:	92 07       	cpc	r25, r18
 47c:	49 f0       	breq	.+18     	; 0x490 <recv_str+0x2c>
			if (r == '\r' || r == '\n') return count;
 47e:	8d 30       	cpi	r24, 0x0D	; 13
 480:	91 05       	cpc	r25, r1
 482:	81 f0       	breq	.+32     	; 0x4a4 <recv_str+0x40>
 484:	8a 30       	cpi	r24, 0x0A	; 10
 486:	91 05       	cpc	r25, r1
 488:	69 f0       	breq	.+26     	; 0x4a4 <recv_str+0x40>
			*buf++ = r;
 48a:	89 93       	st	Y+, r24
			//usb_serial_putchar(r);
			count++;
 48c:	1f 5f       	subi	r17, 0xFF	; 255
 48e:	06 c0       	rjmp	.+12     	; 0x49c <recv_str+0x38>
		} else {
			if (!usb_configured() ||
 490:	73 d1       	rcall	.+742    	; 0x778 <usb_configured>
 492:	88 23       	and	r24, r24
 494:	31 f0       	breq	.+12     	; 0x4a2 <recv_str+0x3e>
 496:	0f d3       	rcall	.+1566   	; 0xab6 <usb_serial_get_control>
 498:	80 ff       	sbrs	r24, 0
 49a:	03 c0       	rjmp	.+6      	; 0x4a2 <recv_str+0x3e>
uint8_t recv_str(char *buf, uint8_t size)
{
	int16_t r;
	uint8_t count=0;

	while (count < size) {
 49c:	10 17       	cp	r17, r16
 49e:	50 f3       	brcs	.-44     	; 0x474 <recv_str+0x10>
 4a0:	01 c0       	rjmp	.+2      	; 0x4a4 <recv_str+0x40>
 4a2:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
 4a4:	81 2f       	mov	r24, r17
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <handle_sensor_query>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}

void handle_sensor_query(uint8_t port)
{
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	df 93       	push	r29
 4bc:	cf 93       	push	r28
 4be:	00 d0       	rcall	.+0      	; 0x4c0 <handle_sensor_query+0x10>
 4c0:	00 d0       	rcall	.+0      	; 0x4c2 <handle_sensor_query+0x12>
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	18 2f       	mov	r17, r24
	int i;
    uint16_t val;
    char buf[4];
    int readings = 10;
    usb_serial_putchar('\x07');
 4c8:	87 e0       	ldi	r24, 0x07	; 7
 4ca:	8b d1       	rcall	.+790    	; 0x7e2 <usb_serial_putchar>
	usb_serial_putchar(port);
 4cc:	81 2f       	mov	r24, r17
 4ce:	89 d1       	rcall	.+786    	; 0x7e2 <usb_serial_putchar>
	switch(port)
 4d0:	14 30       	cpi	r17, 0x04	; 4
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <handle_sensor_query+0x26>
 4d4:	b8 c0       	rjmp	.+368    	; 0x646 <handle_sensor_query+0x196>
 4d6:	15 30       	cpi	r17, 0x05	; 5
 4d8:	60 f4       	brcc	.+24     	; 0x4f2 <handle_sensor_query+0x42>
 4da:	11 30       	cpi	r17, 0x01	; 1
 4dc:	09 f4       	brne	.+2      	; 0x4e0 <handle_sensor_query+0x30>
 4de:	59 c0       	rjmp	.+178    	; 0x592 <handle_sensor_query+0xe2>
 4e0:	11 30       	cpi	r17, 0x01	; 1
 4e2:	a0 f0       	brcs	.+40     	; 0x50c <handle_sensor_query+0x5c>
 4e4:	12 30       	cpi	r17, 0x02	; 2
 4e6:	09 f4       	brne	.+2      	; 0x4ea <handle_sensor_query+0x3a>
 4e8:	a0 c0       	rjmp	.+320    	; 0x62a <handle_sensor_query+0x17a>
 4ea:	13 30       	cpi	r17, 0x03	; 3
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <handle_sensor_query+0x40>
 4ee:	ca c0       	rjmp	.+404    	; 0x684 <handle_sensor_query+0x1d4>
 4f0:	a3 c0       	rjmp	.+326    	; 0x638 <handle_sensor_query+0x188>
 4f2:	16 30       	cpi	r17, 0x06	; 6
 4f4:	09 f4       	brne	.+2      	; 0x4f8 <handle_sensor_query+0x48>
 4f6:	b1 c0       	rjmp	.+354    	; 0x65a <handle_sensor_query+0x1aa>
 4f8:	16 30       	cpi	r17, 0x06	; 6
 4fa:	08 f4       	brcc	.+2      	; 0x4fe <handle_sensor_query+0x4e>
 4fc:	a9 c0       	rjmp	.+338    	; 0x650 <handle_sensor_query+0x1a0>
 4fe:	17 30       	cpi	r17, 0x07	; 7
 500:	09 f4       	brne	.+2      	; 0x504 <handle_sensor_query+0x54>
 502:	b2 c0       	rjmp	.+356    	; 0x668 <handle_sensor_query+0x1b8>
 504:	18 30       	cpi	r17, 0x08	; 8
 506:	09 f0       	breq	.+2      	; 0x50a <handle_sensor_query+0x5a>
 508:	bd c0       	rjmp	.+378    	; 0x684 <handle_sensor_query+0x1d4>
 50a:	b5 c0       	rjmp	.+362    	; 0x676 <handle_sensor_query+0x1c6>
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	60 e4       	ldi	r22, 0x40	; 64
 510:	7f d4       	rcall	.+2302   	; 0xe10 <adc_start>
 512:	01 e0       	ldi	r16, 0x01	; 1
 514:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
 516:	f0 e2       	ldi	r31, 0x20	; 32
 518:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
 51a:	7e 01       	movw	r14, r28
 51c:	08 94       	sec
 51e:	e1 1c       	adc	r14, r1
 520:	f1 1c       	adc	r15, r1
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
 522:	8b d4       	rcall	.+2326   	; 0xe3a <adc_read>
 524:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
 526:	89 2f       	mov	r24, r25
 528:	99 27       	eor	r25, r25
 52a:	48 2f       	mov	r20, r24
 52c:	4f 70       	andi	r20, 0x0F	; 15
 52e:	8f 70       	andi	r24, 0x0F	; 15
 530:	90 70       	andi	r25, 0x00	; 0
 532:	0a 97       	sbiw	r24, 0x0a	; 10
 534:	18 f4       	brcc	.+6      	; 0x53c <handle_sensor_query+0x8c>
 536:	54 2f       	mov	r21, r20
 538:	50 5d       	subi	r21, 0xD0	; 208
 53a:	02 c0       	rjmp	.+4      	; 0x540 <handle_sensor_query+0x90>
 53c:	54 2f       	mov	r21, r20
 53e:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
 540:	c9 01       	movw	r24, r18
 542:	74 e0       	ldi	r23, 0x04	; 4
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	7a 95       	dec	r23
 54a:	e1 f7       	brne	.-8      	; 0x544 <handle_sensor_query+0x94>
 54c:	48 2f       	mov	r20, r24
 54e:	4f 70       	andi	r20, 0x0F	; 15
 550:	8f 70       	andi	r24, 0x0F	; 15
 552:	90 70       	andi	r25, 0x00	; 0
 554:	0a 97       	sbiw	r24, 0x0a	; 10
 556:	18 f4       	brcc	.+6      	; 0x55e <handle_sensor_query+0xae>
 558:	84 2f       	mov	r24, r20
 55a:	80 5d       	subi	r24, 0xD0	; 208
 55c:	02 c0       	rjmp	.+4      	; 0x562 <handle_sensor_query+0xb2>
 55e:	84 2f       	mov	r24, r20
 560:	89 5c       	subi	r24, 0xC9	; 201
 562:	92 2f       	mov	r25, r18
 564:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
 566:	2f 70       	andi	r18, 0x0F	; 15
 568:	30 70       	andi	r19, 0x00	; 0
 56a:	2a 30       	cpi	r18, 0x0A	; 10
 56c:	31 05       	cpc	r19, r1
 56e:	10 f4       	brcc	.+4      	; 0x574 <handle_sensor_query+0xc4>
 570:	90 5d       	subi	r25, 0xD0	; 208
 572:	01 c0       	rjmp	.+2      	; 0x576 <handle_sensor_query+0xc6>
 574:	99 5c       	subi	r25, 0xC9	; 201
 576:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
 578:	dc 82       	std	Y+4, r13	; 0x04
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
 57a:	8a 83       	std	Y+2, r24	; 0x02
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
 57c:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
 57e:	c7 01       	movw	r24, r14
 580:	64 e0       	ldi	r22, 0x04	; 4
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	70 d1       	rcall	.+736    	; 0x866 <usb_serial_write>
	switch(port)
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
 586:	0f 5f       	subi	r16, 0xFF	; 255
 588:	1f 4f       	sbci	r17, 0xFF	; 255
 58a:	0a 30       	cpi	r16, 0x0A	; 10
 58c:	11 05       	cpc	r17, r1
 58e:	49 f6       	brne	.-110    	; 0x522 <handle_sensor_query+0x72>
 590:	7b c0       	rjmp	.+246    	; 0x688 <handle_sensor_query+0x1d8>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	60 e4       	ldi	r22, 0x40	; 64
 596:	3c d4       	rcall	.+2168   	; 0xe10 <adc_start>
 598:	88 e8       	ldi	r24, 0x88	; 136
 59a:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 59c:	20 e9       	ldi	r18, 0x90	; 144
 59e:	31 e0       	ldi	r19, 0x01	; 1
 5a0:	f9 01       	movw	r30, r18
 5a2:	31 97       	sbiw	r30, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <handle_sensor_query+0xf2>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5a8:	d9 f7       	brne	.-10     	; 0x5a0 <handle_sensor_query+0xf0>
 5aa:	01 e0       	ldi	r16, 0x01	; 1
 5ac:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
 5ae:	60 e2       	ldi	r22, 0x20	; 32
 5b0:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
 5b2:	7e 01       	movw	r14, r28
 5b4:	08 94       	sec
 5b6:	e1 1c       	adc	r14, r1
 5b8:	f1 1c       	adc	r15, r1
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
 5ba:	3f d4       	rcall	.+2174   	; 0xe3a <adc_read>
 5bc:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
 5be:	89 2f       	mov	r24, r25
 5c0:	99 27       	eor	r25, r25
 5c2:	48 2f       	mov	r20, r24
 5c4:	4f 70       	andi	r20, 0x0F	; 15
 5c6:	8f 70       	andi	r24, 0x0F	; 15
 5c8:	90 70       	andi	r25, 0x00	; 0
 5ca:	0a 97       	sbiw	r24, 0x0a	; 10
 5cc:	18 f4       	brcc	.+6      	; 0x5d4 <handle_sensor_query+0x124>
 5ce:	54 2f       	mov	r21, r20
 5d0:	50 5d       	subi	r21, 0xD0	; 208
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <handle_sensor_query+0x128>
 5d4:	54 2f       	mov	r21, r20
 5d6:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
 5d8:	c9 01       	movw	r24, r18
 5da:	44 e0       	ldi	r20, 0x04	; 4
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	4a 95       	dec	r20
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <handle_sensor_query+0x12c>
 5e4:	48 2f       	mov	r20, r24
 5e6:	4f 70       	andi	r20, 0x0F	; 15
 5e8:	8f 70       	andi	r24, 0x0F	; 15
 5ea:	90 70       	andi	r25, 0x00	; 0
 5ec:	0a 97       	sbiw	r24, 0x0a	; 10
 5ee:	18 f4       	brcc	.+6      	; 0x5f6 <handle_sensor_query+0x146>
 5f0:	84 2f       	mov	r24, r20
 5f2:	80 5d       	subi	r24, 0xD0	; 208
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <handle_sensor_query+0x14a>
 5f6:	84 2f       	mov	r24, r20
 5f8:	89 5c       	subi	r24, 0xC9	; 201
 5fa:	92 2f       	mov	r25, r18
 5fc:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
 5fe:	2f 70       	andi	r18, 0x0F	; 15
 600:	30 70       	andi	r19, 0x00	; 0
 602:	2a 30       	cpi	r18, 0x0A	; 10
 604:	31 05       	cpc	r19, r1
 606:	10 f4       	brcc	.+4      	; 0x60c <handle_sensor_query+0x15c>
 608:	90 5d       	subi	r25, 0xD0	; 208
 60a:	01 c0       	rjmp	.+2      	; 0x60e <handle_sensor_query+0x15e>
 60c:	99 5c       	subi	r25, 0xC9	; 201
 60e:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
 610:	dc 82       	std	Y+4, r13	; 0x04
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
 612:	8a 83       	std	Y+2, r24	; 0x02
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
 614:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
 616:	c7 01       	movw	r24, r14
 618:	64 e0       	ldi	r22, 0x04	; 4
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	24 d1       	rcall	.+584    	; 0x866 <usb_serial_write>
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
 61e:	0f 5f       	subi	r16, 0xFF	; 255
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	0a 30       	cpi	r16, 0x0A	; 10
 624:	11 05       	cpc	r17, r1
 626:	49 f6       	brne	.-110    	; 0x5ba <handle_sensor_query+0x10a>
 628:	2f c0       	rjmp	.+94     	; 0x688 <handle_sensor_query+0x1d8>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 2:
			OCR1A = val;
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	90 93 89 00 	sts	0x0089, r25
 632:	80 93 88 00 	sts	0x0088, r24
 636:	28 c0       	rjmp	.+80     	; 0x688 <handle_sensor_query+0x1d8>
			break;
		case 3:
			OCR1B = val;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	90 93 8b 00 	sts	0x008B, r25
 640:	80 93 8a 00 	sts	0x008A, r24
 644:	21 c0       	rjmp	.+66     	; 0x688 <handle_sensor_query+0x1d8>
			break;
		case 4:
			OCR2A = val;
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	80 93 b3 00 	sts	0x00B3, r24
 64e:	1c c0       	rjmp	.+56     	; 0x688 <handle_sensor_query+0x1d8>
			break;
		case 5:
			OCR2B = val;
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	80 93 b4 00 	sts	0x00B4, r24
 658:	17 c0       	rjmp	.+46     	; 0x688 <handle_sensor_query+0x1d8>
			break;
		case 6:
			OCR3A = val;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	90 93 99 00 	sts	0x0099, r25
 662:	80 93 98 00 	sts	0x0098, r24
 666:	10 c0       	rjmp	.+32     	; 0x688 <handle_sensor_query+0x1d8>
			break;
		case 7:
			OCR3B = val;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	90 93 9b 00 	sts	0x009B, r25
 670:	80 93 9a 00 	sts	0x009A, r24
 674:	09 c0       	rjmp	.+18     	; 0x688 <handle_sensor_query+0x1d8>
			break;
		case 8:
			OCR3C = val;
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	90 93 9d 00 	sts	0x009D, r25
 67e:	80 93 9c 00 	sts	0x009C, r24
 682:	02 c0       	rjmp	.+4      	; 0x688 <handle_sensor_query+0x1d8>
			break;
		default:
			usb_serial_putchar('\x01');
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	01 c0       	rjmp	.+2      	; 0x68a <handle_sensor_query+0x1da>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	ab d0       	rcall	.+342    	; 0x7e2 <usb_serial_putchar>
	usb_serial_putchar('\n');
 68c:	8a e0       	ldi	r24, 0x0A	; 10
 68e:	a9 d0       	rcall	.+338    	; 0x7e2 <usb_serial_putchar>
}
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	cf 91       	pop	r28
 69a:	df 91       	pop	r29
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	08 95       	ret

000006a8 <handle_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
}

void handle_command(const char *str, uint8_t len)
{
 6a8:	fc 01       	movw	r30, r24
	if(len == 0)
 6aa:	66 23       	and	r22, r22
 6ac:	d9 f0       	breq	.+54     	; 0x6e4 <handle_command+0x3c>
		return;

	switch(str[0])
 6ae:	80 81       	ld	r24, Z
 6b0:	83 30       	cpi	r24, 0x03	; 3
 6b2:	79 f0       	breq	.+30     	; 0x6d2 <handle_command+0x2a>
 6b4:	84 30       	cpi	r24, 0x04	; 4
 6b6:	28 f4       	brcc	.+10     	; 0x6c2 <handle_command+0x1a>
 6b8:	88 23       	and	r24, r24
 6ba:	41 f0       	breq	.+16     	; 0x6cc <handle_command+0x24>
 6bc:	81 30       	cpi	r24, 0x01	; 1
 6be:	79 f4       	brne	.+30     	; 0x6de <handle_command+0x36>
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <handle_command+0x26>
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	39 f0       	breq	.+14     	; 0x6d4 <handle_command+0x2c>
 6c6:	87 30       	cpi	r24, 0x07	; 7
 6c8:	51 f4       	brne	.+20     	; 0x6de <handle_command+0x36>
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <handle_command+0x32>
	{
		case 0:
			handle_version_command();
 6cc:	72 ce       	rjmp	.-796    	; 0x3b2 <handle_version_command>
			break;
		case 1:
			handle_ping_command(str, len);
 6ce:	cf 01       	movw	r24, r30
 6d0:	52 ce       	rjmp	.-860    	; 0x376 <handle_ping_command>
			break;
		case 3:
			handle_pwm_ports_command();
 6d2:	4a ce       	rjmp	.-876    	; 0x368 <handle_pwm_ports_command>
			break;
		case 4:
			handle_set_pwm_command(str[1], str[2]);
 6d4:	81 81       	ldd	r24, Z+1	; 0x01
 6d6:	62 81       	ldd	r22, Z+2	; 0x02
 6d8:	71 ce       	rjmp	.-798    	; 0x3bc <handle_set_pwm_command>
			break;
        case 7:
            handle_sensor_query(str[1]);
 6da:	81 81       	ldd	r24, Z+1	; 0x01
 6dc:	e9 ce       	rjmp	.-558    	; 0x4b0 <handle_sensor_query>
            break;
		default:
			send_str(PSTR("INVALID_COMMAND_CODE"));
 6de:	84 ed       	ldi	r24, 0xD4	; 212
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	35 ce       	rjmp	.-918    	; 0x34e <send_str>
 6e4:	08 95       	ret

000006e6 <main>:
	}
}

int main(void)
{
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	cd b7       	in	r28, 0x3d	; 61
 6f0:	de b7       	in	r29, 0x3e	; 62
 6f2:	a0 97       	sbiw	r28, 0x20	; 32
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(2);
 6fe:	80 e8       	ldi	r24, 0x80	; 128
 700:	80 93 61 00 	sts	0x0061, r24
 704:	82 e0       	ldi	r24, 0x02	; 2
 706:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();
 70a:	01 de       	rcall	.-1022   	; 0x30e <setup_pwms>

	usb_init();
 70c:	1c d0       	rcall	.+56     	; 0x746 <usb_init>
	while (!usb_configured()) /* wait */ ;
 70e:	34 d0       	rcall	.+104    	; 0x778 <usb_configured>
 710:	88 23       	and	r24, r24
 712:	e9 f3       	breq	.-6      	; 0x70e <main+0x28>
 714:	80 e1       	ldi	r24, 0x10	; 16
 716:	97 e2       	ldi	r25, 0x27	; 39
 718:	20 e9       	ldi	r18, 0x90	; 144
 71a:	31 e0       	ldi	r19, 0x01	; 1
 71c:	f9 01       	movw	r30, r18
 71e:	31 97       	sbiw	r30, 0x01	; 1
 720:	f1 f7       	brne	.-4      	; 0x71e <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 722:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 724:	d9 f7       	brne	.-10     	; 0x71c <main+0x36>
	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
		usb_serial_flush_input();

		while (1) {
			n = recv_str(buf, sizeof(buf));
 726:	8e 01       	movw	r16, r28
 728:	0f 5f       	subi	r16, 0xFF	; 255
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
	usb_init();
	while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);

	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
 72c:	c4 d1       	rcall	.+904    	; 0xab6 <usb_serial_get_control>
 72e:	80 ff       	sbrs	r24, 0
 730:	fd cf       	rjmp	.-6      	; 0x72c <main+0x46>
		usb_serial_flush_input();
 732:	44 d0       	rcall	.+136    	; 0x7bc <usb_serial_flush_input>

		while (1) {
			n = recv_str(buf, sizeof(buf));
 734:	c8 01       	movw	r24, r16
 736:	60 e2       	ldi	r22, 0x20	; 32
 738:	95 de       	rcall	.-726    	; 0x464 <recv_str>
 73a:	68 2f       	mov	r22, r24
			if (n == 255) break;
 73c:	8f 3f       	cpi	r24, 0xFF	; 255
 73e:	b1 f3       	breq	.-20     	; 0x72c <main+0x46>
			handle_command(buf, n);
 740:	c8 01       	movw	r24, r16
 742:	b2 df       	rcall	.-156    	; 0x6a8 <handle_command>
 744:	f7 cf       	rjmp	.-18     	; 0x734 <main+0x4e>

00000746 <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
 746:	81 e8       	ldi	r24, 0x81	; 129
 748:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 74c:	80 ea       	ldi	r24, 0xA0	; 160
 74e:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 752:	86 e1       	ldi	r24, 0x16	; 22
 754:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 756:	09 b4       	in	r0, 0x29	; 41
 758:	00 fe       	sbrs	r0, 0
 75a:	fd cf       	rjmp	.-6      	; 0x756 <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 75c:	80 e9       	ldi	r24, 0x90	; 144
 75e:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 762:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 766:	10 92 08 01 	sts	0x0108, r1
	cdc_line_rtsdtr = 0;
 76a:	10 92 09 01 	sts	0x0109, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 76e:	8c e0       	ldi	r24, 0x0C	; 12
 770:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 774:	78 94       	sei
}
 776:	08 95       	ret

00000778 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 778:	80 91 08 01 	lds	r24, 0x0108
}
 77c:	08 95       	ret

0000077e <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 77e:	2f b7       	in	r18, 0x3f	; 63
	cli();
 780:	f8 94       	cli
	if (!usb_configuration) {
 782:	80 91 08 01 	lds	r24, 0x0108
 786:	88 23       	and	r24, r24
 788:	39 f0       	breq	.+14     	; 0x798 <usb_serial_getchar+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
 78a:	83 e0       	ldi	r24, 0x03	; 3
 78c:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
 790:	80 91 e8 00 	lds	r24, 0x00E8
 794:	85 fd       	sbrc	r24, 5
 796:	04 c0       	rjmp	.+8      	; 0x7a0 <usb_serial_getchar+0x22>
		// no data in buffer
		SREG = intr_state;
 798:	2f bf       	out	0x3f, r18	; 63
 79a:	2f ef       	ldi	r18, 0xFF	; 255
 79c:	3f ef       	ldi	r19, 0xFF	; 255
 79e:	0c c0       	rjmp	.+24     	; 0x7b8 <usb_serial_getchar+0x3a>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
 7a0:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
 7a4:	80 91 e8 00 	lds	r24, 0x00E8
 7a8:	85 fd       	sbrc	r24, 5
 7aa:	03 c0       	rjmp	.+6      	; 0x7b2 <usb_serial_getchar+0x34>
 7ac:	8b e6       	ldi	r24, 0x6B	; 107
 7ae:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
 7b2:	2f bf       	out	0x3f, r18	; 63
	return c;
 7b4:	29 2f       	mov	r18, r25
 7b6:	30 e0       	ldi	r19, 0x00	; 0
}
 7b8:	c9 01       	movw	r24, r18
 7ba:	08 95       	ret

000007bc <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
 7bc:	80 91 08 01 	lds	r24, 0x0108
 7c0:	88 23       	and	r24, r24
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <usb_serial_flush_input+0x24>
		intr_state = SREG;
 7c4:	9f b7       	in	r25, 0x3f	; 63
		cli();
 7c6:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
 7c8:	83 e0       	ldi	r24, 0x03	; 3
 7ca:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
 7ce:	2b e6       	ldi	r18, 0x6B	; 107
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <usb_serial_flush_input+0x1a>
 7d2:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
 7d6:	80 91 e8 00 	lds	r24, 0x00E8
 7da:	85 fd       	sbrc	r24, 5
 7dc:	fa cf       	rjmp	.-12     	; 0x7d2 <usb_serial_flush_input+0x16>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
 7de:	9f bf       	out	0x3f, r25	; 63
 7e0:	08 95       	ret

000007e2 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
 7e2:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 7e4:	80 91 08 01 	lds	r24, 0x0108
 7e8:	88 23       	and	r24, r24
 7ea:	d9 f1       	breq	.+118    	; 0x862 <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 7ec:	2f b7       	in	r18, 0x3f	; 63
	cli();
 7ee:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 7f0:	84 e0       	ldi	r24, 0x04	; 4
 7f2:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 7f6:	80 91 0b 01 	lds	r24, 0x010B
 7fa:	88 23       	and	r24, r24
 7fc:	41 f0       	breq	.+16     	; 0x80e <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
 7fe:	80 91 e8 00 	lds	r24, 0x00E8
 802:	85 fd       	sbrc	r24, 5
 804:	02 c0       	rjmp	.+4      	; 0x80a <usb_serial_putchar+0x28>
			SREG = intr_state;
 806:	2f bf       	out	0x3f, r18	; 63
 808:	12 c0       	rjmp	.+36     	; 0x82e <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
 80a:	10 92 0b 01 	sts	0x010B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
 80e:	90 91 e4 00 	lds	r25, 0x00E4
 812:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
 814:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
 816:	80 91 e8 00 	lds	r24, 0x00E8
 81a:	85 fd       	sbrc	r24, 5
 81c:	13 c0       	rjmp	.+38     	; 0x844 <usb_serial_putchar+0x62>
		SREG = intr_state;
 81e:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
 820:	80 91 e4 00 	lds	r24, 0x00E4
 824:	89 17       	cp	r24, r25
 826:	29 f4       	brne	.+10     	; 0x832 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	80 93 0b 01 	sts	0x010B, r24
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
 832:	80 91 08 01 	lds	r24, 0x0108
 836:	88 23       	and	r24, r24
 838:	a1 f0       	breq	.+40     	; 0x862 <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
 83a:	2f b7       	in	r18, 0x3f	; 63
		cli();
 83c:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
 83e:	30 93 e9 00 	sts	0x00E9, r19
 842:	e9 cf       	rjmp	.-46     	; 0x816 <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
 844:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 848:	80 91 e8 00 	lds	r24, 0x00E8
 84c:	85 fd       	sbrc	r24, 5
 84e:	03 c0       	rjmp	.+6      	; 0x856 <usb_serial_putchar+0x74>
 850:	8a e3       	ldi	r24, 0x3A	; 58
 852:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 856:	85 e0       	ldi	r24, 0x05	; 5
 858:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
 85c:	2f bf       	out	0x3f, r18	; 63
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	08 95       	ret
	return 0;
 862:	8f ef       	ldi	r24, 0xFF	; 255
}
 864:	08 95       	ret

00000866 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
 866:	cf 93       	push	r28
 868:	df 93       	push	r29
 86a:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 86c:	80 91 08 01 	lds	r24, 0x0108
 870:	88 23       	and	r24, r24
 872:	09 f4       	brne	.+2      	; 0x876 <usb_serial_write+0x10>
 874:	1c c1       	rjmp	.+568    	; 0xaae <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 876:	3f b7       	in	r19, 0x3f	; 63
	cli();
 878:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 87a:	84 e0       	ldi	r24, 0x04	; 4
 87c:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 880:	80 91 0b 01 	lds	r24, 0x010B
 884:	88 23       	and	r24, r24
 886:	09 f4       	brne	.+2      	; 0x88a <usb_serial_write+0x24>
 888:	07 c1       	rjmp	.+526    	; 0xa98 <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
 88a:	80 91 e8 00 	lds	r24, 0x00E8
 88e:	85 fd       	sbrc	r24, 5
 890:	02 c0       	rjmp	.+4      	; 0x896 <usb_serial_write+0x30>
			SREG = intr_state;
 892:	3f bf       	out	0x3f, r19	; 63
 894:	0c c1       	rjmp	.+536    	; 0xaae <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
 896:	10 92 0b 01 	sts	0x010B, r1
 89a:	fe c0       	rjmp	.+508    	; 0xa98 <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 89c:	90 91 e4 00 	lds	r25, 0x00E4
 8a0:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
 8a2:	80 91 e8 00 	lds	r24, 0x00E8
 8a6:	85 fd       	sbrc	r24, 5
 8a8:	13 c0       	rjmp	.+38     	; 0x8d0 <usb_serial_write+0x6a>
			SREG = intr_state;
 8aa:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
 8ac:	80 91 e4 00 	lds	r24, 0x00E4
 8b0:	89 17       	cp	r24, r25
 8b2:	21 f4       	brne	.+8      	; 0x8bc <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
 8b4:	81 e0       	ldi	r24, 0x01	; 1
 8b6:	80 93 0b 01 	sts	0x010B, r24
 8ba:	f9 c0       	rjmp	.+498    	; 0xaae <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 8bc:	80 91 08 01 	lds	r24, 0x0108
 8c0:	88 23       	and	r24, r24
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <usb_serial_write+0x60>
 8c4:	f4 c0       	rjmp	.+488    	; 0xaae <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
 8c6:	3f b7       	in	r19, 0x3f	; 63
			cli();
 8c8:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
 8ca:	50 93 e9 00 	sts	0x00E9, r21
 8ce:	e9 cf       	rjmp	.-46     	; 0x8a2 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
 8d0:	80 91 f2 00 	lds	r24, 0x00F2
 8d4:	2a 2f       	mov	r18, r26
 8d6:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
 8d8:	82 2f       	mov	r24, r18
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	68 17       	cp	r22, r24
 8de:	79 07       	cpc	r23, r25
 8e0:	08 f4       	brcc	.+2      	; 0x8e4 <usb_serial_write+0x7e>
 8e2:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
 8e4:	82 2f       	mov	r24, r18
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	81 34       	cpi	r24, 0x41	; 65
 8ea:	91 05       	cpc	r25, r1
 8ec:	08 f0       	brcs	.+2      	; 0x8f0 <usb_serial_write+0x8a>
 8ee:	c6 c0       	rjmp	.+396    	; 0xa7c <usb_serial_write+0x216>
 8f0:	84 5b       	subi	r24, 0xB4	; 180
 8f2:	9f 4f       	sbci	r25, 0xFF	; 255
 8f4:	fc 01       	movw	r30, r24
 8f6:	ee 0f       	add	r30, r30
 8f8:	ff 1f       	adc	r31, r31
 8fa:	05 90       	lpm	r0, Z+
 8fc:	f4 91       	lpm	r31, Z+
 8fe:	e0 2d       	mov	r30, r0
 900:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
 902:	89 91       	ld	r24, Y+
 904:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
 908:	89 91       	ld	r24, Y+
 90a:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
 90e:	89 91       	ld	r24, Y+
 910:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
 914:	89 91       	ld	r24, Y+
 916:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
 91a:	89 91       	ld	r24, Y+
 91c:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
 920:	89 91       	ld	r24, Y+
 922:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
 926:	89 91       	ld	r24, Y+
 928:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
 92c:	89 91       	ld	r24, Y+
 92e:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
 932:	89 91       	ld	r24, Y+
 934:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
 938:	89 91       	ld	r24, Y+
 93a:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
 93e:	89 91       	ld	r24, Y+
 940:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
 944:	89 91       	ld	r24, Y+
 946:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
 94a:	89 91       	ld	r24, Y+
 94c:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
 950:	89 91       	ld	r24, Y+
 952:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
 956:	89 91       	ld	r24, Y+
 958:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
 95c:	89 91       	ld	r24, Y+
 95e:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
 962:	89 91       	ld	r24, Y+
 964:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
 968:	89 91       	ld	r24, Y+
 96a:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
 96e:	89 91       	ld	r24, Y+
 970:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
 974:	89 91       	ld	r24, Y+
 976:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
 97a:	89 91       	ld	r24, Y+
 97c:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
 980:	89 91       	ld	r24, Y+
 982:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
 986:	89 91       	ld	r24, Y+
 988:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
 98c:	89 91       	ld	r24, Y+
 98e:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
 992:	89 91       	ld	r24, Y+
 994:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
 998:	89 91       	ld	r24, Y+
 99a:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
 99e:	89 91       	ld	r24, Y+
 9a0:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
 9a4:	89 91       	ld	r24, Y+
 9a6:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
 9aa:	89 91       	ld	r24, Y+
 9ac:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
 9b0:	89 91       	ld	r24, Y+
 9b2:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
 9b6:	89 91       	ld	r24, Y+
 9b8:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
 9bc:	89 91       	ld	r24, Y+
 9be:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 9c2:	89 91       	ld	r24, Y+
 9c4:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
 9c8:	89 91       	ld	r24, Y+
 9ca:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
 9ce:	89 91       	ld	r24, Y+
 9d0:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
 9d4:	89 91       	ld	r24, Y+
 9d6:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
 9da:	89 91       	ld	r24, Y+
 9dc:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
 9e0:	89 91       	ld	r24, Y+
 9e2:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
 9e6:	89 91       	ld	r24, Y+
 9e8:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
 9ec:	89 91       	ld	r24, Y+
 9ee:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
 9f2:	89 91       	ld	r24, Y+
 9f4:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
 9f8:	89 91       	ld	r24, Y+
 9fa:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
 9fe:	89 91       	ld	r24, Y+
 a00:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
 a04:	89 91       	ld	r24, Y+
 a06:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
 a0a:	89 91       	ld	r24, Y+
 a0c:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
 a10:	89 91       	ld	r24, Y+
 a12:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
 a16:	89 91       	ld	r24, Y+
 a18:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
 a1c:	89 91       	ld	r24, Y+
 a1e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 a22:	89 91       	ld	r24, Y+
 a24:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
 a28:	89 91       	ld	r24, Y+
 a2a:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
 a2e:	89 91       	ld	r24, Y+
 a30:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
 a34:	89 91       	ld	r24, Y+
 a36:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
 a3a:	89 91       	ld	r24, Y+
 a3c:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
 a40:	89 91       	ld	r24, Y+
 a42:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
 a46:	89 91       	ld	r24, Y+
 a48:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
 a4c:	89 91       	ld	r24, Y+
 a4e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
 a52:	89 91       	ld	r24, Y+
 a54:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
 a58:	89 91       	ld	r24, Y+
 a5a:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
 a5e:	89 91       	ld	r24, Y+
 a60:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
 a64:	89 91       	ld	r24, Y+
 a66:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
 a6a:	89 91       	ld	r24, Y+
 a6c:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
 a70:	89 91       	ld	r24, Y+
 a72:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
 a76:	89 91       	ld	r24, Y+
 a78:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
 a7c:	89 91       	ld	r24, Y+
 a7e:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 a82:	80 91 e8 00 	lds	r24, 0x00E8
 a86:	85 fd       	sbrc	r24, 5
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <usb_serial_write+0x228>
 a8a:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
 a8e:	62 1b       	sub	r22, r18
 a90:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 a92:	40 93 0a 01 	sts	0x010A, r20
 a96:	04 c0       	rjmp	.+8      	; 0xaa0 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
 a98:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
 a9a:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 a9c:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 a9e:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 aa0:	61 15       	cp	r22, r1
 aa2:	71 05       	cpc	r23, r1
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <usb_serial_write+0x242>
 aa6:	fa ce       	rjmp	.-524    	; 0x89c <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
 aa8:	3f bf       	out	0x3f, r19	; 63
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	01 c0       	rjmp	.+2      	; 0xab0 <usb_serial_write+0x24a>
	return 0;
 aae:	8f ef       	ldi	r24, 0xFF	; 255
}
 ab0:	df 91       	pop	r29
 ab2:	cf 91       	pop	r28
 ab4:	08 95       	ret

00000ab6 <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
 ab6:	80 91 09 01 	lds	r24, 0x0109
 aba:	08 95       	ret

00000abc <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 abc:	1f 92       	push	r1
 abe:	0f 92       	push	r0
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	0f 92       	push	r0
 ac4:	11 24       	eor	r1, r1
 ac6:	8f 93       	push	r24
 ac8:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 aca:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 ace:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 ad2:	98 2f       	mov	r25, r24
 ad4:	83 ff       	sbrs	r24, 3
 ad6:	11 c0       	rjmp	.+34     	; 0xafa <__vector_10+0x3e>
		UENUM = 0;
 ad8:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 ae2:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 ae6:	82 e1       	ldi	r24, 0x12	; 18
 ae8:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 aec:	88 e0       	ldi	r24, 0x08	; 8
 aee:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 af2:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
 af6:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
 afa:	92 ff       	sbrs	r25, 2
 afc:	13 c0       	rjmp	.+38     	; 0xb24 <__vector_10+0x68>
		if (usb_configuration) {
 afe:	80 91 08 01 	lds	r24, 0x0108
 b02:	88 23       	and	r24, r24
 b04:	79 f0       	breq	.+30     	; 0xb24 <__vector_10+0x68>
			t = transmit_flush_timer;
 b06:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
 b0a:	88 23       	and	r24, r24
 b0c:	59 f0       	breq	.+22     	; 0xb24 <__vector_10+0x68>
				transmit_flush_timer = --t;
 b0e:	81 50       	subi	r24, 0x01	; 1
 b10:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
 b14:	88 23       	and	r24, r24
 b16:	31 f4       	brne	.+12     	; 0xb24 <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
 b18:	84 e0       	ldi	r24, 0x04	; 4
 b1a:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 b1e:	8a e3       	ldi	r24, 0x3A	; 58
 b20:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 b24:	9f 91       	pop	r25
 b26:	8f 91       	pop	r24
 b28:	0f 90       	pop	r0
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	0f 90       	pop	r0
 b2e:	1f 90       	pop	r1
 b30:	18 95       	reti

00000b32 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 b32:	1f 92       	push	r1
 b34:	0f 92       	push	r0
 b36:	0f b6       	in	r0, 0x3f	; 63
 b38:	0f 92       	push	r0
 b3a:	0b b6       	in	r0, 0x3b	; 59
 b3c:	0f 92       	push	r0
 b3e:	11 24       	eor	r1, r1
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	2f 93       	push	r18
 b46:	3f 93       	push	r19
 b48:	4f 93       	push	r20
 b4a:	5f 93       	push	r21
 b4c:	6f 93       	push	r22
 b4e:	7f 93       	push	r23
 b50:	8f 93       	push	r24
 b52:	9f 93       	push	r25
 b54:	af 93       	push	r26
 b56:	bf 93       	push	r27
 b58:	ef 93       	push	r30
 b5a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 b5c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 b60:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 b64:	83 ff       	sbrs	r24, 3
 b66:	3c c1       	rjmp	.+632    	; 0xde0 <__vector_11+0x2ae>
                bmRequestType = UEDATX;
 b68:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 b6c:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 b70:	80 91 f1 00 	lds	r24, 0x00F1
 b74:	68 2f       	mov	r22, r24
 b76:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 b78:	20 91 f1 00 	lds	r18, 0x00F1
 b7c:	92 2f       	mov	r25, r18
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	68 2b       	or	r22, r24
 b82:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 b84:	80 91 f1 00 	lds	r24, 0x00F1
 b88:	a8 2f       	mov	r26, r24
 b8a:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 b8c:	20 91 f1 00 	lds	r18, 0x00F1
 b90:	92 2f       	mov	r25, r18
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	a8 2b       	or	r26, r24
 b96:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 b98:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 b9c:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 ba0:	82 ef       	ldi	r24, 0xF2	; 242
 ba2:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 ba6:	36 30       	cpi	r19, 0x06	; 6
 ba8:	09 f0       	breq	.+2      	; 0xbac <__vector_11+0x7a>
 baa:	5a c0       	rjmp	.+180    	; 0xc60 <__vector_11+0x12e>
 bac:	20 e1       	ldi	r18, 0x10	; 16
 bae:	32 e0       	ldi	r19, 0x02	; 2
 bb0:	a9 01       	movw	r20, r18
 bb2:	45 50       	subi	r20, 0x05	; 5
 bb4:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 bb6:	f9 01       	movw	r30, r18
 bb8:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 bba:	85 91       	lpm	r24, Z+
 bbc:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 bbe:	86 17       	cp	r24, r22
 bc0:	97 07       	cpc	r25, r23
 bc2:	01 f5       	brne	.+64     	; 0xc04 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 bc4:	fa 01       	movw	r30, r20
 bc6:	85 91       	lpm	r24, Z+
 bc8:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 bca:	8a 17       	cp	r24, r26
 bcc:	9b 07       	cpc	r25, r27
 bce:	d1 f4       	brne	.+52     	; 0xc04 <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 bd0:	9a 01       	movw	r18, r20
 bd2:	2e 5f       	subi	r18, 0xFE	; 254
 bd4:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 bd6:	f9 01       	movw	r30, r18
 bd8:	65 91       	lpm	r22, Z+
 bda:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 bdc:	2e 5f       	subi	r18, 0xFE	; 254
 bde:	3f 4f       	sbci	r19, 0xFF	; 255
 be0:	f9 01       	movw	r30, r18
 be2:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 be4:	21 2f       	mov	r18, r17
 be6:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 be8:	90 2f       	mov	r25, r16
 bea:	80 e0       	ldi	r24, 0x00	; 0
 bec:	28 2b       	or	r18, r24
 bee:	39 2b       	or	r19, r25
 bf0:	2f 3f       	cpi	r18, 0xFF	; 255
 bf2:	31 05       	cpc	r19, r1
 bf4:	19 f0       	breq	.+6      	; 0xbfc <__vector_11+0xca>
 bf6:	10 f0       	brcs	.+4      	; 0xbfc <__vector_11+0xca>
 bf8:	2f ef       	ldi	r18, 0xFF	; 255
 bfa:	30 e0       	ldi	r19, 0x00	; 0
 bfc:	24 17       	cp	r18, r20
 bfe:	58 f4       	brcc	.+22     	; 0xc16 <__vector_11+0xe4>
 c00:	42 2f       	mov	r20, r18
 c02:	09 c0       	rjmp	.+18     	; 0xc16 <__vector_11+0xe4>
 c04:	29 5f       	subi	r18, 0xF9	; 249
 c06:	3f 4f       	sbci	r19, 0xFF	; 255
 c08:	49 5f       	subi	r20, 0xF9	; 249
 c0a:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 c0c:	f2 e0       	ldi	r31, 0x02	; 2
 c0e:	2a 33       	cpi	r18, 0x3A	; 58
 c10:	3f 07       	cpc	r19, r31
 c12:	89 f6       	brne	.-94     	; 0xbb6 <__vector_11+0x84>
 c14:	e5 c0       	rjmp	.+458    	; 0xde0 <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c16:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 c18:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 c1c:	28 2f       	mov	r18, r24
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	c9 01       	movw	r24, r18
 c22:	85 70       	andi	r24, 0x05	; 5
 c24:	90 70       	andi	r25, 0x00	; 0
 c26:	89 2b       	or	r24, r25
 c28:	b9 f3       	breq	.-18     	; 0xc18 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 c2a:	22 fd       	sbrc	r18, 2
 c2c:	dc c0       	rjmp	.+440    	; 0xde6 <__vector_11+0x2b4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 c2e:	34 2f       	mov	r19, r20
 c30:	41 31       	cpi	r20, 0x11	; 17
 c32:	08 f0       	brcs	.+2      	; 0xc36 <__vector_11+0x104>
 c34:	30 e1       	ldi	r19, 0x10	; 16
 c36:	23 2f       	mov	r18, r19
 c38:	cb 01       	movw	r24, r22
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <__vector_11+0x116>
				for (i = n; i; i--) {
 c3c:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 c3e:	01 96       	adiw	r24, 0x01	; 1
 c40:	e4 91       	lpm	r30, Z+
 c42:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 c46:	21 50       	subi	r18, 0x01	; 1
 c48:	22 23       	and	r18, r18
 c4a:	c1 f7       	brne	.-16     	; 0xc3c <__vector_11+0x10a>
 c4c:	63 0f       	add	r22, r19
 c4e:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 c50:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c52:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 c56:	44 23       	and	r20, r20
 c58:	f9 f6       	brne	.-66     	; 0xc18 <__vector_11+0xe6>
 c5a:	30 31       	cpi	r19, 0x10	; 16
 c5c:	e9 f2       	breq	.-70     	; 0xc18 <__vector_11+0xe6>
 c5e:	c3 c0       	rjmp	.+390    	; 0xde6 <__vector_11+0x2b4>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 c60:	35 30       	cpi	r19, 0x05	; 5
 c62:	61 f4       	brne	.+24     	; 0xc7c <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c64:	8e ef       	ldi	r24, 0xFE	; 254
 c66:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 c6a:	80 91 e8 00 	lds	r24, 0x00E8
 c6e:	80 ff       	sbrs	r24, 0
 c70:	fc cf       	rjmp	.-8      	; 0xc6a <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 c72:	86 2f       	mov	r24, r22
 c74:	80 68       	ori	r24, 0x80	; 128
 c76:	80 93 e3 00 	sts	0x00E3, r24
 c7a:	b5 c0       	rjmp	.+362    	; 0xde6 <__vector_11+0x2b4>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 c7c:	39 30       	cpi	r19, 0x09	; 9
 c7e:	51 f5       	brne	.+84     	; 0xcd4 <__vector_11+0x1a2>
 c80:	44 23       	and	r20, r20
 c82:	09 f0       	breq	.+2      	; 0xc86 <__vector_11+0x154>
 c84:	ad c0       	rjmp	.+346    	; 0xde0 <__vector_11+0x2ae>
			usb_configuration = wValue;
 c86:	60 93 08 01 	sts	0x0108, r22
			cdc_line_rtsdtr = 0;
 c8a:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
 c8e:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 c92:	8e ef       	ldi	r24, 0xFE	; 254
 c94:	80 93 e8 00 	sts	0x00E8, r24
 c98:	83 e3       	ldi	r24, 0x33	; 51
 c9a:	92 e0       	ldi	r25, 0x02	; 2
 c9c:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 c9e:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 ca2:	fc 01       	movw	r30, r24
 ca4:	01 96       	adiw	r24, 0x01	; 1
 ca6:	e4 91       	lpm	r30, Z+
				UECONX = en;
 ca8:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 cac:	ee 23       	and	r30, r30
 cae:	69 f0       	breq	.+26     	; 0xcca <__vector_11+0x198>
					UECFG0X = pgm_read_byte(cfg++);
 cb0:	ac 01       	movw	r20, r24
 cb2:	4f 5f       	subi	r20, 0xFF	; 255
 cb4:	5f 4f       	sbci	r21, 0xFF	; 255
 cb6:	fc 01       	movw	r30, r24
 cb8:	84 91       	lpm	r24, Z+
 cba:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 cbe:	ca 01       	movw	r24, r20
 cc0:	01 96       	adiw	r24, 0x01	; 1
 cc2:	fa 01       	movw	r30, r20
 cc4:	34 91       	lpm	r19, Z+
 cc6:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 cca:	2f 5f       	subi	r18, 0xFF	; 255
 ccc:	25 30       	cpi	r18, 0x05	; 5
 cce:	39 f7       	brne	.-50     	; 0xc9e <__vector_11+0x16c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 cd0:	8e e1       	ldi	r24, 0x1E	; 30
 cd2:	81 c0       	rjmp	.+258    	; 0xdd6 <__vector_11+0x2a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 cd4:	38 30       	cpi	r19, 0x08	; 8
 cd6:	61 f4       	brne	.+24     	; 0xcf0 <__vector_11+0x1be>
 cd8:	40 38       	cpi	r20, 0x80	; 128
 cda:	09 f0       	breq	.+2      	; 0xcde <__vector_11+0x1ac>
 cdc:	81 c0       	rjmp	.+258    	; 0xde0 <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 cde:	80 91 e8 00 	lds	r24, 0x00E8
 ce2:	80 ff       	sbrs	r24, 0
 ce4:	fc cf       	rjmp	.-8      	; 0xcde <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 ce6:	80 91 08 01 	lds	r24, 0x0108
 cea:	80 93 f1 00 	sts	0x00F1, r24
 cee:	50 c0       	rjmp	.+160    	; 0xd90 <__vector_11+0x25e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 cf0:	31 32       	cpi	r19, 0x21	; 33
 cf2:	89 f4       	brne	.+34     	; 0xd16 <__vector_11+0x1e4>
 cf4:	41 3a       	cpi	r20, 0xA1	; 161
 cf6:	09 f0       	breq	.+2      	; 0xcfa <__vector_11+0x1c8>
 cf8:	73 c0       	rjmp	.+230    	; 0xde0 <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 cfa:	80 91 e8 00 	lds	r24, 0x00E8
 cfe:	80 ff       	sbrs	r24, 0
 d00:	fc cf       	rjmp	.-8      	; 0xcfa <__vector_11+0x1c8>
 d02:	e0 e0       	ldi	r30, 0x00	; 0
 d04:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 d06:	81 91       	ld	r24, Z+
 d08:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	e7 30       	cpi	r30, 0x07	; 7
 d10:	f8 07       	cpc	r31, r24
 d12:	c9 f7       	brne	.-14     	; 0xd06 <__vector_11+0x1d4>
 d14:	3d c0       	rjmp	.+122    	; 0xd90 <__vector_11+0x25e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 d16:	30 32       	cpi	r19, 0x20	; 32
 d18:	a1 f4       	brne	.+40     	; 0xd42 <__vector_11+0x210>
 d1a:	41 32       	cpi	r20, 0x21	; 33
 d1c:	09 f0       	breq	.+2      	; 0xd20 <__vector_11+0x1ee>
 d1e:	60 c0       	rjmp	.+192    	; 0xde0 <__vector_11+0x2ae>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 d20:	80 91 e8 00 	lds	r24, 0x00E8
 d24:	82 ff       	sbrs	r24, 2
 d26:	fc cf       	rjmp	.-8      	; 0xd20 <__vector_11+0x1ee>
 d28:	e0 e0       	ldi	r30, 0x00	; 0
 d2a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 d2c:	80 91 f1 00 	lds	r24, 0x00F1
 d30:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 d32:	81 e0       	ldi	r24, 0x01	; 1
 d34:	e7 30       	cpi	r30, 0x07	; 7
 d36:	f8 07       	cpc	r31, r24
 d38:	c9 f7       	brne	.-14     	; 0xd2c <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 d3a:	8b ef       	ldi	r24, 0xFB	; 251
 d3c:	80 93 e8 00 	sts	0x00E8, r24
 d40:	27 c0       	rjmp	.+78     	; 0xd90 <__vector_11+0x25e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 d42:	32 32       	cpi	r19, 0x22	; 34
 d44:	51 f4       	brne	.+20     	; 0xd5a <__vector_11+0x228>
 d46:	41 32       	cpi	r20, 0x21	; 33
 d48:	09 f0       	breq	.+2      	; 0xd4c <__vector_11+0x21a>
 d4a:	4a c0       	rjmp	.+148    	; 0xde0 <__vector_11+0x2ae>
			cdc_line_rtsdtr = wValue;
 d4c:	60 93 09 01 	sts	0x0109, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 d50:	80 91 e8 00 	lds	r24, 0x00E8
 d54:	80 ff       	sbrs	r24, 0
 d56:	fc cf       	rjmp	.-8      	; 0xd50 <__vector_11+0x21e>
 d58:	1b c0       	rjmp	.+54     	; 0xd90 <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 d5a:	33 23       	and	r19, r19
 d5c:	e9 f4       	brne	.+58     	; 0xd98 <__vector_11+0x266>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 d5e:	80 91 e8 00 	lds	r24, 0x00E8
 d62:	80 ff       	sbrs	r24, 0
 d64:	fc cf       	rjmp	.-8      	; 0xd5e <__vector_11+0x22c>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 d66:	42 38       	cpi	r20, 0x82	; 130
 d68:	11 f0       	breq	.+4      	; 0xd6e <__vector_11+0x23c>
 d6a:	80 e0       	ldi	r24, 0x00	; 0
 d6c:	0d c0       	rjmp	.+26     	; 0xd88 <__vector_11+0x256>
				UENUM = wIndex;
 d6e:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 d72:	80 91 eb 00 	lds	r24, 0x00EB
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	25 e0       	ldi	r18, 0x05	; 5
 d7a:	96 95       	lsr	r25
 d7c:	87 95       	ror	r24
 d7e:	2a 95       	dec	r18
 d80:	e1 f7       	brne	.-8      	; 0xd7a <__vector_11+0x248>
 d82:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 d84:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 d88:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 d8c:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 d90:	8e ef       	ldi	r24, 0xFE	; 254
 d92:	80 93 e8 00 	sts	0x00E8, r24
 d96:	27 c0       	rjmp	.+78     	; 0xde6 <__vector_11+0x2b4>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 d98:	31 30       	cpi	r19, 0x01	; 1
 d9a:	11 f0       	breq	.+4      	; 0xda0 <__vector_11+0x26e>
 d9c:	33 30       	cpi	r19, 0x03	; 3
 d9e:	01 f5       	brne	.+64     	; 0xde0 <__vector_11+0x2ae>
 da0:	42 30       	cpi	r20, 0x02	; 2
 da2:	f1 f4       	brne	.+60     	; 0xde0 <__vector_11+0x2ae>
 da4:	67 2b       	or	r22, r23
 da6:	e1 f4       	brne	.+56     	; 0xde0 <__vector_11+0x2ae>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 da8:	2a 2f       	mov	r18, r26
 daa:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 dac:	82 2f       	mov	r24, r18
 dae:	81 50       	subi	r24, 0x01	; 1
 db0:	84 30       	cpi	r24, 0x04	; 4
 db2:	b0 f4       	brcc	.+44     	; 0xde0 <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 db4:	8e ef       	ldi	r24, 0xFE	; 254
 db6:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 dba:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 dbe:	33 30       	cpi	r19, 0x03	; 3
 dc0:	79 f0       	breq	.+30     	; 0xde0 <__vector_11+0x2ae>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 dc2:	89 e1       	ldi	r24, 0x19	; 25
 dc4:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 dc8:	81 e0       	ldi	r24, 0x01	; 1
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <__vector_11+0x2a0>
 dce:	88 0f       	add	r24, r24
 dd0:	99 1f       	adc	r25, r25
 dd2:	2a 95       	dec	r18
 dd4:	e2 f7       	brpl	.-8      	; 0xdce <__vector_11+0x29c>
 dd6:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 dda:	10 92 ea 00 	sts	0x00EA, r1
 dde:	03 c0       	rjmp	.+6      	; 0xde6 <__vector_11+0x2b4>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 de0:	81 e2       	ldi	r24, 0x21	; 33
 de2:	80 93 eb 00 	sts	0x00EB, r24
}
 de6:	ff 91       	pop	r31
 de8:	ef 91       	pop	r30
 dea:	bf 91       	pop	r27
 dec:	af 91       	pop	r26
 dee:	9f 91       	pop	r25
 df0:	8f 91       	pop	r24
 df2:	7f 91       	pop	r23
 df4:	6f 91       	pop	r22
 df6:	5f 91       	pop	r21
 df8:	4f 91       	pop	r20
 dfa:	3f 91       	pop	r19
 dfc:	2f 91       	pop	r18
 dfe:	1f 91       	pop	r17
 e00:	0f 91       	pop	r16
 e02:	0f 90       	pop	r0
 e04:	0b be       	out	0x3b, r0	; 59
 e06:	0f 90       	pop	r0
 e08:	0f be       	out	0x3f, r0	; 63
 e0a:	0f 90       	pop	r0
 e0c:	1f 90       	pop	r1
 e0e:	18 95       	reti

00000e10 <adc_start>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
 e10:	ea e7       	ldi	r30, 0x7A	; 122
 e12:	f0 e0       	ldi	r31, 0x00	; 0
 e14:	96 e8       	ldi	r25, 0x86	; 134
 e16:	90 83       	st	Z, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
 e18:	98 2f       	mov	r25, r24
 e1a:	90 72       	andi	r25, 0x20	; 32
 e1c:	90 68       	ori	r25, 0x80	; 128
 e1e:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
 e22:	8f 71       	andi	r24, 0x1F	; 31
 e24:	86 2b       	or	r24, r22
 e26:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
 e2a:	10 92 0c 01 	sts	0x010C, r1
	tail = 0;				// and then begin auto trigger mode
 e2e:	10 92 0d 01 	sts	0x010D, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
 e32:	8e ee       	ldi	r24, 0xEE	; 238
 e34:	80 83       	st	Z, r24
	sei();
 e36:	78 94       	sei
}
 e38:	08 95       	ret

00000e3a <adc_read>:
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
 e3a:	80 91 0c 01 	lds	r24, 0x010C
		t = tail;		// wait for data in buffer
 e3e:	e0 91 0d 01 	lds	r30, 0x010D
	} while (h == t);
 e42:	8e 17       	cp	r24, r30
 e44:	d1 f3       	breq	.-12     	; 0xe3a <adc_read>
	if (++t >= BUFSIZE) t = 0;
 e46:	8e 2f       	mov	r24, r30
 e48:	8f 5f       	subi	r24, 0xFF	; 255
 e4a:	82 30       	cpi	r24, 0x02	; 2
 e4c:	08 f0       	brcs	.+2      	; 0xe50 <adc_read+0x16>
 e4e:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
 e50:	e8 2f       	mov	r30, r24
 e52:	f0 e0       	ldi	r31, 0x00	; 0
 e54:	ee 0f       	add	r30, r30
 e56:	ff 1f       	adc	r31, r31
 e58:	e2 5f       	subi	r30, 0xF2	; 242
 e5a:	fe 4f       	sbci	r31, 0xFE	; 254
 e5c:	20 81       	ld	r18, Z
 e5e:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
 e60:	80 93 0d 01 	sts	0x010D, r24
	return val;
}
 e64:	c9 01       	movw	r24, r18
 e66:	08 95       	ret

00000e68 <__vector_29>:

ISR(ADC_vect)
{
 e68:	1f 92       	push	r1
 e6a:	0f 92       	push	r0
 e6c:	0f b6       	in	r0, 0x3f	; 63
 e6e:	0f 92       	push	r0
 e70:	0b b6       	in	r0, 0x3b	; 59
 e72:	0f 92       	push	r0
 e74:	11 24       	eor	r1, r1
 e76:	2f 93       	push	r18
 e78:	3f 93       	push	r19
 e7a:	8f 93       	push	r24
 e7c:	9f 93       	push	r25
 e7e:	ef 93       	push	r30
 e80:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
 e82:	20 91 78 00 	lds	r18, 0x0078
 e86:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
 e8a:	90 91 0c 01 	lds	r25, 0x010C
 e8e:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
 e90:	92 30       	cpi	r25, 0x02	; 2
 e92:	08 f0       	brcs	.+2      	; 0xe96 <__vector_29+0x2e>
 e94:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
 e96:	80 91 0d 01 	lds	r24, 0x010D
 e9a:	98 17       	cp	r25, r24
 e9c:	51 f0       	breq	.+20     	; 0xeb2 <__vector_29+0x4a>
		buffer[h] = val;	// put new data into buffer
 e9e:	e9 2f       	mov	r30, r25
 ea0:	f0 e0       	ldi	r31, 0x00	; 0
 ea2:	ee 0f       	add	r30, r30
 ea4:	ff 1f       	adc	r31, r31
 ea6:	e2 5f       	subi	r30, 0xF2	; 242
 ea8:	fe 4f       	sbci	r31, 0xFE	; 254
 eaa:	31 83       	std	Z+1, r19	; 0x01
 eac:	20 83       	st	Z, r18
		head = h;
 eae:	90 93 0c 01 	sts	0x010C, r25
	}
}
 eb2:	ff 91       	pop	r31
 eb4:	ef 91       	pop	r30
 eb6:	9f 91       	pop	r25
 eb8:	8f 91       	pop	r24
 eba:	3f 91       	pop	r19
 ebc:	2f 91       	pop	r18
 ebe:	0f 90       	pop	r0
 ec0:	0b be       	out	0x3b, r0	; 59
 ec2:	0f 90       	pop	r0
 ec4:	0f be       	out	0x3f, r0	; 63
 ec6:	0f 90       	pop	r0
 ec8:	1f 90       	pop	r1
 eca:	18 95       	reti

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>
