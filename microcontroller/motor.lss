
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000011f6  0000128a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800108  00800108  00001292  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00001294  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000150  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000309  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000123c  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000049a  00000000  00000000  00003031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001720  00000000  00000000  000034cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00004bec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000540  00000000  00000000  00004e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001270  00000000  00000000  0000536c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  000065dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	OCR3AH = 0x00;
	OCR3AL = 0x00; // Register used by 8bit pwm
	OCR3BH = 0x00;
	OCR3BL = 0x00; // Register used by 8bit pwm
	OCR3CH = 0x00;
	OCR3CL = 0x00; // Register used by 8bit pwm
       0:	72 c1       	rjmp	.+740    	; 0x2e6 <__ctors_end>
	return c;
}

// number of bytes available in the receive buffer
uint8_t usb_serial_available(void)
{
       2:	00 00       	nop
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
	sei();
}

uint8_t adc_available(void)
{
       4:	8b c1       	rjmp	.+790    	; 0x31c <__bad_interrupt>
       6:	00 00       	nop
       8:	89 c1       	rjmp	.+786    	; 0x31c <__bad_interrupt>
       a:	00 00       	nop
       c:	87 c1       	rjmp	.+782    	; 0x31c <__bad_interrupt>
       e:	00 00       	nop
      10:	85 c1       	rjmp	.+778    	; 0x31c <__bad_interrupt>
      12:	00 00       	nop
      14:	83 c1       	rjmp	.+774    	; 0x31c <__bad_interrupt>
      16:	00 00       	nop
      18:	81 c1       	rjmp	.+770    	; 0x31c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	7f c1       	rjmp	.+766    	; 0x31c <__bad_interrupt>
      1e:	00 00       	nop
      20:	7d c1       	rjmp	.+762    	; 0x31c <__bad_interrupt>
      22:	00 00       	nop
      24:	7b c1       	rjmp	.+758    	; 0x31c <__bad_interrupt>
      26:	00 00       	nop
      28:	e4 c6       	rjmp	.+3528   	; 0xdf2 <__vector_10>
      2a:	00 00       	nop
      2c:	1d c7       	rjmp	.+3642   	; 0xe68 <__vector_11>
      2e:	00 00       	nop
      30:	75 c1       	rjmp	.+746    	; 0x31c <__bad_interrupt>
      32:	00 00       	nop
      34:	73 c1       	rjmp	.+742    	; 0x31c <__bad_interrupt>
      36:	00 00       	nop
      38:	71 c1       	rjmp	.+738    	; 0x31c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6f c1       	rjmp	.+734    	; 0x31c <__bad_interrupt>
      3e:	00 00       	nop
      40:	6d c1       	rjmp	.+730    	; 0x31c <__bad_interrupt>
      42:	00 00       	nop
      44:	6b c1       	rjmp	.+726    	; 0x31c <__bad_interrupt>
      46:	00 00       	nop
      48:	69 c1       	rjmp	.+722    	; 0x31c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	67 c1       	rjmp	.+718    	; 0x31c <__bad_interrupt>
      4e:	00 00       	nop
      50:	65 c1       	rjmp	.+714    	; 0x31c <__bad_interrupt>
      52:	00 00       	nop
      54:	63 c1       	rjmp	.+710    	; 0x31c <__bad_interrupt>
      56:	00 00       	nop
      58:	61 c1       	rjmp	.+706    	; 0x31c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	5f c1       	rjmp	.+702    	; 0x31c <__bad_interrupt>
      5e:	00 00       	nop
      60:	5d c1       	rjmp	.+698    	; 0x31c <__bad_interrupt>
      62:	00 00       	nop
      64:	5b c1       	rjmp	.+694    	; 0x31c <__bad_interrupt>
      66:	00 00       	nop
      68:	59 c1       	rjmp	.+690    	; 0x31c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	57 c1       	rjmp	.+686    	; 0x31c <__bad_interrupt>
      6e:	00 00       	nop
      70:	55 c1       	rjmp	.+682    	; 0x31c <__bad_interrupt>
      72:	00 00       	nop
      74:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__vector_29>
      78:	51 c1       	rjmp	.+674    	; 0x31c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	4f c1       	rjmp	.+670    	; 0x31c <__bad_interrupt>
      7e:	00 00       	nop
      80:	4d c1       	rjmp	.+666    	; 0x31c <__bad_interrupt>
      82:	00 00       	nop
      84:	4b c1       	rjmp	.+662    	; 0x31c <__bad_interrupt>
      86:	00 00       	nop
      88:	49 c1       	rjmp	.+658    	; 0x31c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	47 c1       	rjmp	.+654    	; 0x31c <__bad_interrupt>
      8e:	00 00       	nop
      90:	45 c1       	rjmp	.+650    	; 0x31c <__bad_interrupt>
      92:	00 00       	nop
      94:	43 c1       	rjmp	.+646    	; 0x31c <__bad_interrupt>
      96:	00 00       	nop
      98:	41 c1       	rjmp	.+642    	; 0x31c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	3f c1       	rjmp	.+638    	; 0x31c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	3d c1       	rjmp	.+634    	; 0x31c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3b c1       	rjmp	.+630    	; 0x31c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	39 c1       	rjmp	.+626    	; 0x31c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	dc 06       	cpc	r13, r28
      ae:	d9 06       	cpc	r13, r25
      b0:	d6 06       	cpc	r13, r22
      b2:	d3 06       	cpc	r13, r19
      b4:	d0 06       	cpc	r13, r16
      b6:	cd 06       	cpc	r12, r29
      b8:	ca 06       	cpc	r12, r26
      ba:	c7 06       	cpc	r12, r23
      bc:	c4 06       	cpc	r12, r20
      be:	c1 06       	cpc	r12, r17
      c0:	be 06       	cpc	r11, r30
      c2:	bb 06       	cpc	r11, r27
      c4:	b8 06       	cpc	r11, r24
      c6:	b5 06       	cpc	r11, r21
      c8:	b2 06       	cpc	r11, r18
      ca:	af 06       	cpc	r10, r31
      cc:	ac 06       	cpc	r10, r28
      ce:	a9 06       	cpc	r10, r25
      d0:	a6 06       	cpc	r10, r22
      d2:	a3 06       	cpc	r10, r19
      d4:	a0 06       	cpc	r10, r16
      d6:	9d 06       	cpc	r9, r29
      d8:	9a 06       	cpc	r9, r26
      da:	97 06       	cpc	r9, r23
      dc:	94 06       	cpc	r9, r20
      de:	91 06       	cpc	r9, r17
      e0:	8e 06       	cpc	r8, r30
      e2:	8b 06       	cpc	r8, r27
      e4:	88 06       	cpc	r8, r24
      e6:	85 06       	cpc	r8, r21
      e8:	82 06       	cpc	r8, r18
      ea:	7f 06       	cpc	r7, r31
      ec:	7c 06       	cpc	r7, r28
      ee:	79 06       	cpc	r7, r25
      f0:	76 06       	cpc	r7, r22
      f2:	73 06       	cpc	r7, r19
      f4:	70 06       	cpc	r7, r16
      f6:	6d 06       	cpc	r6, r29
      f8:	6a 06       	cpc	r6, r26
      fa:	67 06       	cpc	r6, r23
      fc:	64 06       	cpc	r6, r20
      fe:	61 06       	cpc	r6, r17
     100:	5e 06       	cpc	r5, r30
     102:	5b 06       	cpc	r5, r27
     104:	58 06       	cpc	r5, r24
     106:	55 06       	cpc	r5, r21
     108:	52 06       	cpc	r5, r18
     10a:	4f 06       	cpc	r4, r31
     10c:	4c 06       	cpc	r4, r28
     10e:	49 06       	cpc	r4, r25
     110:	46 06       	cpc	r4, r22
     112:	43 06       	cpc	r4, r19
     114:	40 06       	cpc	r4, r16
     116:	3d 06       	cpc	r3, r29
     118:	3a 06       	cpc	r3, r26
     11a:	37 06       	cpc	r3, r23
     11c:	34 06       	cpc	r3, r20
     11e:	31 06       	cpc	r3, r17
     120:	2e 06       	cpc	r2, r30
     122:	2b 06       	cpc	r2, r27
     124:	28 06       	cpc	r2, r24
     126:	25 06       	cpc	r2, r21
     128:	22 06       	cpc	r2, r18
     12a:	1f 06       	cpc	r1, r31
     12c:	1c 06       	cpc	r1, r28

0000012e <__c.1660>:
     12e:	22 2c 20 6d 75 73 74 20 62 65 20 3f 20 6f 72 20     ", must be ? or 
     13e:	3d 0d 0a 00                                         =...

00000142 <__c.1658>:
     142:	55 6e 6b 6e 6f 77 6e 20 63 6f 6d 6d 61 6e 64 20     Unknown command 
     152:	22 00                                               ".

00000154 <__c.1656>:
     154:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 6f 72 20     ", must be 0 or 
     164:	31 0d 0a 00                                         1...

00000168 <__c.1654>:
     168:	55 6e 6b 6e 6f 77 6e 20 76 61 6c 75 65 20 22 00     Unknown value ".

00000178 <__c.1652>:
     178:	0d 0a 00                                            ...

0000017b <__c.1650>:
     17b:	22 2c 20 6d 75 73 74 20 62 65 20 30 20 74 6f 20     ", must be 0 to 
     18b:	37 0d 0a 00                                         7...

0000018f <__c.1648>:
     18f:	55 6e 6b 6e 6f 77 6e 20 70 69 6e 20 22 00           Unknown pin ".

0000019d <__c.1646>:
     19d:	22 2c 20 6d 75 73 74 20 62 65 20 41 20 2d 20 46     ", must be A - F
     1ad:	0d 0a 00                                            ...

000001b0 <__c.1644>:
     1b0:	55 6e 6b 6e 6f 77 6e 20 70 6f 72 74 20 22 00        Unknown port ".

000001bf <__c.1642>:
     1bf:	75 6e 72 65 63 6f 67 6e 69 7a 65 64 20 66 6f 72     unrecognized for
     1cf:	6d 61 74 2c 20 33 20 63 68 61 72 73 20 6d 69 6e     mat, 3 chars min
     1df:	20 72 65 71 27 64 0d 0a 00                           req'd...

000001e8 <__c.1577>:
     1e8:	49 4e 56 41 4c 49 44 5f 43 4f 4d 4d 41 4e 44 5f     INVALID_COMMAND_
     1f8:	43 4f 44 45 00                                      CODE.

000001fd <__c.1564>:
     1fd:	01 02 03 04 05 06 07 08 0a 00                       ..........

00000207 <__c.1547>:
     207:	4d 6f 74 6f 72 20 43 6f 6e 74 72 6f 6c 6c 65 72     Motor Controller
     217:	20 31 2e 30 0a 00                                    1.0..

0000021d <descriptor_list>:
     21d:	00 01 00 00 51 02 12 00 02 00 00 63 02 43 00 03     ....Q......c.C..
     22d:	00 00 a6 02 04 01 03 09 04 aa 02 14 02 03 09 04     ................
     23d:	c0 02 16 03 03 09 04 d8 02 0c                       ..........

00000247 <endpoint_config_table>:
     247:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

00000251 <device_descriptor>:
     251:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     261:	03 01                                               ..

00000263 <config1_descriptor>:
     263:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     273:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     283:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     293:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     2a3:	40 00 00                                            @..

000002a6 <string0>:
     2a6:	04 03 09 04                                         ....

000002aa <string1>:
     2aa:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
     2ba:	6d 00 65 00 00 00                                   m.e...

000002c0 <string2>:
     2c0:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     2d0:	69 00 61 00 6c 00 00 00                             i.a.l...

000002d8 <string3>:
     2d8:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000002e6 <__ctors_end>:
     2e6:	11 24       	eor	r1, r1
     2e8:	1f be       	out	0x3f, r1	; 63
     2ea:	cf ef       	ldi	r28, 0xFF	; 255
     2ec:	da e0       	ldi	r29, 0x0A	; 10
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	cd bf       	out	0x3d, r28	; 61

000002f2 <__do_copy_data>:
     2f2:	11 e0       	ldi	r17, 0x01	; 1
     2f4:	a0 e0       	ldi	r26, 0x00	; 0
     2f6:	b1 e0       	ldi	r27, 0x01	; 1
     2f8:	e6 ef       	ldi	r30, 0xF6	; 246
     2fa:	f1 e1       	ldi	r31, 0x11	; 17
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <.do_copy_data_start>

000002fe <.do_copy_data_loop>:
     2fe:	05 90       	lpm	r0, Z+
     300:	0d 92       	st	X+, r0

00000302 <.do_copy_data_start>:
     302:	a8 30       	cpi	r26, 0x08	; 8
     304:	b1 07       	cpc	r27, r17
     306:	d9 f7       	brne	.-10     	; 0x2fe <.do_copy_data_loop>

00000308 <__do_clear_bss>:
     308:	11 e0       	ldi	r17, 0x01	; 1
     30a:	a8 e0       	ldi	r26, 0x08	; 8
     30c:	b1 e0       	ldi	r27, 0x01	; 1
     30e:	01 c0       	rjmp	.+2      	; 0x312 <.do_clear_bss_start>

00000310 <.do_clear_bss_loop>:
     310:	1d 92       	st	X+, r1

00000312 <.do_clear_bss_start>:
     312:	a2 31       	cpi	r26, 0x12	; 18
     314:	b1 07       	cpc	r27, r17
     316:	e1 f7       	brne	.-8      	; 0x310 <.do_clear_bss_loop>
     318:	81 d3       	rcall	.+1794   	; 0xa1c <main>
     31a:	6b c7       	rjmp	.+3798   	; 0x11f2 <_exit>

0000031c <__bad_interrupt>:
     31c:	71 ce       	rjmp	.-798    	; 0x0 <__vectors>

0000031e <setup_pwms>:

void setup_pwms(void)
{
	// Timer 0
	// Set ports to output
	DDRB |= (1 << DDB4) | (1 << DDB5) | (1 << DDB6) | (1 << DDB7);
     31e:	84 b1       	in	r24, 0x04	; 4
     320:	80 6f       	ori	r24, 0xF0	; 240
     322:	84 b9       	out	0x04, r24	; 4
//	DDRC |= (1 << DDC4) | (1 << DDC5) | (1 << DDC6);
	DDRD |= (1 << DDD0) | (1 << DDD1);
     324:	8a b1       	in	r24, 0x0a	; 10
     326:	83 60       	ori	r24, 0x03	; 3
     328:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM00) | (1 << WGM01);
     32a:	93 ea       	ldi	r25, 0xA3	; 163
     32c:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS00);
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	85 bd       	out	0x25, r24	; 37

	TCCR2A = (1 << COM2A1) | (1 << COM2B1) | (1 << WGM20) | (1 << WGM21);
     332:	90 93 b0 00 	sts	0x00B0, r25
	TCCR2B = (1 << CS20);
     336:	80 93 b1 00 	sts	0x00B1, r24

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM10);
     33a:	91 ea       	ldi	r25, 0xA1	; 161
     33c:	90 93 80 00 	sts	0x0080, r25
	TCCR1B = (1 << WGM12) | (1 << CS10);
     340:	89 e0       	ldi	r24, 0x09	; 9
     342:	80 93 81 00 	sts	0x0081, r24
	TCCR1C = 0;
     346:	10 92 82 00 	sts	0x0082, r1

	TCCR3A = (1 << COM3A1) | (1 << COM3B1) | (1 << WGM30);
     34a:	90 93 90 00 	sts	0x0090, r25
	TCCR3B = (1 << WGM32) | (1 << CS30);
     34e:	80 93 91 00 	sts	0x0091, r24
	TCCR3C = 0;
     352:	10 92 92 00 	sts	0x0092, r1
}
     356:	08 95       	ret

00000358 <send_str>:

// Send a string to the USB serial port.  The string must be in
// flash memory, using PSTR
//
void send_str(const char *s)
{
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	ec 01       	movw	r28, r24
     35e:	fe 01       	movw	r30, r28
	char c;
	while (1) {
		c = pgm_read_byte(s++);
     360:	21 96       	adiw	r28, 0x01	; 1
     362:	84 91       	lpm	r24, Z+
		if (!c) break;
     364:	88 23       	and	r24, r24
     366:	11 f0       	breq	.+4      	; 0x36c <send_str+0x14>
		usb_serial_putchar(c);
     368:	d7 d3       	rcall	.+1966   	; 0xb18 <usb_serial_putchar>
     36a:	f9 cf       	rjmp	.-14     	; 0x35e <send_str+0x6>
	}
}
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <handle_pwm_ports_command>:
	usb_serial_putchar('\n');
}

void handle_pwm_ports_command(void)
{
	usb_serial_putchar('\x03');
     372:	83 e0       	ldi	r24, 0x03	; 3
     374:	d1 d3       	rcall	.+1954   	; 0xb18 <usb_serial_putchar>
	usb_serial_putchar('\x00');
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	cf d3       	rcall	.+1950   	; 0xb18 <usb_serial_putchar>
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
     37a:	8d ef       	ldi	r24, 0xFD	; 253
     37c:	91 e0       	ldi	r25, 0x01	; 1
}
     37e:	ec cf       	rjmp	.-40     	; 0x358 <send_str>

00000380 <handle_ping_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("Motor Controller 1.0\n"));
}

void handle_ping_command(const char *str, uint8_t len)
{
     380:	ff 92       	push	r15
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	18 2f       	mov	r17, r24
     38c:	09 2f       	mov	r16, r25
     38e:	f6 2e       	mov	r15, r22
	const char *data_itr;
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
     390:	82 e0       	ldi	r24, 0x02	; 2
     392:	c2 d3       	rcall	.+1924   	; 0xb18 <usb_serial_putchar>
     394:	21 2f       	mov	r18, r17
     396:	30 2f       	mov	r19, r16
     398:	c9 01       	movw	r24, r18
     39a:	ec 01       	movw	r28, r24
     39c:	11 e0       	ldi	r17, 0x01	; 1
     39e:	03 c0       	rjmp	.+6      	; 0x3a6 <handle_ping_command+0x26>
	while(ndx < len)
	{
		usb_serial_putchar(data_itr[ndx]);
     3a0:	88 81       	ld	r24, Y
     3a2:	ba d3       	rcall	.+1908   	; 0xb18 <usb_serial_putchar>
		++ndx;
     3a4:	1f 5f       	subi	r17, 0xFF	; 255
     3a6:	21 96       	adiw	r28, 0x01	; 1
	uint8_t ndx = 1;

	data_itr = str;

	usb_serial_putchar('\x02');
	while(ndx < len)
     3a8:	1f 15       	cp	r17, r15
     3aa:	d0 f3       	brcs	.-12     	; 0x3a0 <handle_ping_command+0x20>
	{
		usb_serial_putchar(data_itr[ndx]);
		++ndx;
	}
	usb_serial_putchar('\n');
     3ac:	8a e0       	ldi	r24, 0x0A	; 10
     3ae:	b4 d3       	rcall	.+1896   	; 0xb18 <usb_serial_putchar>
}
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	1f 91       	pop	r17
     3b6:	0f 91       	pop	r16
     3b8:	ff 90       	pop	r15
     3ba:	08 95       	ret

000003bc <handle_version_command>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}
void handle_version_command(void)
{
	usb_serial_putchar('\x00');
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	ac d3       	rcall	.+1880   	; 0xb18 <usb_serial_putchar>
	send_str(PSTR("Motor Controller 1.0\n"));
     3c0:	87 e0       	ldi	r24, 0x07	; 7
     3c2:	92 e0       	ldi	r25, 0x02	; 2
}
     3c4:	c9 cf       	rjmp	.-110    	; 0x358 <send_str>

000003c6 <handle_set_pwm_command>:
/**
 * @breif Handle a set pwm command
 */

void handle_set_pwm_command(uint8_t port, uint8_t val)
{
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	18 2f       	mov	r17, r24
     3cc:	06 2f       	mov	r16, r22
	usb_serial_putchar('\x04');
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	a3 d3       	rcall	.+1862   	; 0xb18 <usb_serial_putchar>
	usb_serial_putchar(port);
     3d2:	81 2f       	mov	r24, r17
     3d4:	a1 d3       	rcall	.+1858   	; 0xb18 <usb_serial_putchar>
	switch(port)
     3d6:	14 30       	cpi	r17, 0x04	; 4
     3d8:	31 f1       	breq	.+76     	; 0x426 <handle_set_pwm_command+0x60>
     3da:	15 30       	cpi	r17, 0x05	; 5
     3dc:	48 f4       	brcc	.+18     	; 0x3f0 <handle_set_pwm_command+0x2a>
     3de:	11 30       	cpi	r17, 0x01	; 1
     3e0:	91 f0       	breq	.+36     	; 0x406 <handle_set_pwm_command+0x40>
     3e2:	11 30       	cpi	r17, 0x01	; 1
     3e4:	70 f0       	brcs	.+28     	; 0x402 <handle_set_pwm_command+0x3c>
     3e6:	12 30       	cpi	r17, 0x02	; 2
     3e8:	81 f0       	breq	.+32     	; 0x40a <handle_set_pwm_command+0x44>
     3ea:	13 30       	cpi	r17, 0x03	; 3
     3ec:	b9 f5       	brne	.+110    	; 0x45c <handle_set_pwm_command+0x96>
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <handle_set_pwm_command+0x52>
     3f0:	16 30       	cpi	r17, 0x06	; 6
     3f2:	f9 f0       	breq	.+62     	; 0x432 <handle_set_pwm_command+0x6c>
     3f4:	16 30       	cpi	r17, 0x06	; 6
     3f6:	d0 f0       	brcs	.+52     	; 0x42c <handle_set_pwm_command+0x66>
     3f8:	17 30       	cpi	r17, 0x07	; 7
     3fa:	11 f1       	breq	.+68     	; 0x440 <handle_set_pwm_command+0x7a>
     3fc:	18 30       	cpi	r17, 0x08	; 8
     3fe:	71 f5       	brne	.+92     	; 0x45c <handle_set_pwm_command+0x96>
     400:	26 c0       	rjmp	.+76     	; 0x44e <handle_set_pwm_command+0x88>
	{
		case 0:
			OCR0A = val;
     402:	07 bd       	out	0x27, r16	; 39
     404:	2d c0       	rjmp	.+90     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 1:
			OCR0B = val;
     406:	08 bd       	out	0x28, r16	; 40
     408:	2b c0       	rjmp	.+86     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 2:
			OCR1A = val;
     40a:	80 2f       	mov	r24, r16
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	90 93 89 00 	sts	0x0089, r25
     412:	80 93 88 00 	sts	0x0088, r24
     416:	24 c0       	rjmp	.+72     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 3:
			OCR1B = val;
     418:	80 2f       	mov	r24, r16
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	90 93 8b 00 	sts	0x008B, r25
     420:	80 93 8a 00 	sts	0x008A, r24
     424:	1d c0       	rjmp	.+58     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 4:
			OCR2A = val;
     426:	00 93 b3 00 	sts	0x00B3, r16
     42a:	1a c0       	rjmp	.+52     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 5:
			OCR2B = val;
     42c:	00 93 b4 00 	sts	0x00B4, r16
     430:	17 c0       	rjmp	.+46     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 6:
			OCR3A = val;
     432:	80 2f       	mov	r24, r16
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	90 93 99 00 	sts	0x0099, r25
     43a:	80 93 98 00 	sts	0x0098, r24
     43e:	10 c0       	rjmp	.+32     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 7:
			OCR3B = val;
     440:	80 2f       	mov	r24, r16
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 9b 00 	sts	0x009B, r25
     448:	80 93 9a 00 	sts	0x009A, r24
     44c:	09 c0       	rjmp	.+18     	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		case 8:
			OCR3C = val;
     44e:	80 2f       	mov	r24, r16
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	90 93 9d 00 	sts	0x009D, r25
     456:	80 93 9c 00 	sts	0x009C, r24
     45a:	02 c0       	rjmp	.+4      	; 0x460 <handle_set_pwm_command+0x9a>
			break;
		default:
			usb_serial_putchar('\x01');
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	01 c0       	rjmp	.+2      	; 0x462 <handle_set_pwm_command+0x9c>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	5a d3       	rcall	.+1716   	; 0xb18 <usb_serial_putchar>
	usb_serial_putchar('\n');
     464:	8a e0       	ldi	r24, 0x0A	; 10
     466:	58 d3       	rcall	.+1712   	; 0xb18 <usb_serial_putchar>
}
     468:	1f 91       	pop	r17
     46a:	0f 91       	pop	r16
     46c:	08 95       	ret

0000046e <recv_str>:
// stored into the buffer.
// The return value is the number of characters received, or 255 if
// the virtual serial connection was closed while waiting.
//
uint8_t recv_str(char *buf, uint8_t size)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
     478:	06 2f       	mov	r16, r22
     47a:	10 e0       	ldi	r17, 0x00	; 0
     47c:	14 c0       	rjmp	.+40     	; 0x4a6 <recv_str+0x38>
	int16_t r;
	uint8_t count=0;

	while (count < size) {
		r = usb_serial_getchar();
     47e:	1a d3       	rcall	.+1588   	; 0xab4 <usb_serial_getchar>
		if (r != -1) {
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	8f 3f       	cpi	r24, 0xFF	; 255
     484:	92 07       	cpc	r25, r18
     486:	49 f0       	breq	.+18     	; 0x49a <recv_str+0x2c>
			if (r == '\r' || r == '\n') return count;
     488:	8d 30       	cpi	r24, 0x0D	; 13
     48a:	91 05       	cpc	r25, r1
     48c:	81 f0       	breq	.+32     	; 0x4ae <recv_str+0x40>
     48e:	8a 30       	cpi	r24, 0x0A	; 10
     490:	91 05       	cpc	r25, r1
     492:	69 f0       	breq	.+26     	; 0x4ae <recv_str+0x40>
			*buf++ = r;
     494:	89 93       	st	Y+, r24
			//usb_serial_putchar(r);
			count++;
     496:	1f 5f       	subi	r17, 0xFF	; 255
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <recv_str+0x38>
		} else {
			if (!usb_configured() ||
     49a:	09 d3       	rcall	.+1554   	; 0xaae <usb_configured>
     49c:	88 23       	and	r24, r24
     49e:	31 f0       	breq	.+12     	; 0x4ac <recv_str+0x3e>
     4a0:	a5 d4       	rcall	.+2378   	; 0xdec <usb_serial_get_control>
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	03 c0       	rjmp	.+6      	; 0x4ac <recv_str+0x3e>
uint8_t recv_str(char *buf, uint8_t size)
{
	int16_t r;
	uint8_t count=0;

	while (count < size) {
     4a6:	10 17       	cp	r17, r16
     4a8:	50 f3       	brcs	.-44     	; 0x47e <recv_str+0x10>
     4aa:	01 c0       	rjmp	.+2      	; 0x4ae <recv_str+0x40>
     4ac:	1f ef       	ldi	r17, 0xFF	; 255
			}
			// just a normal timeout, keep waiting
		}
	}
	return count;
}
     4ae:	81 2f       	mov	r24, r17
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	0f 91       	pop	r16
     4b8:	08 95       	ret

000004ba <handle_sensor_query>:
	usb_serial_putchar('\x00');
	usb_serial_putchar('\n');
}

void handle_sensor_query(uint8_t port)
{
     4ba:	df 92       	push	r13
     4bc:	ef 92       	push	r14
     4be:	ff 92       	push	r15
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <handle_sensor_query+0x10>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <handle_sensor_query+0x12>
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	18 2f       	mov	r17, r24
	int i;
    uint16_t val;
    char buf[4];
    int readings = 10;
    usb_serial_putchar('\x07');
     4d2:	87 e0       	ldi	r24, 0x07	; 7
     4d4:	21 d3       	rcall	.+1602   	; 0xb18 <usb_serial_putchar>
	usb_serial_putchar(port);
     4d6:	81 2f       	mov	r24, r17
     4d8:	1f d3       	rcall	.+1598   	; 0xb18 <usb_serial_putchar>
	switch(port)
     4da:	13 30       	cpi	r17, 0x03	; 3
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <handle_sensor_query+0x26>
     4de:	f1 c0       	rjmp	.+482    	; 0x6c2 <handle_sensor_query+0x208>
     4e0:	14 30       	cpi	r17, 0x04	; 4
     4e2:	38 f4       	brcc	.+14     	; 0x4f2 <handle_sensor_query+0x38>
     4e4:	11 30       	cpi	r17, 0x01	; 1
     4e6:	09 f4       	brne	.+2      	; 0x4ea <handle_sensor_query+0x30>
     4e8:	54 c0       	rjmp	.+168    	; 0x592 <handle_sensor_query+0xd8>
     4ea:	12 30       	cpi	r17, 0x02	; 2
     4ec:	08 f0       	brcs	.+2      	; 0x4f0 <handle_sensor_query+0x36>
     4ee:	9d c0       	rjmp	.+314    	; 0x62a <handle_sensor_query+0x170>
     4f0:	0d c0       	rjmp	.+26     	; 0x50c <handle_sensor_query+0x52>
     4f2:	15 30       	cpi	r17, 0x05	; 5
     4f4:	09 f4       	brne	.+2      	; 0x4f8 <handle_sensor_query+0x3e>
     4f6:	7d c1       	rjmp	.+762    	; 0x7f2 <handle_sensor_query+0x338>
     4f8:	15 30       	cpi	r17, 0x05	; 5
     4fa:	08 f4       	brcc	.+2      	; 0x4fe <handle_sensor_query+0x44>
     4fc:	2e c1       	rjmp	.+604    	; 0x75a <handle_sensor_query+0x2a0>
     4fe:	16 30       	cpi	r17, 0x06	; 6
     500:	09 f4       	brne	.+2      	; 0x504 <handle_sensor_query+0x4a>
     502:	c3 c1       	rjmp	.+902    	; 0x88a <handle_sensor_query+0x3d0>
     504:	17 30       	cpi	r17, 0x07	; 7
     506:	09 f0       	breq	.+2      	; 0x50a <handle_sensor_query+0x50>
     508:	58 c2       	rjmp	.+1200   	; 0x9ba <handle_sensor_query+0x500>
     50a:	0b c2       	rjmp	.+1046   	; 0x922 <handle_sensor_query+0x468>
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	60 e4       	ldi	r22, 0x40	; 64
     510:	16 d6       	rcall	.+3116   	; 0x113e <adc_start>
     512:	01 e0       	ldi	r16, 0x01	; 1
     514:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     516:	f0 e2       	ldi	r31, 0x20	; 32
     518:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     51a:	7e 01       	movw	r14, r28
     51c:	08 94       	sec
     51e:	e1 1c       	adc	r14, r1
     520:	f1 1c       	adc	r15, r1
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
     522:	22 d6       	rcall	.+3140   	; 0x1168 <adc_read>
     524:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     526:	89 2f       	mov	r24, r25
     528:	99 27       	eor	r25, r25
     52a:	48 2f       	mov	r20, r24
     52c:	4f 70       	andi	r20, 0x0F	; 15
     52e:	8f 70       	andi	r24, 0x0F	; 15
     530:	90 70       	andi	r25, 0x00	; 0
     532:	0a 97       	sbiw	r24, 0x0a	; 10
     534:	18 f4       	brcc	.+6      	; 0x53c <handle_sensor_query+0x82>
     536:	54 2f       	mov	r21, r20
     538:	50 5d       	subi	r21, 0xD0	; 208
     53a:	02 c0       	rjmp	.+4      	; 0x540 <handle_sensor_query+0x86>
     53c:	54 2f       	mov	r21, r20
     53e:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     540:	c9 01       	movw	r24, r18
     542:	74 e0       	ldi	r23, 0x04	; 4
     544:	96 95       	lsr	r25
     546:	87 95       	ror	r24
     548:	7a 95       	dec	r23
     54a:	e1 f7       	brne	.-8      	; 0x544 <handle_sensor_query+0x8a>
     54c:	48 2f       	mov	r20, r24
     54e:	4f 70       	andi	r20, 0x0F	; 15
     550:	8f 70       	andi	r24, 0x0F	; 15
     552:	90 70       	andi	r25, 0x00	; 0
     554:	0a 97       	sbiw	r24, 0x0a	; 10
     556:	18 f4       	brcc	.+6      	; 0x55e <handle_sensor_query+0xa4>
     558:	84 2f       	mov	r24, r20
     55a:	80 5d       	subi	r24, 0xD0	; 208
     55c:	02 c0       	rjmp	.+4      	; 0x562 <handle_sensor_query+0xa8>
     55e:	84 2f       	mov	r24, r20
     560:	89 5c       	subi	r24, 0xC9	; 201
     562:	92 2f       	mov	r25, r18
     564:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     566:	2f 70       	andi	r18, 0x0F	; 15
     568:	30 70       	andi	r19, 0x00	; 0
     56a:	2a 30       	cpi	r18, 0x0A	; 10
     56c:	31 05       	cpc	r19, r1
     56e:	10 f4       	brcc	.+4      	; 0x574 <handle_sensor_query+0xba>
     570:	90 5d       	subi	r25, 0xD0	; 208
     572:	01 c0       	rjmp	.+2      	; 0x576 <handle_sensor_query+0xbc>
     574:	99 5c       	subi	r25, 0xC9	; 201
     576:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     578:	dc 82       	std	Y+4, r13	; 0x04
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     57a:	8a 83       	std	Y+2, r24	; 0x02
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     57c:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     57e:	c7 01       	movw	r24, r14
     580:	64 e0       	ldi	r22, 0x04	; 4
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	0b d3       	rcall	.+1558   	; 0xb9c <usb_serial_write>
	switch(port)
	{
		case 0:
            
            adc_start(ADC_MUX_PIN_F0, ADC_REF_POWER);
            for(i=1;i<readings;i++){
     586:	0f 5f       	subi	r16, 0xFF	; 255
     588:	1f 4f       	sbci	r17, 0xFF	; 255
     58a:	0a 30       	cpi	r16, 0x0A	; 10
     58c:	11 05       	cpc	r17, r1
     58e:	49 f6       	brne	.-110    	; 0x522 <handle_sensor_query+0x68>
     590:	16 c2       	rjmp	.+1068   	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	60 e4       	ldi	r22, 0x40	; 64
     596:	d3 d5       	rcall	.+2982   	; 0x113e <adc_start>
     598:	88 e8       	ldi	r24, 0x88	; 136
     59a:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     59c:	20 e9       	ldi	r18, 0x90	; 144
     59e:	31 e0       	ldi	r19, 0x01	; 1
     5a0:	f9 01       	movw	r30, r18
     5a2:	31 97       	sbiw	r30, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <handle_sensor_query+0xe8>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <handle_sensor_query+0xe6>
     5aa:	01 e0       	ldi	r16, 0x01	; 1
     5ac:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     5ae:	60 e2       	ldi	r22, 0x20	; 32
     5b0:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     5b2:	7e 01       	movw	r14, r28
     5b4:	08 94       	sec
     5b6:	e1 1c       	adc	r14, r1
     5b8:	f1 1c       	adc	r15, r1
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
     5ba:	d6 d5       	rcall	.+2988   	; 0x1168 <adc_read>
     5bc:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     5be:	89 2f       	mov	r24, r25
     5c0:	99 27       	eor	r25, r25
     5c2:	48 2f       	mov	r20, r24
     5c4:	4f 70       	andi	r20, 0x0F	; 15
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	90 70       	andi	r25, 0x00	; 0
     5ca:	0a 97       	sbiw	r24, 0x0a	; 10
     5cc:	18 f4       	brcc	.+6      	; 0x5d4 <handle_sensor_query+0x11a>
     5ce:	54 2f       	mov	r21, r20
     5d0:	50 5d       	subi	r21, 0xD0	; 208
     5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <handle_sensor_query+0x11e>
     5d4:	54 2f       	mov	r21, r20
     5d6:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     5d8:	c9 01       	movw	r24, r18
     5da:	44 e0       	ldi	r20, 0x04	; 4
     5dc:	96 95       	lsr	r25
     5de:	87 95       	ror	r24
     5e0:	4a 95       	dec	r20
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <handle_sensor_query+0x122>
     5e4:	48 2f       	mov	r20, r24
     5e6:	4f 70       	andi	r20, 0x0F	; 15
     5e8:	8f 70       	andi	r24, 0x0F	; 15
     5ea:	90 70       	andi	r25, 0x00	; 0
     5ec:	0a 97       	sbiw	r24, 0x0a	; 10
     5ee:	18 f4       	brcc	.+6      	; 0x5f6 <handle_sensor_query+0x13c>
     5f0:	84 2f       	mov	r24, r20
     5f2:	80 5d       	subi	r24, 0xD0	; 208
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <handle_sensor_query+0x140>
     5f6:	84 2f       	mov	r24, r20
     5f8:	89 5c       	subi	r24, 0xC9	; 201
     5fa:	92 2f       	mov	r25, r18
     5fc:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     5fe:	2f 70       	andi	r18, 0x0F	; 15
     600:	30 70       	andi	r19, 0x00	; 0
     602:	2a 30       	cpi	r18, 0x0A	; 10
     604:	31 05       	cpc	r19, r1
     606:	10 f4       	brcc	.+4      	; 0x60c <handle_sensor_query+0x152>
     608:	90 5d       	subi	r25, 0xD0	; 208
     60a:	01 c0       	rjmp	.+2      	; 0x60e <handle_sensor_query+0x154>
     60c:	99 5c       	subi	r25, 0xC9	; 201
     60e:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     610:	dc 82       	std	Y+4, r13	; 0x04
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     612:	8a 83       	std	Y+2, r24	; 0x02
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     614:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     616:	c7 01       	movw	r24, r14
     618:	64 e0       	ldi	r22, 0x04	; 4
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	bf d2       	rcall	.+1406   	; 0xb9c <usb_serial_write>
           }
			break;
		case 1:
			adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
           _delay_ms(500); 
            for(i=1;i<readings;i++){
     61e:	0f 5f       	subi	r16, 0xFF	; 255
     620:	1f 4f       	sbci	r17, 0xFF	; 255
     622:	0a 30       	cpi	r16, 0x0A	; 10
     624:	11 05       	cpc	r17, r1
     626:	49 f6       	brne	.-110    	; 0x5ba <handle_sensor_query+0x100>
     628:	ca c1       	rjmp	.+916    	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
     62a:	82 e0       	ldi	r24, 0x02	; 2
     62c:	60 e4       	ldi	r22, 0x40	; 64
     62e:	87 d5       	rcall	.+2830   	; 0x113e <adc_start>
     630:	88 e8       	ldi	r24, 0x88	; 136
     632:	93 e1       	ldi	r25, 0x13	; 19
     634:	20 e9       	ldi	r18, 0x90	; 144
     636:	31 e0       	ldi	r19, 0x01	; 1
     638:	f9 01       	movw	r30, r18
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <handle_sensor_query+0x180>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     63e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     640:	d9 f7       	brne	.-10     	; 0x638 <handle_sensor_query+0x17e>
     642:	01 e0       	ldi	r16, 0x01	; 1
     644:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     646:	80 e2       	ldi	r24, 0x20	; 32
     648:	d8 2e       	mov	r13, r24
	        	usb_serial_write((unsigned char *)buf, 4);
     64a:	7e 01       	movw	r14, r28
     64c:	08 94       	sec
     64e:	e1 1c       	adc	r14, r1
     650:	f1 1c       	adc	r15, r1
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     652:	8a d5       	rcall	.+2836   	; 0x1168 <adc_read>
     654:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     656:	89 2f       	mov	r24, r25
     658:	99 27       	eor	r25, r25
     65a:	48 2f       	mov	r20, r24
     65c:	4f 70       	andi	r20, 0x0F	; 15
     65e:	8f 70       	andi	r24, 0x0F	; 15
     660:	90 70       	andi	r25, 0x00	; 0
     662:	0a 97       	sbiw	r24, 0x0a	; 10
     664:	18 f4       	brcc	.+6      	; 0x66c <handle_sensor_query+0x1b2>
     666:	54 2f       	mov	r21, r20
     668:	50 5d       	subi	r21, 0xD0	; 208
     66a:	02 c0       	rjmp	.+4      	; 0x670 <handle_sensor_query+0x1b6>
     66c:	54 2f       	mov	r21, r20
     66e:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     670:	c9 01       	movw	r24, r18
     672:	a4 e0       	ldi	r26, 0x04	; 4
     674:	96 95       	lsr	r25
     676:	87 95       	ror	r24
     678:	aa 95       	dec	r26
     67a:	e1 f7       	brne	.-8      	; 0x674 <handle_sensor_query+0x1ba>
     67c:	48 2f       	mov	r20, r24
     67e:	4f 70       	andi	r20, 0x0F	; 15
     680:	8f 70       	andi	r24, 0x0F	; 15
     682:	90 70       	andi	r25, 0x00	; 0
     684:	0a 97       	sbiw	r24, 0x0a	; 10
     686:	18 f4       	brcc	.+6      	; 0x68e <handle_sensor_query+0x1d4>
     688:	84 2f       	mov	r24, r20
     68a:	80 5d       	subi	r24, 0xD0	; 208
     68c:	02 c0       	rjmp	.+4      	; 0x692 <handle_sensor_query+0x1d8>
     68e:	84 2f       	mov	r24, r20
     690:	89 5c       	subi	r24, 0xC9	; 201
     692:	92 2f       	mov	r25, r18
     694:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     696:	2f 70       	andi	r18, 0x0F	; 15
     698:	30 70       	andi	r19, 0x00	; 0
     69a:	2a 30       	cpi	r18, 0x0A	; 10
     69c:	31 05       	cpc	r19, r1
     69e:	10 f4       	brcc	.+4      	; 0x6a4 <handle_sensor_query+0x1ea>
     6a0:	90 5d       	subi	r25, 0xD0	; 208
     6a2:	01 c0       	rjmp	.+2      	; 0x6a6 <handle_sensor_query+0x1ec>
     6a4:	99 5c       	subi	r25, 0xC9	; 201
     6a6:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     6a8:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     6aa:	8a 83       	std	Y+2, r24	; 0x02
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     6ac:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     6ae:	c7 01       	movw	r24, r14
     6b0:	64 e0       	ldi	r22, 0x04	; 4
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	73 d2       	rcall	.+1254   	; 0xb9c <usb_serial_write>
           }
			break;
		case 2:
            adc_start(ADC_MUX_PIN_F2, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     6b6:	0f 5f       	subi	r16, 0xFF	; 255
     6b8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ba:	0a 30       	cpi	r16, 0x0A	; 10
     6bc:	11 05       	cpc	r17, r1
     6be:	49 f6       	brne	.-110    	; 0x652 <handle_sensor_query+0x198>
     6c0:	7e c1       	rjmp	.+764    	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
     6c2:	83 e0       	ldi	r24, 0x03	; 3
     6c4:	60 e4       	ldi	r22, 0x40	; 64
     6c6:	3b d5       	rcall	.+2678   	; 0x113e <adc_start>
     6c8:	88 e8       	ldi	r24, 0x88	; 136
     6ca:	93 e1       	ldi	r25, 0x13	; 19
     6cc:	20 e9       	ldi	r18, 0x90	; 144
     6ce:	31 e0       	ldi	r19, 0x01	; 1
     6d0:	f9 01       	movw	r30, r18
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <handle_sensor_query+0x218>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d8:	d9 f7       	brne	.-10     	; 0x6d0 <handle_sensor_query+0x216>
     6da:	01 e0       	ldi	r16, 0x01	; 1
     6dc:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     6de:	f0 e2       	ldi	r31, 0x20	; 32
     6e0:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     6e2:	7e 01       	movw	r14, r28
     6e4:	08 94       	sec
     6e6:	e1 1c       	adc	r14, r1
     6e8:	f1 1c       	adc	r15, r1
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     6ea:	3e d5       	rcall	.+2684   	; 0x1168 <adc_read>
     6ec:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     6ee:	89 2f       	mov	r24, r25
     6f0:	99 27       	eor	r25, r25
     6f2:	48 2f       	mov	r20, r24
     6f4:	4f 70       	andi	r20, 0x0F	; 15
     6f6:	8f 70       	andi	r24, 0x0F	; 15
     6f8:	90 70       	andi	r25, 0x00	; 0
     6fa:	0a 97       	sbiw	r24, 0x0a	; 10
     6fc:	18 f4       	brcc	.+6      	; 0x704 <handle_sensor_query+0x24a>
     6fe:	54 2f       	mov	r21, r20
     700:	50 5d       	subi	r21, 0xD0	; 208
     702:	02 c0       	rjmp	.+4      	; 0x708 <handle_sensor_query+0x24e>
     704:	54 2f       	mov	r21, r20
     706:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     708:	c9 01       	movw	r24, r18
     70a:	74 e0       	ldi	r23, 0x04	; 4
     70c:	96 95       	lsr	r25
     70e:	87 95       	ror	r24
     710:	7a 95       	dec	r23
     712:	e1 f7       	brne	.-8      	; 0x70c <handle_sensor_query+0x252>
     714:	48 2f       	mov	r20, r24
     716:	4f 70       	andi	r20, 0x0F	; 15
     718:	8f 70       	andi	r24, 0x0F	; 15
     71a:	90 70       	andi	r25, 0x00	; 0
     71c:	0a 97       	sbiw	r24, 0x0a	; 10
     71e:	18 f4       	brcc	.+6      	; 0x726 <handle_sensor_query+0x26c>
     720:	84 2f       	mov	r24, r20
     722:	80 5d       	subi	r24, 0xD0	; 208
     724:	02 c0       	rjmp	.+4      	; 0x72a <handle_sensor_query+0x270>
     726:	84 2f       	mov	r24, r20
     728:	89 5c       	subi	r24, 0xC9	; 201
     72a:	92 2f       	mov	r25, r18
     72c:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     72e:	2f 70       	andi	r18, 0x0F	; 15
     730:	30 70       	andi	r19, 0x00	; 0
     732:	2a 30       	cpi	r18, 0x0A	; 10
     734:	31 05       	cpc	r19, r1
     736:	10 f4       	brcc	.+4      	; 0x73c <handle_sensor_query+0x282>
     738:	90 5d       	subi	r25, 0xD0	; 208
     73a:	01 c0       	rjmp	.+2      	; 0x73e <handle_sensor_query+0x284>
     73c:	99 5c       	subi	r25, 0xC9	; 201
     73e:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     740:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     742:	8a 83       	std	Y+2, r24	; 0x02
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     744:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     746:	c7 01       	movw	r24, r14
     748:	64 e0       	ldi	r22, 0x04	; 4
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	27 d2       	rcall	.+1102   	; 0xb9c <usb_serial_write>
           }
			break;
		case 3:
            adc_start(ADC_MUX_PIN_F3, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     74e:	0f 5f       	subi	r16, 0xFF	; 255
     750:	1f 4f       	sbci	r17, 0xFF	; 255
     752:	0a 30       	cpi	r16, 0x0A	; 10
     754:	11 05       	cpc	r17, r1
     756:	49 f6       	brne	.-110    	; 0x6ea <handle_sensor_query+0x230>
     758:	32 c1       	rjmp	.+612    	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	60 e4       	ldi	r22, 0x40	; 64
     75e:	ef d4       	rcall	.+2526   	; 0x113e <adc_start>
     760:	88 e8       	ldi	r24, 0x88	; 136
     762:	93 e1       	ldi	r25, 0x13	; 19
     764:	20 e9       	ldi	r18, 0x90	; 144
     766:	31 e0       	ldi	r19, 0x01	; 1
     768:	f9 01       	movw	r30, r18
     76a:	31 97       	sbiw	r30, 0x01	; 1
     76c:	f1 f7       	brne	.-4      	; 0x76a <handle_sensor_query+0x2b0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     76e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     770:	d9 f7       	brne	.-10     	; 0x768 <handle_sensor_query+0x2ae>
     772:	01 e0       	ldi	r16, 0x01	; 1
     774:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     776:	60 e2       	ldi	r22, 0x20	; 32
     778:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     77a:	7e 01       	movw	r14, r28
     77c:	08 94       	sec
     77e:	e1 1c       	adc	r14, r1
     780:	f1 1c       	adc	r15, r1
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     782:	f2 d4       	rcall	.+2532   	; 0x1168 <adc_read>
     784:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     786:	89 2f       	mov	r24, r25
     788:	99 27       	eor	r25, r25
     78a:	48 2f       	mov	r20, r24
     78c:	4f 70       	andi	r20, 0x0F	; 15
     78e:	8f 70       	andi	r24, 0x0F	; 15
     790:	90 70       	andi	r25, 0x00	; 0
     792:	0a 97       	sbiw	r24, 0x0a	; 10
     794:	18 f4       	brcc	.+6      	; 0x79c <handle_sensor_query+0x2e2>
     796:	54 2f       	mov	r21, r20
     798:	50 5d       	subi	r21, 0xD0	; 208
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <handle_sensor_query+0x2e6>
     79c:	54 2f       	mov	r21, r20
     79e:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     7a0:	c9 01       	movw	r24, r18
     7a2:	44 e0       	ldi	r20, 0x04	; 4
     7a4:	96 95       	lsr	r25
     7a6:	87 95       	ror	r24
     7a8:	4a 95       	dec	r20
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <handle_sensor_query+0x2ea>
     7ac:	48 2f       	mov	r20, r24
     7ae:	4f 70       	andi	r20, 0x0F	; 15
     7b0:	8f 70       	andi	r24, 0x0F	; 15
     7b2:	90 70       	andi	r25, 0x00	; 0
     7b4:	0a 97       	sbiw	r24, 0x0a	; 10
     7b6:	18 f4       	brcc	.+6      	; 0x7be <handle_sensor_query+0x304>
     7b8:	84 2f       	mov	r24, r20
     7ba:	80 5d       	subi	r24, 0xD0	; 208
     7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <handle_sensor_query+0x308>
     7be:	84 2f       	mov	r24, r20
     7c0:	89 5c       	subi	r24, 0xC9	; 201
     7c2:	92 2f       	mov	r25, r18
     7c4:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     7c6:	2f 70       	andi	r18, 0x0F	; 15
     7c8:	30 70       	andi	r19, 0x00	; 0
     7ca:	2a 30       	cpi	r18, 0x0A	; 10
     7cc:	31 05       	cpc	r19, r1
     7ce:	10 f4       	brcc	.+4      	; 0x7d4 <handle_sensor_query+0x31a>
     7d0:	90 5d       	subi	r25, 0xD0	; 208
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <handle_sensor_query+0x31c>
     7d4:	99 5c       	subi	r25, 0xC9	; 201
     7d6:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     7d8:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     7da:	8a 83       	std	Y+2, r24	; 0x02
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     7dc:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     7de:	c7 01       	movw	r24, r14
     7e0:	64 e0       	ldi	r22, 0x04	; 4
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	db d1       	rcall	.+950    	; 0xb9c <usb_serial_write>
           }
			break;
		case 4:
            adc_start(ADC_MUX_PIN_F4, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     7e6:	0f 5f       	subi	r16, 0xFF	; 255
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	0a 30       	cpi	r16, 0x0A	; 10
     7ec:	11 05       	cpc	r17, r1
     7ee:	49 f6       	brne	.-110    	; 0x782 <handle_sensor_query+0x2c8>
     7f0:	e6 c0       	rjmp	.+460    	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	60 e4       	ldi	r22, 0x40	; 64
     7f6:	a3 d4       	rcall	.+2374   	; 0x113e <adc_start>
     7f8:	88 e8       	ldi	r24, 0x88	; 136
     7fa:	93 e1       	ldi	r25, 0x13	; 19
     7fc:	20 e9       	ldi	r18, 0x90	; 144
     7fe:	31 e0       	ldi	r19, 0x01	; 1
     800:	f9 01       	movw	r30, r18
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <handle_sensor_query+0x348>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     806:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     808:	d9 f7       	brne	.-10     	; 0x800 <handle_sensor_query+0x346>
     80a:	01 e0       	ldi	r16, 0x01	; 1
     80c:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     80e:	80 e2       	ldi	r24, 0x20	; 32
     810:	d8 2e       	mov	r13, r24
	        	usb_serial_write((unsigned char *)buf, 4);
     812:	7e 01       	movw	r14, r28
     814:	08 94       	sec
     816:	e1 1c       	adc	r14, r1
     818:	f1 1c       	adc	r15, r1
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     81a:	a6 d4       	rcall	.+2380   	; 0x1168 <adc_read>
     81c:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     81e:	89 2f       	mov	r24, r25
     820:	99 27       	eor	r25, r25
     822:	48 2f       	mov	r20, r24
     824:	4f 70       	andi	r20, 0x0F	; 15
     826:	8f 70       	andi	r24, 0x0F	; 15
     828:	90 70       	andi	r25, 0x00	; 0
     82a:	0a 97       	sbiw	r24, 0x0a	; 10
     82c:	18 f4       	brcc	.+6      	; 0x834 <handle_sensor_query+0x37a>
     82e:	54 2f       	mov	r21, r20
     830:	50 5d       	subi	r21, 0xD0	; 208
     832:	02 c0       	rjmp	.+4      	; 0x838 <handle_sensor_query+0x37e>
     834:	54 2f       	mov	r21, r20
     836:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     838:	c9 01       	movw	r24, r18
     83a:	a4 e0       	ldi	r26, 0x04	; 4
     83c:	96 95       	lsr	r25
     83e:	87 95       	ror	r24
     840:	aa 95       	dec	r26
     842:	e1 f7       	brne	.-8      	; 0x83c <handle_sensor_query+0x382>
     844:	48 2f       	mov	r20, r24
     846:	4f 70       	andi	r20, 0x0F	; 15
     848:	8f 70       	andi	r24, 0x0F	; 15
     84a:	90 70       	andi	r25, 0x00	; 0
     84c:	0a 97       	sbiw	r24, 0x0a	; 10
     84e:	18 f4       	brcc	.+6      	; 0x856 <handle_sensor_query+0x39c>
     850:	84 2f       	mov	r24, r20
     852:	80 5d       	subi	r24, 0xD0	; 208
     854:	02 c0       	rjmp	.+4      	; 0x85a <handle_sensor_query+0x3a0>
     856:	84 2f       	mov	r24, r20
     858:	89 5c       	subi	r24, 0xC9	; 201
     85a:	92 2f       	mov	r25, r18
     85c:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     85e:	2f 70       	andi	r18, 0x0F	; 15
     860:	30 70       	andi	r19, 0x00	; 0
     862:	2a 30       	cpi	r18, 0x0A	; 10
     864:	31 05       	cpc	r19, r1
     866:	10 f4       	brcc	.+4      	; 0x86c <handle_sensor_query+0x3b2>
     868:	90 5d       	subi	r25, 0xD0	; 208
     86a:	01 c0       	rjmp	.+2      	; 0x86e <handle_sensor_query+0x3b4>
     86c:	99 5c       	subi	r25, 0xC9	; 201
     86e:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     870:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     872:	8a 83       	std	Y+2, r24	; 0x02
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     874:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     876:	c7 01       	movw	r24, r14
     878:	64 e0       	ldi	r22, 0x04	; 4
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	8f d1       	rcall	.+798    	; 0xb9c <usb_serial_write>
           }
			break;
		case 5:
            adc_start(ADC_MUX_PIN_F5, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     87e:	0f 5f       	subi	r16, 0xFF	; 255
     880:	1f 4f       	sbci	r17, 0xFF	; 255
     882:	0a 30       	cpi	r16, 0x0A	; 10
     884:	11 05       	cpc	r17, r1
     886:	49 f6       	brne	.-110    	; 0x81a <handle_sensor_query+0x360>
     888:	9a c0       	rjmp	.+308    	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	60 e4       	ldi	r22, 0x40	; 64
     88e:	57 d4       	rcall	.+2222   	; 0x113e <adc_start>
     890:	88 e8       	ldi	r24, 0x88	; 136
     892:	93 e1       	ldi	r25, 0x13	; 19
     894:	20 e9       	ldi	r18, 0x90	; 144
     896:	31 e0       	ldi	r19, 0x01	; 1
     898:	f9 01       	movw	r30, r18
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <handle_sensor_query+0x3e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8a0:	d9 f7       	brne	.-10     	; 0x898 <handle_sensor_query+0x3de>
     8a2:	01 e0       	ldi	r16, 0x01	; 1
     8a4:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     8a6:	f0 e2       	ldi	r31, 0x20	; 32
     8a8:	df 2e       	mov	r13, r31
	        	usb_serial_write((unsigned char *)buf, 4);
     8aa:	7e 01       	movw	r14, r28
     8ac:	08 94       	sec
     8ae:	e1 1c       	adc	r14, r1
     8b0:	f1 1c       	adc	r15, r1
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     8b2:	5a d4       	rcall	.+2228   	; 0x1168 <adc_read>
     8b4:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     8b6:	89 2f       	mov	r24, r25
     8b8:	99 27       	eor	r25, r25
     8ba:	48 2f       	mov	r20, r24
     8bc:	4f 70       	andi	r20, 0x0F	; 15
     8be:	8f 70       	andi	r24, 0x0F	; 15
     8c0:	90 70       	andi	r25, 0x00	; 0
     8c2:	0a 97       	sbiw	r24, 0x0a	; 10
     8c4:	18 f4       	brcc	.+6      	; 0x8cc <handle_sensor_query+0x412>
     8c6:	54 2f       	mov	r21, r20
     8c8:	50 5d       	subi	r21, 0xD0	; 208
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <handle_sensor_query+0x416>
     8cc:	54 2f       	mov	r21, r20
     8ce:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     8d0:	c9 01       	movw	r24, r18
     8d2:	74 e0       	ldi	r23, 0x04	; 4
     8d4:	96 95       	lsr	r25
     8d6:	87 95       	ror	r24
     8d8:	7a 95       	dec	r23
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <handle_sensor_query+0x41a>
     8dc:	48 2f       	mov	r20, r24
     8de:	4f 70       	andi	r20, 0x0F	; 15
     8e0:	8f 70       	andi	r24, 0x0F	; 15
     8e2:	90 70       	andi	r25, 0x00	; 0
     8e4:	0a 97       	sbiw	r24, 0x0a	; 10
     8e6:	18 f4       	brcc	.+6      	; 0x8ee <handle_sensor_query+0x434>
     8e8:	84 2f       	mov	r24, r20
     8ea:	80 5d       	subi	r24, 0xD0	; 208
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <handle_sensor_query+0x438>
     8ee:	84 2f       	mov	r24, r20
     8f0:	89 5c       	subi	r24, 0xC9	; 201
     8f2:	92 2f       	mov	r25, r18
     8f4:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     8f6:	2f 70       	andi	r18, 0x0F	; 15
     8f8:	30 70       	andi	r19, 0x00	; 0
     8fa:	2a 30       	cpi	r18, 0x0A	; 10
     8fc:	31 05       	cpc	r19, r1
     8fe:	10 f4       	brcc	.+4      	; 0x904 <handle_sensor_query+0x44a>
     900:	90 5d       	subi	r25, 0xD0	; 208
     902:	01 c0       	rjmp	.+2      	; 0x906 <handle_sensor_query+0x44c>
     904:	99 5c       	subi	r25, 0xC9	; 201
     906:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     908:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     90a:	8a 83       	std	Y+2, r24	; 0x02
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     90c:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     90e:	c7 01       	movw	r24, r14
     910:	64 e0       	ldi	r22, 0x04	; 4
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	43 d1       	rcall	.+646    	; 0xb9c <usb_serial_write>
           }
			break;
		case 6:
            adc_start(ADC_MUX_PIN_F6, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     916:	0f 5f       	subi	r16, 0xFF	; 255
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	0a 30       	cpi	r16, 0x0A	; 10
     91c:	11 05       	cpc	r17, r1
     91e:	49 f6       	brne	.-110    	; 0x8b2 <handle_sensor_query+0x3f8>
     920:	4e c0       	rjmp	.+156    	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
     922:	87 e0       	ldi	r24, 0x07	; 7
     924:	60 e4       	ldi	r22, 0x40	; 64
     926:	0b d4       	rcall	.+2070   	; 0x113e <adc_start>
     928:	88 e8       	ldi	r24, 0x88	; 136
     92a:	93 e1       	ldi	r25, 0x13	; 19
     92c:	20 e9       	ldi	r18, 0x90	; 144
     92e:	31 e0       	ldi	r19, 0x01	; 1
     930:	f9 01       	movw	r30, r18
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <handle_sensor_query+0x478>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     936:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     938:	d9 f7       	brne	.-10     	; 0x930 <handle_sensor_query+0x476>
     93a:	01 e0       	ldi	r16, 0x01	; 1
     93c:	10 e0       	ldi	r17, 0x00	; 0
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
     93e:	60 e2       	ldi	r22, 0x20	; 32
     940:	d6 2e       	mov	r13, r22
	        	usb_serial_write((unsigned char *)buf, 4);
     942:	7e 01       	movw	r14, r28
     944:	08 94       	sec
     946:	e1 1c       	adc	r14, r1
     948:	f1 1c       	adc	r15, r1
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
     94a:	0e d4       	rcall	.+2076   	; 0x1168 <adc_read>
     94c:	9c 01       	movw	r18, r24
                buf[0] = HEX((val >> 8) & 15);
     94e:	89 2f       	mov	r24, r25
     950:	99 27       	eor	r25, r25
     952:	48 2f       	mov	r20, r24
     954:	4f 70       	andi	r20, 0x0F	; 15
     956:	8f 70       	andi	r24, 0x0F	; 15
     958:	90 70       	andi	r25, 0x00	; 0
     95a:	0a 97       	sbiw	r24, 0x0a	; 10
     95c:	18 f4       	brcc	.+6      	; 0x964 <handle_sensor_query+0x4aa>
     95e:	54 2f       	mov	r21, r20
     960:	50 5d       	subi	r21, 0xD0	; 208
     962:	02 c0       	rjmp	.+4      	; 0x968 <handle_sensor_query+0x4ae>
     964:	54 2f       	mov	r21, r20
     966:	59 5c       	subi	r21, 0xC9	; 201
                buf[1] = HEX((val >> 4) & 15);
     968:	c9 01       	movw	r24, r18
     96a:	44 e0       	ldi	r20, 0x04	; 4
     96c:	96 95       	lsr	r25
     96e:	87 95       	ror	r24
     970:	4a 95       	dec	r20
     972:	e1 f7       	brne	.-8      	; 0x96c <handle_sensor_query+0x4b2>
     974:	48 2f       	mov	r20, r24
     976:	4f 70       	andi	r20, 0x0F	; 15
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	90 70       	andi	r25, 0x00	; 0
     97c:	0a 97       	sbiw	r24, 0x0a	; 10
     97e:	18 f4       	brcc	.+6      	; 0x986 <handle_sensor_query+0x4cc>
     980:	84 2f       	mov	r24, r20
     982:	80 5d       	subi	r24, 0xD0	; 208
     984:	02 c0       	rjmp	.+4      	; 0x98a <handle_sensor_query+0x4d0>
     986:	84 2f       	mov	r24, r20
     988:	89 5c       	subi	r24, 0xC9	; 201
     98a:	92 2f       	mov	r25, r18
     98c:	9f 70       	andi	r25, 0x0F	; 15
                buf[2] = HEX(val & 15);
     98e:	2f 70       	andi	r18, 0x0F	; 15
     990:	30 70       	andi	r19, 0x00	; 0
     992:	2a 30       	cpi	r18, 0x0A	; 10
     994:	31 05       	cpc	r19, r1
     996:	10 f4       	brcc	.+4      	; 0x99c <handle_sensor_query+0x4e2>
     998:	90 5d       	subi	r25, 0xD0	; 208
     99a:	01 c0       	rjmp	.+2      	; 0x99e <handle_sensor_query+0x4e4>
     99c:	99 5c       	subi	r25, 0xC9	; 201
     99e:	9b 83       	std	Y+3, r25	; 0x03
                buf[3] = ' ';
     9a0:	dc 82       	std	Y+4, r13	; 0x04
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
                buf[1] = HEX((val >> 4) & 15);
     9a2:	8a 83       	std	Y+2, r24	; 0x02
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
                val = adc_read();
                buf[0] = HEX((val >> 8) & 15);
     9a4:	59 83       	std	Y+1, r21	; 0x01
                buf[1] = HEX((val >> 4) & 15);
                buf[2] = HEX(val & 15);
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
     9a6:	c7 01       	movw	r24, r14
     9a8:	64 e0       	ldi	r22, 0x04	; 4
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	f7 d0       	rcall	.+494    	; 0xb9c <usb_serial_write>
           }
			break;
		case 7:
            adc_start(ADC_MUX_PIN_F7, ADC_REF_POWER);
            _delay_ms(500);
            for(i=1;i<readings;i++){
     9ae:	0f 5f       	subi	r16, 0xFF	; 255
     9b0:	1f 4f       	sbci	r17, 0xFF	; 255
     9b2:	0a 30       	cpi	r16, 0x0A	; 10
     9b4:	11 05       	cpc	r17, r1
     9b6:	49 f6       	brne	.-110    	; 0x94a <handle_sensor_query+0x490>
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <handle_sensor_query+0x504>
                buf[3] = ' ';
	        	usb_serial_write((unsigned char *)buf, 4);
           }
			break;
		default:
			usb_serial_putchar('\x01');
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <handle_sensor_query+0x506>
			usb_serial_putchar('\n');
			return;
	}
	usb_serial_putchar('\x00');
     9be:	80 e0       	ldi	r24, 0x00	; 0
     9c0:	ab d0       	rcall	.+342    	; 0xb18 <usb_serial_putchar>
	usb_serial_putchar('\n');
     9c2:	8a e0       	ldi	r24, 0x0A	; 10
     9c4:	a9 d0       	rcall	.+338    	; 0xb18 <usb_serial_putchar>
}
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	cf 91       	pop	r28
     9d0:	df 91       	pop	r29
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	ef 90       	pop	r14
     9da:	df 90       	pop	r13
     9dc:	08 95       	ret

000009de <handle_command>:
	usb_serial_putchar('\x00');
	send_str(PSTR("\x01\x02\x03\x04\x05\x06\x07\x08\n"));
}

void handle_command(const char *str, uint8_t len)
{
     9de:	fc 01       	movw	r30, r24
	if(len == 0)
     9e0:	66 23       	and	r22, r22
     9e2:	d9 f0       	breq	.+54     	; 0xa1a <handle_command+0x3c>
		return;

	switch(str[0])
     9e4:	80 81       	ld	r24, Z
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	79 f0       	breq	.+30     	; 0xa08 <handle_command+0x2a>
     9ea:	84 30       	cpi	r24, 0x04	; 4
     9ec:	28 f4       	brcc	.+10     	; 0x9f8 <handle_command+0x1a>
     9ee:	88 23       	and	r24, r24
     9f0:	41 f0       	breq	.+16     	; 0xa02 <handle_command+0x24>
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	79 f4       	brne	.+30     	; 0xa14 <handle_command+0x36>
     9f6:	06 c0       	rjmp	.+12     	; 0xa04 <handle_command+0x26>
     9f8:	84 30       	cpi	r24, 0x04	; 4
     9fa:	39 f0       	breq	.+14     	; 0xa0a <handle_command+0x2c>
     9fc:	87 30       	cpi	r24, 0x07	; 7
     9fe:	51 f4       	brne	.+20     	; 0xa14 <handle_command+0x36>
     a00:	07 c0       	rjmp	.+14     	; 0xa10 <handle_command+0x32>
	{
		case 0:
			handle_version_command();
     a02:	dc cc       	rjmp	.-1608   	; 0x3bc <handle_version_command>
			break;
		case 1:
			handle_ping_command(str, len);
     a04:	cf 01       	movw	r24, r30
     a06:	bc cc       	rjmp	.-1672   	; 0x380 <handle_ping_command>
			break;
		case 3:
			handle_pwm_ports_command();
     a08:	b4 cc       	rjmp	.-1688   	; 0x372 <handle_pwm_ports_command>
			break;
		case 4:
			handle_set_pwm_command(str[1], str[2]);
     a0a:	81 81       	ldd	r24, Z+1	; 0x01
     a0c:	62 81       	ldd	r22, Z+2	; 0x02
     a0e:	db cc       	rjmp	.-1610   	; 0x3c6 <handle_set_pwm_command>
			break;
        case 7:
            handle_sensor_query(str[1]);
     a10:	81 81       	ldd	r24, Z+1	; 0x01
     a12:	53 cd       	rjmp	.-1370   	; 0x4ba <handle_sensor_query>
            break;
		default:
			send_str(PSTR("INVALID_COMMAND_CODE"));
     a14:	88 ee       	ldi	r24, 0xE8	; 232
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	9f cc       	rjmp	.-1730   	; 0x358 <send_str>
     a1a:	08 95       	ret

00000a1c <main>:
	}
}

int main(void)
{
     a1c:	0f 93       	push	r16
     a1e:	1f 93       	push	r17
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	a0 97       	sbiw	r28, 0x20	; 32
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
	char buf[32];
	uint8_t n;

	CPU_PRESCALE(2);
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	80 93 61 00 	sts	0x0061, r24
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	80 93 61 00 	sts	0x0061, r24
	setup_pwms();
     a40:	6e dc       	rcall	.-1828   	; 0x31e <setup_pwms>

	usb_init();
     a42:	1c d0       	rcall	.+56     	; 0xa7c <usb_init>
	while (!usb_configured()) /* wait */ ;
     a44:	34 d0       	rcall	.+104    	; 0xaae <usb_configured>
     a46:	88 23       	and	r24, r24
     a48:	e9 f3       	breq	.-6      	; 0xa44 <main+0x28>
     a4a:	80 e1       	ldi	r24, 0x10	; 16
     a4c:	97 e2       	ldi	r25, 0x27	; 39
     a4e:	20 e9       	ldi	r18, 0x90	; 144
     a50:	31 e0       	ldi	r19, 0x01	; 1
     a52:	f9 01       	movw	r30, r18
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <main+0x38>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a58:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a5a:	d9 f7       	brne	.-10     	; 0xa52 <main+0x36>
	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
		usb_serial_flush_input();

		while (1) {
			n = recv_str(buf, sizeof(buf));
     a5c:	8e 01       	movw	r16, r28
     a5e:	0f 5f       	subi	r16, 0xFF	; 255
     a60:	1f 4f       	sbci	r17, 0xFF	; 255
	usb_init();
	while (!usb_configured()) /* wait */ ;
	_delay_ms(1000);

	while (1){
		while (!(usb_serial_get_control() & USB_SERIAL_DTR)) /* wait */ ;
     a62:	c4 d1       	rcall	.+904    	; 0xdec <usb_serial_get_control>
     a64:	80 ff       	sbrs	r24, 0
     a66:	fd cf       	rjmp	.-6      	; 0xa62 <main+0x46>
		usb_serial_flush_input();
     a68:	44 d0       	rcall	.+136    	; 0xaf2 <usb_serial_flush_input>

		while (1) {
			n = recv_str(buf, sizeof(buf));
     a6a:	c8 01       	movw	r24, r16
     a6c:	60 e2       	ldi	r22, 0x20	; 32
     a6e:	ff dc       	rcall	.-1538   	; 0x46e <recv_str>
     a70:	68 2f       	mov	r22, r24
			if (n == 255) break;
     a72:	8f 3f       	cpi	r24, 0xFF	; 255
     a74:	b1 f3       	breq	.-20     	; 0xa62 <main+0x46>
			handle_command(buf, n);
     a76:	c8 01       	movw	r24, r16
     a78:	b2 df       	rcall	.-156    	; 0x9de <handle_command>
     a7a:	f7 cf       	rjmp	.-18     	; 0xa6a <main+0x4e>

00000a7c <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
     a82:	80 ea       	ldi	r24, 0xA0	; 160
     a84:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
     a88:	82 e1       	ldi	r24, 0x12	; 18
     a8a:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
     a8c:	09 b4       	in	r0, 0x29	; 41
     a8e:	00 fe       	sbrs	r0, 0
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <usb_init+0x10>
        USB_CONFIG();				// start USB clock
     a92:	80 e9       	ldi	r24, 0x90	; 144
     a94:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
     a98:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
     a9c:	10 92 08 01 	sts	0x0108, r1
	cdc_line_rtsdtr = 0;
     aa0:	10 92 09 01 	sts	0x0109, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
     aa4:	8c e0       	ldi	r24, 0x0C	; 12
     aa6:	80 93 e2 00 	sts	0x00E2, r24
	sei();
     aaa:	78 94       	sei
}
     aac:	08 95       	ret

00000aae <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
     aae:	80 91 08 01 	lds	r24, 0x0108
}
     ab2:	08 95       	ret

00000ab4 <usb_serial_getchar>:
	uint8_t c, intr_state;

	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     ab4:	2f b7       	in	r18, 0x3f	; 63
	cli();
     ab6:	f8 94       	cli
	if (!usb_configuration) {
     ab8:	80 91 08 01 	lds	r24, 0x0108
     abc:	88 23       	and	r24, r24
     abe:	39 f0       	breq	.+14     	; 0xace <usb_serial_getchar+0x1a>
		SREG = intr_state;
		return -1;
	}
	UENUM = CDC_RX_ENDPOINT;
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	80 93 e9 00 	sts	0x00E9, r24
	if (!(UEINTX & (1<<RWAL))) {
     ac6:	80 91 e8 00 	lds	r24, 0x00E8
     aca:	85 fd       	sbrc	r24, 5
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <usb_serial_getchar+0x22>
		// no data in buffer
		SREG = intr_state;
     ace:	2f bf       	out	0x3f, r18	; 63
     ad0:	2f ef       	ldi	r18, 0xFF	; 255
     ad2:	3f ef       	ldi	r19, 0xFF	; 255
     ad4:	0c c0       	rjmp	.+24     	; 0xaee <usb_serial_getchar+0x3a>
		return -1;
	}
	// take one byte out of the buffer
	c = UEDATX;
     ad6:	90 91 f1 00 	lds	r25, 0x00F1
	// if buffer completely used, release it
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x6B;
     ada:	80 91 e8 00 	lds	r24, 0x00E8
     ade:	85 fd       	sbrc	r24, 5
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <usb_serial_getchar+0x34>
     ae2:	8b e6       	ldi	r24, 0x6B	; 107
     ae4:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
     ae8:	2f bf       	out	0x3f, r18	; 63
	return c;
     aea:	29 2f       	mov	r18, r25
     aec:	30 e0       	ldi	r19, 0x00	; 0
}
     aee:	c9 01       	movw	r24, r18
     af0:	08 95       	ret

00000af2 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	uint8_t intr_state;

	if (usb_configuration) {
     af2:	80 91 08 01 	lds	r24, 0x0108
     af6:	88 23       	and	r24, r24
     af8:	71 f0       	breq	.+28     	; 0xb16 <__stack+0x17>
		intr_state = SREG;
     afa:	9f b7       	in	r25, 0x3f	; 63
		cli();
     afc:	f8 94       	cli
		UENUM = CDC_RX_ENDPOINT;
     afe:	83 e0       	ldi	r24, 0x03	; 3
     b00:	80 93 e9 00 	sts	0x00E9, r24
		while ((UEINTX & (1<<RWAL))) {
			UEINTX = 0x6B; 
     b04:	2b e6       	ldi	r18, 0x6B	; 107
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0xd>
     b08:	20 93 e8 00 	sts	0x00E8, r18

	if (usb_configuration) {
		intr_state = SREG;
		cli();
		UENUM = CDC_RX_ENDPOINT;
		while ((UEINTX & (1<<RWAL))) {
     b0c:	80 91 e8 00 	lds	r24, 0x00E8
     b10:	85 fd       	sbrc	r24, 5
     b12:	fa cf       	rjmp	.-12     	; 0xb08 <__stack+0x9>
			UEINTX = 0x6B; 
		}
		SREG = intr_state;
     b14:	9f bf       	out	0x3f, r25	; 63
     b16:	08 95       	ret

00000b18 <usb_serial_putchar>:
	}
}

// transmit a character.  0 returned on success, -1 on error
int8_t usb_serial_putchar(uint8_t c)
{
     b18:	48 2f       	mov	r20, r24
	uint8_t timeout, intr_state;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     b1a:	80 91 08 01 	lds	r24, 0x0108
     b1e:	88 23       	and	r24, r24
     b20:	d9 f1       	breq	.+118    	; 0xb98 <usb_serial_putchar+0x80>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     b22:	2f b7       	in	r18, 0x3f	; 63
	cli();
     b24:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     b2c:	80 91 0b 01 	lds	r24, 0x010B
     b30:	88 23       	and	r24, r24
     b32:	41 f0       	breq	.+16     	; 0xb44 <usb_serial_putchar+0x2c>
		if (!(UEINTX & (1<<RWAL))) {
     b34:	80 91 e8 00 	lds	r24, 0x00E8
     b38:	85 fd       	sbrc	r24, 5
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <usb_serial_putchar+0x28>
			SREG = intr_state;
     b3c:	2f bf       	out	0x3f, r18	; 63
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <usb_serial_putchar+0x4c>
			return -1;
		}
		transmit_previous_timeout = 0;
     b40:	10 92 0b 01 	sts	0x010B, r1
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
     b44:	90 91 e4 00 	lds	r25, 0x00E4
     b48:	97 5e       	subi	r25, 0xE7	; 231
		// has the USB gone offline?
		if (!usb_configuration) return -1;
		// get ready to try checking again
		intr_state = SREG;
		cli();
		UENUM = CDC_TX_ENDPOINT;
     b4a:	34 e0       	ldi	r19, 0x04	; 4
	}
	// wait for the FIFO to be ready to accept data
	timeout = UDFNUML + TRANSMIT_TIMEOUT;
	while (1) {
		// are we ready to transmit?
		if (UEINTX & (1<<RWAL)) break;
     b4c:	80 91 e8 00 	lds	r24, 0x00E8
     b50:	85 fd       	sbrc	r24, 5
     b52:	13 c0       	rjmp	.+38     	; 0xb7a <usb_serial_putchar+0x62>
		SREG = intr_state;
     b54:	2f bf       	out	0x3f, r18	; 63
		// have we waited too long?  This happens if the user
		// is not running an application that is listening
		if (UDFNUML == timeout) {
     b56:	80 91 e4 00 	lds	r24, 0x00E4
     b5a:	89 17       	cp	r24, r25
     b5c:	29 f4       	brne	.+10     	; 0xb68 <usb_serial_putchar+0x50>
			transmit_previous_timeout = 1;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	80 93 0b 01 	sts	0x010B, r24
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	08 95       	ret
			return -1;
		}
		// has the USB gone offline?
		if (!usb_configuration) return -1;
     b68:	80 91 08 01 	lds	r24, 0x0108
     b6c:	88 23       	and	r24, r24
     b6e:	a1 f0       	breq	.+40     	; 0xb98 <usb_serial_putchar+0x80>
		// get ready to try checking again
		intr_state = SREG;
     b70:	2f b7       	in	r18, 0x3f	; 63
		cli();
     b72:	f8 94       	cli
		UENUM = CDC_TX_ENDPOINT;
     b74:	30 93 e9 00 	sts	0x00E9, r19
     b78:	e9 cf       	rjmp	.-46     	; 0xb4c <usb_serial_putchar+0x34>
	}
	// actually write the byte into the FIFO
	UEDATX = c;
     b7a:	40 93 f1 00 	sts	0x00F1, r20
	// if this completed a packet, transmit it now!
	if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     b7e:	80 91 e8 00 	lds	r24, 0x00E8
     b82:	85 fd       	sbrc	r24, 5
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <usb_serial_putchar+0x74>
     b86:	8a e3       	ldi	r24, 0x3A	; 58
     b88:	80 93 e8 00 	sts	0x00E8, r24
	transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     b8c:	85 e0       	ldi	r24, 0x05	; 5
     b8e:	80 93 0a 01 	sts	0x010A, r24
	SREG = intr_state;
     b92:	2f bf       	out	0x3f, r18	; 63
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	08 95       	ret
	return 0;
     b98:	8f ef       	ldi	r24, 0xFF	; 255
}
     b9a:	08 95       	ret

00000b9c <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
     ba2:	80 91 08 01 	lds	r24, 0x0108
     ba6:	88 23       	and	r24, r24
     ba8:	09 f4       	brne	.+2      	; 0xbac <usb_serial_write+0x10>
     baa:	1c c1       	rjmp	.+568    	; 0xde4 <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
     bac:	3f b7       	in	r19, 0x3f	; 63
	cli();
     bae:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
     bb0:	84 e0       	ldi	r24, 0x04	; 4
     bb2:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
     bb6:	80 91 0b 01 	lds	r24, 0x010B
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <usb_serial_write+0x24>
     bbe:	07 c1       	rjmp	.+526    	; 0xdce <usb_serial_write+0x232>
		if (!(UEINTX & (1<<RWAL))) {
     bc0:	80 91 e8 00 	lds	r24, 0x00E8
     bc4:	85 fd       	sbrc	r24, 5
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <usb_serial_write+0x30>
			SREG = intr_state;
     bc8:	3f bf       	out	0x3f, r19	; 63
     bca:	0c c1       	rjmp	.+536    	; 0xde4 <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
     bcc:	10 92 0b 01 	sts	0x010B, r1
     bd0:	fe c0       	rjmp	.+508    	; 0xdce <usb_serial_write+0x232>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
     bd2:	90 91 e4 00 	lds	r25, 0x00E4
     bd6:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
     bd8:	80 91 e8 00 	lds	r24, 0x00E8
     bdc:	85 fd       	sbrc	r24, 5
     bde:	13 c0       	rjmp	.+38     	; 0xc06 <usb_serial_write+0x6a>
			SREG = intr_state;
     be0:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
     be2:	80 91 e4 00 	lds	r24, 0x00E4
     be6:	89 17       	cp	r24, r25
     be8:	21 f4       	brne	.+8      	; 0xbf2 <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	80 93 0b 01 	sts	0x010B, r24
     bf0:	f9 c0       	rjmp	.+498    	; 0xde4 <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
     bf2:	80 91 08 01 	lds	r24, 0x0108
     bf6:	88 23       	and	r24, r24
     bf8:	09 f4       	brne	.+2      	; 0xbfc <usb_serial_write+0x60>
     bfa:	f4 c0       	rjmp	.+488    	; 0xde4 <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
     bfc:	3f b7       	in	r19, 0x3f	; 63
			cli();
     bfe:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
     c00:	50 93 e9 00 	sts	0x00E9, r21
     c04:	e9 cf       	rjmp	.-46     	; 0xbd8 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     c06:	80 91 f2 00 	lds	r24, 0x00F2
     c0a:	2a 2f       	mov	r18, r26
     c0c:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
     c0e:	82 2f       	mov	r24, r18
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	68 17       	cp	r22, r24
     c14:	79 07       	cpc	r23, r25
     c16:	08 f4       	brcc	.+2      	; 0xc1a <usb_serial_write+0x7e>
     c18:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
     c1a:	82 2f       	mov	r24, r18
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	81 34       	cpi	r24, 0x41	; 65
     c20:	91 05       	cpc	r25, r1
     c22:	08 f0       	brcs	.+2      	; 0xc26 <usb_serial_write+0x8a>
     c24:	c6 c0       	rjmp	.+396    	; 0xdb2 <usb_serial_write+0x216>
     c26:	8a 5a       	subi	r24, 0xAA	; 170
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	fc 01       	movw	r30, r24
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	05 90       	lpm	r0, Z+
     c32:	f4 91       	lpm	r31, Z+
     c34:	e0 2d       	mov	r30, r0
     c36:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
     c38:	89 91       	ld	r24, Y+
     c3a:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
     c3e:	89 91       	ld	r24, Y+
     c40:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
     c44:	89 91       	ld	r24, Y+
     c46:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
     c4a:	89 91       	ld	r24, Y+
     c4c:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
     c50:	89 91       	ld	r24, Y+
     c52:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
     c56:	89 91       	ld	r24, Y+
     c58:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
     c5c:	89 91       	ld	r24, Y+
     c5e:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
     c62:	89 91       	ld	r24, Y+
     c64:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
     c68:	89 91       	ld	r24, Y+
     c6a:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
     c6e:	89 91       	ld	r24, Y+
     c70:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
     c74:	89 91       	ld	r24, Y+
     c76:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
     c7a:	89 91       	ld	r24, Y+
     c7c:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
     c80:	89 91       	ld	r24, Y+
     c82:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
     c86:	89 91       	ld	r24, Y+
     c88:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
     c8c:	89 91       	ld	r24, Y+
     c8e:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
     c92:	89 91       	ld	r24, Y+
     c94:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
     c98:	89 91       	ld	r24, Y+
     c9a:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
     c9e:	89 91       	ld	r24, Y+
     ca0:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
     ca4:	89 91       	ld	r24, Y+
     ca6:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
     caa:	89 91       	ld	r24, Y+
     cac:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
     cb0:	89 91       	ld	r24, Y+
     cb2:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
     cb6:	89 91       	ld	r24, Y+
     cb8:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
     cbc:	89 91       	ld	r24, Y+
     cbe:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
     cc2:	89 91       	ld	r24, Y+
     cc4:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
     cc8:	89 91       	ld	r24, Y+
     cca:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
     cce:	89 91       	ld	r24, Y+
     cd0:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
     cd4:	89 91       	ld	r24, Y+
     cd6:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
     cda:	89 91       	ld	r24, Y+
     cdc:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
     ce0:	89 91       	ld	r24, Y+
     ce2:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
     ce6:	89 91       	ld	r24, Y+
     ce8:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
     cec:	89 91       	ld	r24, Y+
     cee:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
     cf2:	89 91       	ld	r24, Y+
     cf4:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
     cf8:	89 91       	ld	r24, Y+
     cfa:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
     cfe:	89 91       	ld	r24, Y+
     d00:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
     d04:	89 91       	ld	r24, Y+
     d06:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
     d0a:	89 91       	ld	r24, Y+
     d0c:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
     d10:	89 91       	ld	r24, Y+
     d12:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
     d16:	89 91       	ld	r24, Y+
     d18:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
     d1c:	89 91       	ld	r24, Y+
     d1e:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
     d22:	89 91       	ld	r24, Y+
     d24:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
     d28:	89 91       	ld	r24, Y+
     d2a:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
     d2e:	89 91       	ld	r24, Y+
     d30:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
     d34:	89 91       	ld	r24, Y+
     d36:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
     d3a:	89 91       	ld	r24, Y+
     d3c:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
     d40:	89 91       	ld	r24, Y+
     d42:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
     d46:	89 91       	ld	r24, Y+
     d48:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
     d4c:	89 91       	ld	r24, Y+
     d4e:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
     d52:	89 91       	ld	r24, Y+
     d54:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
     d58:	89 91       	ld	r24, Y+
     d5a:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
     d5e:	89 91       	ld	r24, Y+
     d60:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
     d64:	89 91       	ld	r24, Y+
     d66:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
     d6a:	89 91       	ld	r24, Y+
     d6c:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
     d70:	89 91       	ld	r24, Y+
     d72:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
     d76:	89 91       	ld	r24, Y+
     d78:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
     d7c:	89 91       	ld	r24, Y+
     d7e:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
     d82:	89 91       	ld	r24, Y+
     d84:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
     d88:	89 91       	ld	r24, Y+
     d8a:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
     d8e:	89 91       	ld	r24, Y+
     d90:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
     d94:	89 91       	ld	r24, Y+
     d96:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
     d9a:	89 91       	ld	r24, Y+
     d9c:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
     da0:	89 91       	ld	r24, Y+
     da2:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
     da6:	89 91       	ld	r24, Y+
     da8:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
     dac:	89 91       	ld	r24, Y+
     dae:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
     db2:	89 91       	ld	r24, Y+
     db4:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     db8:	80 91 e8 00 	lds	r24, 0x00E8
     dbc:	85 fd       	sbrc	r24, 5
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <usb_serial_write+0x228>
     dc0:	b0 93 e8 00 	sts	0x00E8, r27
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
     dc4:	62 1b       	sub	r22, r18
     dc6:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     dc8:	40 93 0a 01 	sts	0x010A, r20
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <usb_serial_write+0x23a>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
     dce:	54 e0       	ldi	r21, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
     dd0:	a0 e4       	ldi	r26, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
     dd2:	ba e3       	ldi	r27, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
     dd4:	45 e0       	ldi	r20, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
     dd6:	61 15       	cp	r22, r1
     dd8:	71 05       	cpc	r23, r1
     dda:	09 f0       	breq	.+2      	; 0xdde <usb_serial_write+0x242>
     ddc:	fa ce       	rjmp	.-524    	; 0xbd2 <usb_serial_write+0x36>
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	SREG = intr_state;
     dde:	3f bf       	out	0x3f, r19	; 63
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <usb_serial_write+0x24a>
	return 0;
     de4:	8f ef       	ldi	r24, 0xFF	; 255
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <usb_serial_get_control>:
	return cdc_line_coding[6];
}
uint8_t usb_serial_get_control(void)
{
	return cdc_line_rtsdtr;
}
     dec:	80 91 09 01 	lds	r24, 0x0109
     df0:	08 95       	ret

00000df2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
     e00:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
     e04:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
     e08:	98 2f       	mov	r25, r24
     e0a:	83 ff       	sbrs	r24, 3
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <__vector_10+0x3e>
		UENUM = 0;
     e0e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
     e18:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
     e1c:	82 e1       	ldi	r24, 0x12	; 18
     e1e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
     e22:	88 e0       	ldi	r24, 0x08	; 8
     e24:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
     e28:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
     e2c:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
     e30:	92 ff       	sbrs	r25, 2
     e32:	13 c0       	rjmp	.+38     	; 0xe5a <__vector_10+0x68>
		if (usb_configuration) {
     e34:	80 91 08 01 	lds	r24, 0x0108
     e38:	88 23       	and	r24, r24
     e3a:	79 f0       	breq	.+30     	; 0xe5a <__vector_10+0x68>
			t = transmit_flush_timer;
     e3c:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
     e40:	88 23       	and	r24, r24
     e42:	59 f0       	breq	.+22     	; 0xe5a <__vector_10+0x68>
				transmit_flush_timer = --t;
     e44:	81 50       	subi	r24, 0x01	; 1
     e46:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
     e4a:	88 23       	and	r24, r24
     e4c:	31 f4       	brne	.+12     	; 0xe5a <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
     e54:	8a e3       	ldi	r24, 0x3A	; 58
     e56:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
     e68:	1f 92       	push	r1
     e6a:	0f 92       	push	r0
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	0f 92       	push	r0
     e70:	11 24       	eor	r1, r1
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
     e8e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
     e92:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
     e96:	83 ff       	sbrs	r24, 3
     e98:	3c c1       	rjmp	.+632    	; 0x1112 <__vector_11+0x2aa>
                bmRequestType = UEDATX;
     e9a:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
     e9e:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
     ea2:	80 91 f1 00 	lds	r24, 0x00F1
     ea6:	68 2f       	mov	r22, r24
     ea8:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
     eaa:	20 91 f1 00 	lds	r18, 0x00F1
     eae:	92 2f       	mov	r25, r18
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	68 2b       	or	r22, r24
     eb4:	79 2b       	or	r23, r25
                wIndex = UEDATX;
     eb6:	80 91 f1 00 	lds	r24, 0x00F1
     eba:	a8 2f       	mov	r26, r24
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
     ebe:	20 91 f1 00 	lds	r18, 0x00F1
     ec2:	92 2f       	mov	r25, r18
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	a8 2b       	or	r26, r24
     ec8:	b9 2b       	or	r27, r25
                wLength = UEDATX;
     eca:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
     ece:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
     ed2:	82 ef       	ldi	r24, 0xF2	; 242
     ed4:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
     ed8:	36 30       	cpi	r19, 0x06	; 6
     eda:	09 f0       	breq	.+2      	; 0xede <__vector_11+0x76>
     edc:	5a c0       	rjmp	.+180    	; 0xf92 <__vector_11+0x12a>
     ede:	24 e2       	ldi	r18, 0x24	; 36
     ee0:	32 e0       	ldi	r19, 0x02	; 2
     ee2:	a9 01       	movw	r20, r18
     ee4:	45 50       	subi	r20, 0x05	; 5
     ee6:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
     ee8:	f9 01       	movw	r30, r18
     eea:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
     eec:	85 91       	lpm	r24, Z+
     eee:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
     ef0:	86 17       	cp	r24, r22
     ef2:	97 07       	cpc	r25, r23
     ef4:	01 f5       	brne	.+64     	; 0xf36 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
     ef6:	fa 01       	movw	r30, r20
     ef8:	85 91       	lpm	r24, Z+
     efa:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
     efc:	8a 17       	cp	r24, r26
     efe:	9b 07       	cpc	r25, r27
     f00:	d1 f4       	brne	.+52     	; 0xf36 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
     f02:	9a 01       	movw	r18, r20
     f04:	2e 5f       	subi	r18, 0xFE	; 254
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
     f08:	f9 01       	movw	r30, r18
     f0a:	65 91       	lpm	r22, Z+
     f0c:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
     f0e:	2e 5f       	subi	r18, 0xFE	; 254
     f10:	3f 4f       	sbci	r19, 0xFF	; 255
     f12:	f9 01       	movw	r30, r18
     f14:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
     f16:	21 2f       	mov	r18, r17
     f18:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
     f1a:	90 2f       	mov	r25, r16
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	28 2b       	or	r18, r24
     f20:	39 2b       	or	r19, r25
     f22:	2f 3f       	cpi	r18, 0xFF	; 255
     f24:	31 05       	cpc	r19, r1
     f26:	19 f0       	breq	.+6      	; 0xf2e <__vector_11+0xc6>
     f28:	10 f0       	brcs	.+4      	; 0xf2e <__vector_11+0xc6>
     f2a:	2f ef       	ldi	r18, 0xFF	; 255
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	24 17       	cp	r18, r20
     f30:	58 f4       	brcc	.+22     	; 0xf48 <__vector_11+0xe0>
     f32:	42 2f       	mov	r20, r18
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <__vector_11+0xe0>
     f36:	29 5f       	subi	r18, 0xF9	; 249
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	49 5f       	subi	r20, 0xF9	; 249
     f3c:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
     f3e:	f2 e0       	ldi	r31, 0x02	; 2
     f40:	2e 34       	cpi	r18, 0x4E	; 78
     f42:	3f 07       	cpc	r19, r31
     f44:	89 f6       	brne	.-94     	; 0xee8 <__vector_11+0x80>
     f46:	e5 c0       	rjmp	.+458    	; 0x1112 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f48:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
     f4a:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	c9 01       	movw	r24, r18
     f54:	85 70       	andi	r24, 0x05	; 5
     f56:	90 70       	andi	r25, 0x00	; 0
     f58:	89 2b       	or	r24, r25
     f5a:	b9 f3       	breq	.-18     	; 0xf4a <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
     f5c:	22 fd       	sbrc	r18, 2
     f5e:	dc c0       	rjmp	.+440    	; 0x1118 <__vector_11+0x2b0>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
     f60:	34 2f       	mov	r19, r20
     f62:	41 31       	cpi	r20, 0x11	; 17
     f64:	08 f0       	brcs	.+2      	; 0xf68 <__vector_11+0x100>
     f66:	30 e1       	ldi	r19, 0x10	; 16
     f68:	23 2f       	mov	r18, r19
     f6a:	cb 01       	movw	r24, r22
     f6c:	06 c0       	rjmp	.+12     	; 0xf7a <__vector_11+0x112>
				for (i = n; i; i--) {
     f6e:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	e4 91       	lpm	r30, Z+
     f74:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	22 23       	and	r18, r18
     f7c:	c1 f7       	brne	.-16     	; 0xf6e <__vector_11+0x106>
     f7e:	63 0f       	add	r22, r19
     f80:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
     f82:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f84:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
     f88:	44 23       	and	r20, r20
     f8a:	f9 f6       	brne	.-66     	; 0xf4a <__vector_11+0xe2>
     f8c:	30 31       	cpi	r19, 0x10	; 16
     f8e:	e9 f2       	breq	.-70     	; 0xf4a <__vector_11+0xe2>
     f90:	c3 c0       	rjmp	.+390    	; 0x1118 <__vector_11+0x2b0>
			return;
                }
		if (bRequest == SET_ADDRESS) {
     f92:	35 30       	cpi	r19, 0x05	; 5
     f94:	61 f4       	brne	.+24     	; 0xfae <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     f96:	8e ef       	ldi	r24, 0xFE	; 254
     f98:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
     f9c:	80 91 e8 00 	lds	r24, 0x00E8
     fa0:	80 ff       	sbrs	r24, 0
     fa2:	fc cf       	rjmp	.-8      	; 0xf9c <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
     fa4:	86 2f       	mov	r24, r22
     fa6:	80 68       	ori	r24, 0x80	; 128
     fa8:	80 93 e3 00 	sts	0x00E3, r24
     fac:	b5 c0       	rjmp	.+362    	; 0x1118 <__vector_11+0x2b0>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
     fae:	39 30       	cpi	r19, 0x09	; 9
     fb0:	51 f5       	brne	.+84     	; 0x1006 <__vector_11+0x19e>
     fb2:	44 23       	and	r20, r20
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <__vector_11+0x150>
     fb6:	ad c0       	rjmp	.+346    	; 0x1112 <__vector_11+0x2aa>
			usb_configuration = wValue;
     fb8:	60 93 08 01 	sts	0x0108, r22
			cdc_line_rtsdtr = 0;
     fbc:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
     fc0:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
     fc4:	8e ef       	ldi	r24, 0xFE	; 254
     fc6:	80 93 e8 00 	sts	0x00E8, r24
     fca:	87 e4       	ldi	r24, 0x47	; 71
     fcc:	92 e0       	ldi	r25, 0x02	; 2
     fce:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
     fd0:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
     fd4:	fc 01       	movw	r30, r24
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	e4 91       	lpm	r30, Z+
				UECONX = en;
     fda:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
     fde:	ee 23       	and	r30, r30
     fe0:	69 f0       	breq	.+26     	; 0xffc <__vector_11+0x194>
					UECFG0X = pgm_read_byte(cfg++);
     fe2:	ac 01       	movw	r20, r24
     fe4:	4f 5f       	subi	r20, 0xFF	; 255
     fe6:	5f 4f       	sbci	r21, 0xFF	; 255
     fe8:	fc 01       	movw	r30, r24
     fea:	84 91       	lpm	r24, Z+
     fec:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
     ff0:	ca 01       	movw	r24, r20
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	fa 01       	movw	r30, r20
     ff6:	34 91       	lpm	r19, Z+
     ff8:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
     ffc:	2f 5f       	subi	r18, 0xFF	; 255
     ffe:	25 30       	cpi	r18, 0x05	; 5
    1000:	39 f7       	brne	.-50     	; 0xfd0 <__vector_11+0x168>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1002:	8e e1       	ldi	r24, 0x1E	; 30
    1004:	81 c0       	rjmp	.+258    	; 0x1108 <__vector_11+0x2a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1006:	38 30       	cpi	r19, 0x08	; 8
    1008:	61 f4       	brne	.+24     	; 0x1022 <__vector_11+0x1ba>
    100a:	40 38       	cpi	r20, 0x80	; 128
    100c:	09 f0       	breq	.+2      	; 0x1010 <__vector_11+0x1a8>
    100e:	81 c0       	rjmp	.+258    	; 0x1112 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1010:	80 91 e8 00 	lds	r24, 0x00E8
    1014:	80 ff       	sbrs	r24, 0
    1016:	fc cf       	rjmp	.-8      	; 0x1010 <__vector_11+0x1a8>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1018:	80 91 08 01 	lds	r24, 0x0108
    101c:	80 93 f1 00 	sts	0x00F1, r24
    1020:	50 c0       	rjmp	.+160    	; 0x10c2 <__vector_11+0x25a>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1022:	31 32       	cpi	r19, 0x21	; 33
    1024:	89 f4       	brne	.+34     	; 0x1048 <__vector_11+0x1e0>
    1026:	41 3a       	cpi	r20, 0xA1	; 161
    1028:	09 f0       	breq	.+2      	; 0x102c <__vector_11+0x1c4>
    102a:	73 c0       	rjmp	.+230    	; 0x1112 <__vector_11+0x2aa>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    102c:	80 91 e8 00 	lds	r24, 0x00E8
    1030:	80 ff       	sbrs	r24, 0
    1032:	fc cf       	rjmp	.-8      	; 0x102c <__vector_11+0x1c4>
    1034:	e0 e0       	ldi	r30, 0x00	; 0
    1036:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1038:	81 91       	ld	r24, Z+
    103a:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	e7 30       	cpi	r30, 0x07	; 7
    1042:	f8 07       	cpc	r31, r24
    1044:	c9 f7       	brne	.-14     	; 0x1038 <__vector_11+0x1d0>
    1046:	3d c0       	rjmp	.+122    	; 0x10c2 <__vector_11+0x25a>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1048:	30 32       	cpi	r19, 0x20	; 32
    104a:	a1 f4       	brne	.+40     	; 0x1074 <__vector_11+0x20c>
    104c:	41 32       	cpi	r20, 0x21	; 33
    104e:	09 f0       	breq	.+2      	; 0x1052 <__vector_11+0x1ea>
    1050:	60 c0       	rjmp	.+192    	; 0x1112 <__vector_11+0x2aa>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1052:	80 91 e8 00 	lds	r24, 0x00E8
    1056:	82 ff       	sbrs	r24, 2
    1058:	fc cf       	rjmp	.-8      	; 0x1052 <__vector_11+0x1ea>
    105a:	e0 e0       	ldi	r30, 0x00	; 0
    105c:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    105e:	80 91 f1 00 	lds	r24, 0x00F1
    1062:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	e7 30       	cpi	r30, 0x07	; 7
    1068:	f8 07       	cpc	r31, r24
    106a:	c9 f7       	brne	.-14     	; 0x105e <__vector_11+0x1f6>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    106c:	8b ef       	ldi	r24, 0xFB	; 251
    106e:	80 93 e8 00 	sts	0x00E8, r24
    1072:	27 c0       	rjmp	.+78     	; 0x10c2 <__vector_11+0x25a>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1074:	32 32       	cpi	r19, 0x22	; 34
    1076:	51 f4       	brne	.+20     	; 0x108c <__vector_11+0x224>
    1078:	41 32       	cpi	r20, 0x21	; 33
    107a:	09 f0       	breq	.+2      	; 0x107e <__vector_11+0x216>
    107c:	4a c0       	rjmp	.+148    	; 0x1112 <__vector_11+0x2aa>
			cdc_line_rtsdtr = wValue;
    107e:	60 93 09 01 	sts	0x0109, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1082:	80 91 e8 00 	lds	r24, 0x00E8
    1086:	80 ff       	sbrs	r24, 0
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <__vector_11+0x21a>
    108a:	1b c0       	rjmp	.+54     	; 0x10c2 <__vector_11+0x25a>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    108c:	33 23       	and	r19, r19
    108e:	e9 f4       	brne	.+58     	; 0x10ca <__vector_11+0x262>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1090:	80 91 e8 00 	lds	r24, 0x00E8
    1094:	80 ff       	sbrs	r24, 0
    1096:	fc cf       	rjmp	.-8      	; 0x1090 <__vector_11+0x228>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1098:	42 38       	cpi	r20, 0x82	; 130
    109a:	11 f0       	breq	.+4      	; 0x10a0 <__vector_11+0x238>
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0d c0       	rjmp	.+26     	; 0x10ba <__vector_11+0x252>
				UENUM = wIndex;
    10a0:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    10a4:	80 91 eb 00 	lds	r24, 0x00EB
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	25 e0       	ldi	r18, 0x05	; 5
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	2a 95       	dec	r18
    10b2:	e1 f7       	brne	.-8      	; 0x10ac <__vector_11+0x244>
    10b4:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    10b6:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    10ba:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
    10be:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10c2:	8e ef       	ldi	r24, 0xFE	; 254
    10c4:	80 93 e8 00 	sts	0x00E8, r24
    10c8:	27 c0       	rjmp	.+78     	; 0x1118 <__vector_11+0x2b0>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    10ca:	31 30       	cpi	r19, 0x01	; 1
    10cc:	11 f0       	breq	.+4      	; 0x10d2 <__vector_11+0x26a>
    10ce:	33 30       	cpi	r19, 0x03	; 3
    10d0:	01 f5       	brne	.+64     	; 0x1112 <__vector_11+0x2aa>
    10d2:	42 30       	cpi	r20, 0x02	; 2
    10d4:	f1 f4       	brne	.+60     	; 0x1112 <__vector_11+0x2aa>
    10d6:	67 2b       	or	r22, r23
    10d8:	e1 f4       	brne	.+56     	; 0x1112 <__vector_11+0x2aa>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    10da:	2a 2f       	mov	r18, r26
    10dc:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    10de:	82 2f       	mov	r24, r18
    10e0:	81 50       	subi	r24, 0x01	; 1
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	b0 f4       	brcc	.+44     	; 0x1112 <__vector_11+0x2aa>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    10e6:	8e ef       	ldi	r24, 0xFE	; 254
    10e8:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    10ec:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    10f0:	33 30       	cpi	r19, 0x03	; 3
    10f2:	79 f0       	breq	.+30     	; 0x1112 <__vector_11+0x2aa>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    10f4:	89 e1       	ldi	r24, 0x19	; 25
    10f6:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <__vector_11+0x29c>
    1100:	88 0f       	add	r24, r24
    1102:	99 1f       	adc	r25, r25
    1104:	2a 95       	dec	r18
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <__vector_11+0x298>
    1108:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    110c:	10 92 ea 00 	sts	0x00EA, r1
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <__vector_11+0x2b0>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1112:	81 e2       	ldi	r24, 0x21	; 33
    1114:	80 93 eb 00 	sts	0x00EB, r24
}
    1118:	ff 91       	pop	r31
    111a:	ef 91       	pop	r30
    111c:	bf 91       	pop	r27
    111e:	af 91       	pop	r26
    1120:	9f 91       	pop	r25
    1122:	8f 91       	pop	r24
    1124:	7f 91       	pop	r23
    1126:	6f 91       	pop	r22
    1128:	5f 91       	pop	r21
    112a:	4f 91       	pop	r20
    112c:	3f 91       	pop	r19
    112e:	2f 91       	pop	r18
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti

0000113e <adc_start>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
    113e:	ea e7       	ldi	r30, 0x7A	; 122
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	96 e8       	ldi	r25, 0x86	; 134
    1144:	90 83       	st	Z, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
    1146:	98 2f       	mov	r25, r24
    1148:	90 72       	andi	r25, 0x20	; 32
    114a:	90 68       	ori	r25, 0x80	; 128
    114c:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
    1150:	8f 71       	andi	r24, 0x1F	; 31
    1152:	86 2b       	or	r24, r22
    1154:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
    1158:	10 92 0c 01 	sts	0x010C, r1
	tail = 0;				// and then begin auto trigger mode
    115c:	10 92 0d 01 	sts	0x010D, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
    1160:	8e ee       	ldi	r24, 0xEE	; 238
    1162:	80 83       	st	Z, r24
	sei();
    1164:	78 94       	sei
}
    1166:	08 95       	ret

00001168 <adc_read>:
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
    1168:	80 91 0c 01 	lds	r24, 0x010C
		t = tail;		// wait for data in buffer
    116c:	e0 91 0d 01 	lds	r30, 0x010D
	} while (h == t);
    1170:	8e 17       	cp	r24, r30
    1172:	d1 f3       	breq	.-12     	; 0x1168 <adc_read>
	if (++t >= BUFSIZE) t = 0;
    1174:	8e 2f       	mov	r24, r30
    1176:	8f 5f       	subi	r24, 0xFF	; 255
    1178:	82 30       	cpi	r24, 0x02	; 2
    117a:	08 f0       	brcs	.+2      	; 0x117e <adc_read+0x16>
    117c:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
    117e:	e8 2f       	mov	r30, r24
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ee 0f       	add	r30, r30
    1184:	ff 1f       	adc	r31, r31
    1186:	e2 5f       	subi	r30, 0xF2	; 242
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	20 81       	ld	r18, Z
    118c:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
    118e:	80 93 0d 01 	sts	0x010D, r24
	return val;
}
    1192:	c9 01       	movw	r24, r18
    1194:	08 95       	ret

00001196 <__vector_29>:

ISR(ADC_vect)
{
    1196:	1f 92       	push	r1
    1198:	0f 92       	push	r0
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	0f 92       	push	r0
    119e:	11 24       	eor	r1, r1
    11a0:	2f 93       	push	r18
    11a2:	3f 93       	push	r19
    11a4:	8f 93       	push	r24
    11a6:	9f 93       	push	r25
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
    11ac:	20 91 78 00 	lds	r18, 0x0078
    11b0:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
    11b4:	90 91 0c 01 	lds	r25, 0x010C
    11b8:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
    11ba:	92 30       	cpi	r25, 0x02	; 2
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <__vector_29+0x2a>
    11be:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
    11c0:	80 91 0d 01 	lds	r24, 0x010D
    11c4:	98 17       	cp	r25, r24
    11c6:	51 f0       	breq	.+20     	; 0x11dc <__vector_29+0x46>
		buffer[h] = val;	// put new data into buffer
    11c8:	e9 2f       	mov	r30, r25
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	ee 0f       	add	r30, r30
    11ce:	ff 1f       	adc	r31, r31
    11d0:	e2 5f       	subi	r30, 0xF2	; 242
    11d2:	fe 4f       	sbci	r31, 0xFE	; 254
    11d4:	31 83       	std	Z+1, r19	; 0x01
    11d6:	20 83       	st	Z, r18
		head = h;
    11d8:	90 93 0c 01 	sts	0x010C, r25
	}
}
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	9f 91       	pop	r25
    11e2:	8f 91       	pop	r24
    11e4:	3f 91       	pop	r19
    11e6:	2f 91       	pop	r18
    11e8:	0f 90       	pop	r0
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	0f 90       	pop	r0
    11ee:	1f 90       	pop	r1
    11f0:	18 95       	reti

000011f2 <_exit>:
    11f2:	f8 94       	cli

000011f4 <__stop_program>:
    11f4:	ff cf       	rjmp	.-2      	; 0x11f4 <__stop_program>
