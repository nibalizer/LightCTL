
example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000097a  00000a0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000097a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800108  00800108  00000a16  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000a18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000f8  00000000  00000000  000011bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000bc3  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003c2  00000000  00000000  00002087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ee4  00000000  00000000  00002449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00003330  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000046a  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000b51  00000000  00000000  0000392a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f8  00000000  00000000  0000447b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return usb_configuration;
}

// get the next character, or -1 if nothing received
int16_t usb_serial_getchar(void)
{
   0:	f1 c0       	rjmp	.+482    	; 0x1e4 <__ctors_end>
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
	sei();
}

uint8_t adc_available(void)
{
   2:	00 00       	nop
   4:	0c c1       	rjmp	.+536    	; 0x21e <__bad_interrupt>
   6:	00 00       	nop
   8:	0a c1       	rjmp	.+532    	; 0x21e <__bad_interrupt>
   a:	00 00       	nop
   c:	08 c1       	rjmp	.+528    	; 0x21e <__bad_interrupt>
   e:	00 00       	nop
  10:	06 c1       	rjmp	.+524    	; 0x21e <__bad_interrupt>
  12:	00 00       	nop
  14:	04 c1       	rjmp	.+520    	; 0x21e <__bad_interrupt>
  16:	00 00       	nop
  18:	02 c1       	rjmp	.+516    	; 0x21e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	00 c1       	rjmp	.+512    	; 0x21e <__bad_interrupt>
  1e:	00 00       	nop
  20:	fe c0       	rjmp	.+508    	; 0x21e <__bad_interrupt>
  22:	00 00       	nop
  24:	fc c0       	rjmp	.+504    	; 0x21e <__bad_interrupt>
  26:	00 00       	nop
  28:	9e c2       	rjmp	.+1340   	; 0x566 <__vector_10>
  2a:	00 00       	nop
  2c:	d7 c2       	rjmp	.+1454   	; 0x5dc <__vector_11>
  2e:	00 00       	nop
  30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
  32:	00 00       	nop
  34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
  36:	00 00       	nop
  38:	f2 c0       	rjmp	.+484    	; 0x21e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	f0 c0       	rjmp	.+480    	; 0x21e <__bad_interrupt>
  3e:	00 00       	nop
  40:	ee c0       	rjmp	.+476    	; 0x21e <__bad_interrupt>
  42:	00 00       	nop
  44:	ec c0       	rjmp	.+472    	; 0x21e <__bad_interrupt>
  46:	00 00       	nop
  48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
  4e:	00 00       	nop
  50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
  52:	00 00       	nop
  54:	e4 c0       	rjmp	.+456    	; 0x21e <__bad_interrupt>
  56:	00 00       	nop
  58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	e0 c0       	rjmp	.+448    	; 0x21e <__bad_interrupt>
  5e:	00 00       	nop
  60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
  62:	00 00       	nop
  64:	dc c0       	rjmp	.+440    	; 0x21e <__bad_interrupt>
  66:	00 00       	nop
  68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
  6e:	00 00       	nop
  70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c4       	rjmp	.+2204   	; 0x912 <__vector_29>
  76:	00 00       	nop
  78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
  7e:	00 00       	nop
  80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
  82:	00 00       	nop
  84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
  86:	00 00       	nop
  88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c8 c0       	rjmp	.+400    	; 0x21e <__bad_interrupt>
  8e:	00 00       	nop
  90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
  92:	00 00       	nop
  94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
  96:	00 00       	nop
  98:	99 02       	muls	r25, r25
  9a:	96 02       	muls	r25, r22
  9c:	93 02       	muls	r25, r19
  9e:	90 02       	muls	r25, r16
  a0:	8d 02       	muls	r24, r29
  a2:	8a 02       	muls	r24, r26
  a4:	87 02       	muls	r24, r23
  a6:	84 02       	muls	r24, r20
  a8:	81 02       	muls	r24, r17
  aa:	7e 02       	muls	r23, r30
  ac:	7b 02       	muls	r23, r27
  ae:	78 02       	muls	r23, r24
  b0:	75 02       	muls	r23, r21
  b2:	72 02       	muls	r23, r18
  b4:	6f 02       	muls	r22, r31
  b6:	6c 02       	muls	r22, r28
  b8:	69 02       	muls	r22, r25
  ba:	66 02       	muls	r22, r22
  bc:	63 02       	muls	r22, r19
  be:	60 02       	muls	r22, r16
  c0:	5d 02       	muls	r21, r29
  c2:	5a 02       	muls	r21, r26
  c4:	57 02       	muls	r21, r23
  c6:	54 02       	muls	r21, r20
  c8:	51 02       	muls	r21, r17
  ca:	4e 02       	muls	r20, r30
  cc:	4b 02       	muls	r20, r27
  ce:	48 02       	muls	r20, r24
  d0:	45 02       	muls	r20, r21
  d2:	42 02       	muls	r20, r18
  d4:	3f 02       	muls	r19, r31
  d6:	3c 02       	muls	r19, r28
  d8:	39 02       	muls	r19, r25
  da:	36 02       	muls	r19, r22
  dc:	33 02       	muls	r19, r19
  de:	30 02       	muls	r19, r16
  e0:	2d 02       	muls	r18, r29
  e2:	2a 02       	muls	r18, r26
  e4:	27 02       	muls	r18, r23
  e6:	24 02       	muls	r18, r20
  e8:	21 02       	muls	r18, r17
  ea:	1e 02       	muls	r17, r30
  ec:	1b 02       	muls	r17, r27
  ee:	18 02       	muls	r17, r24
  f0:	15 02       	muls	r17, r21
  f2:	12 02       	muls	r17, r18
  f4:	0f 02       	muls	r16, r31
  f6:	0c 02       	muls	r16, r28
  f8:	09 02       	muls	r16, r25
  fa:	06 02       	muls	r16, r22
  fc:	03 02       	muls	r16, r19
  fe:	00 02       	muls	r16, r16
 100:	fd 01       	movw	r30, r26
 102:	fa 01       	movw	r30, r20
 104:	f7 01       	movw	r30, r14
 106:	f4 01       	movw	r30, r8
 108:	f1 01       	movw	r30, r2
 10a:	ee 01       	movw	r28, r28
 10c:	eb 01       	movw	r28, r22
 10e:	e8 01       	movw	r28, r16
 110:	e5 01       	movw	r28, r10
 112:	e2 01       	movw	r28, r4
 114:	df 01       	movw	r26, r30
 116:	dc 01       	movw	r26, r24
 118:	d9 01       	movw	r26, r18

0000011a <descriptor_list>:
 11a:	00 01 00 00 4e 01 12 00 02 00 00 60 01 43 00 03     ....N......`.C..
 12a:	00 00 a3 01 04 01 03 09 04 a7 01 14 02 03 09 04     ................
 13a:	bd 01 16 03 03 09 04 d5 01 0c                       ..........

00000144 <endpoint_config_table>:
 144:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000014e <device_descriptor>:
 14e:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
 15e:	03 01                                               ..

00000160 <config1_descriptor>:
 160:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
 170:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
 180:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
 190:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
 1a0:	40 00 00                                            @..

000001a3 <string0>:
 1a3:	04 03 09 04                                         ....

000001a7 <string1>:
 1a7:	14 03 59 00 6f 00 75 00 72 00 20 00 4e 00 61 00     ..Y.o.u.r. .N.a.
 1b7:	6d 00 65 00 00 00                                   m.e...

000001bd <string2>:
 1bd:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
 1cd:	69 00 61 00 6c 00 00 00                             i.a.l...

000001d5 <string3>:
 1d5:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00 00        ..1.2.3.4.5....

000001e4 <__ctors_end>:
 1e4:	11 24       	eor	r1, r1
 1e6:	1f be       	out	0x3f, r1	; 63
 1e8:	cf ef       	ldi	r28, 0xFF	; 255
 1ea:	d0 e2       	ldi	r29, 0x20	; 32
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
 1f0:	11 e0       	ldi	r17, 0x01	; 1
 1f2:	a0 e0       	ldi	r26, 0x00	; 0
 1f4:	b1 e0       	ldi	r27, 0x01	; 1
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f9 e0       	ldi	r31, 0x09	; 9
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	0b bf       	out	0x3b, r16	; 59
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x14>
 200:	07 90       	elpm	r0, Z+
 202:	0d 92       	st	X+, r0
 204:	a8 30       	cpi	r26, 0x08	; 8
 206:	b1 07       	cpc	r27, r17
 208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0x10>

0000020a <__do_clear_bss>:
 20a:	11 e0       	ldi	r17, 0x01	; 1
 20c:	a8 e0       	ldi	r26, 0x08	; 8
 20e:	b1 e0       	ldi	r27, 0x01	; 1
 210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
 212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
 214:	a2 37       	cpi	r26, 0x72	; 114
 216:	b1 07       	cpc	r27, r17
 218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
 21a:	02 d0       	rcall	.+4      	; 0x220 <main>
 21c:	ac c3       	rjmp	.+1880   	; 0x976 <_exit>

0000021e <__bad_interrupt>:
 21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <main>:
#define CPU_16MHz	0x00
#define CPU_125kHz	0x07
#define HEX(n) (((n) < 10) ? ((n) + '0') : ((n) + 'A' - 10))

int main(void)
{
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	00 d0       	rcall	.+0      	; 0x22c <main+0xc>
 22c:	00 d0       	rcall	.+0      	; 0x22e <main+0xe>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
	uint16_t val;
	char buf[4];

	CPU_PRESCALE(CPU_125kHz);
 232:	90 e8       	ldi	r25, 0x80	; 128
 234:	90 93 61 00 	sts	0x0061, r25
 238:	87 e0       	ldi	r24, 0x07	; 7
 23a:	80 93 61 00 	sts	0x0061, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23e:	e0 ea       	ldi	r30, 0xA0	; 160
 240:	ff e0       	ldi	r31, 0x0F	; 15
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x22>
	_delay_ms(1);		// allow slow power supply startup
	CPU_PRESCALE(CPU_16MHz); // set for 16 MHz clock
 246:	90 93 61 00 	sts	0x0061, r25
 24a:	10 92 61 00 	sts	0x0061, r1

	// initialize the USB, and then wait for the host
	// to set configuration.  If the Teensy is powered
	// without a PC connected to the USB port, this 
	// will wait forever.
	usb_init();
 24e:	47 d0       	rcall	.+142    	; 0x2de <usb_init>
	while (!usb_configured()) /* wait */ ;
 250:	5f d0       	rcall	.+190    	; 0x310 <usb_configured>
 252:	88 23       	and	r24, r24
 254:	e9 f3       	breq	.-6      	; 0x250 <main+0x30>
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	97 e2       	ldi	r25, 0x27	; 39
 25a:	20 e9       	ldi	r18, 0x90	; 144
 25c:	31 e0       	ldi	r19, 0x01	; 1
 25e:	f9 01       	movw	r30, r18
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <main+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 264:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 266:	d9 f7       	brne	.-10     	; 0x25e <main+0x3e>
	_delay_ms(1000);

	adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	60 e4       	ldi	r22, 0x40	; 64
 26c:	26 d3       	rcall	.+1612   	; 0x8ba <adc_start>
		// read the next ADC sample, and send it as ascii hex
		val = adc_read();
		buf[0] = HEX((val >> 8) & 15);
		buf[1] = HEX((val >> 4) & 15);
		buf[2] = HEX(val & 15);
		buf[3] = ' ';
 26e:	60 e2       	ldi	r22, 0x20	; 32
 270:	f6 2e       	mov	r15, r22
		usb_serial_write((unsigned char *)buf, 4);
 272:	8e 01       	movw	r16, r28
 274:	0f 5f       	subi	r16, 0xFF	; 255
 276:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_ms(1000);

	adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
	while (1) {
		// read the next ADC sample, and send it as ascii hex
		val = adc_read();
 278:	35 d3       	rcall	.+1642   	; 0x8e4 <adc_read>
 27a:	9c 01       	movw	r18, r24
		buf[0] = HEX((val >> 8) & 15);
 27c:	89 2f       	mov	r24, r25
 27e:	99 27       	eor	r25, r25
 280:	48 2f       	mov	r20, r24
 282:	4f 70       	andi	r20, 0x0F	; 15
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	90 70       	andi	r25, 0x00	; 0
 288:	0a 97       	sbiw	r24, 0x0a	; 10
 28a:	18 f4       	brcc	.+6      	; 0x292 <main+0x72>
 28c:	54 2f       	mov	r21, r20
 28e:	50 5d       	subi	r21, 0xD0	; 208
 290:	02 c0       	rjmp	.+4      	; 0x296 <main+0x76>
 292:	54 2f       	mov	r21, r20
 294:	59 5c       	subi	r21, 0xC9	; 201
		buf[1] = HEX((val >> 4) & 15);
 296:	c9 01       	movw	r24, r18
 298:	44 e0       	ldi	r20, 0x04	; 4
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	4a 95       	dec	r20
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x7a>
 2a2:	48 2f       	mov	r20, r24
 2a4:	4f 70       	andi	r20, 0x0F	; 15
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	90 70       	andi	r25, 0x00	; 0
 2aa:	0a 97       	sbiw	r24, 0x0a	; 10
 2ac:	18 f4       	brcc	.+6      	; 0x2b4 <main+0x94>
 2ae:	84 2f       	mov	r24, r20
 2b0:	80 5d       	subi	r24, 0xD0	; 208
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x98>
 2b4:	84 2f       	mov	r24, r20
 2b6:	89 5c       	subi	r24, 0xC9	; 201
 2b8:	92 2f       	mov	r25, r18
 2ba:	9f 70       	andi	r25, 0x0F	; 15
		buf[2] = HEX(val & 15);
 2bc:	2f 70       	andi	r18, 0x0F	; 15
 2be:	30 70       	andi	r19, 0x00	; 0
 2c0:	2a 30       	cpi	r18, 0x0A	; 10
 2c2:	31 05       	cpc	r19, r1
 2c4:	10 f4       	brcc	.+4      	; 0x2ca <main+0xaa>
 2c6:	90 5d       	subi	r25, 0xD0	; 208
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <main+0xac>
 2ca:	99 5c       	subi	r25, 0xC9	; 201
 2cc:	9b 83       	std	Y+3, r25	; 0x03
		buf[3] = ' ';
 2ce:	fc 82       	std	Y+4, r15	; 0x04
	adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
	while (1) {
		// read the next ADC sample, and send it as ascii hex
		val = adc_read();
		buf[0] = HEX((val >> 8) & 15);
		buf[1] = HEX((val >> 4) & 15);
 2d0:	8a 83       	std	Y+2, r24	; 0x02

	adc_start(ADC_MUX_PIN_F1, ADC_REF_POWER);
	while (1) {
		// read the next ADC sample, and send it as ascii hex
		val = adc_read();
		buf[0] = HEX((val >> 8) & 15);
 2d2:	59 83       	std	Y+1, r21	; 0x01
		buf[1] = HEX((val >> 4) & 15);
		buf[2] = HEX(val & 15);
		buf[3] = ' ';
		usb_serial_write((unsigned char *)buf, 4);
 2d4:	c8 01       	movw	r24, r16
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	1d d0       	rcall	.+58     	; 0x316 <usb_serial_write>
 2dc:	cd cf       	rjmp	.-102    	; 0x278 <main+0x58>

000002de <usb_init>:
 **************************************************************************/

// initialize USB serial
void usb_init(void)
{
	HW_CONFIG();
 2de:	81 e8       	ldi	r24, 0x81	; 129
 2e0:	80 93 d7 00 	sts	0x00D7, r24
        USB_FREEZE();				// enable USB
 2e4:	80 ea       	ldi	r24, 0xA0	; 160
 2e6:	80 93 d8 00 	sts	0x00D8, r24
        PLL_CONFIG();				// config PLL, 16 MHz xtal
 2ea:	86 e1       	ldi	r24, 0x16	; 22
 2ec:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
 2ee:	09 b4       	in	r0, 0x29	; 41
 2f0:	00 fe       	sbrs	r0, 0
 2f2:	fd cf       	rjmp	.-6      	; 0x2ee <usb_init+0x10>
        USB_CONFIG();				// start USB clock
 2f4:	80 e9       	ldi	r24, 0x90	; 144
 2f6:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
 2fa:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
 2fe:	10 92 08 01 	sts	0x0108, r1
	cdc_line_rtsdtr = 0;
 302:	10 92 09 01 	sts	0x0109, r1
        UDIEN = (1<<EORSTE)|(1<<SOFE);
 306:	8c e0       	ldi	r24, 0x0C	; 12
 308:	80 93 e2 00 	sts	0x00E2, r24
	sei();
 30c:	78 94       	sei
}
 30e:	08 95       	ret

00000310 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
 310:	80 91 08 01 	lds	r24, 0x0108
}
 314:	08 95       	ret

00000316 <usb_serial_write>:
// can also be limited by how quickly the PC-based software reads data, as the host
// controller in the PC will not allocate bandwitdh without a pending read request.
// (thanks to Victor Suarez for testing and feedback and initial code)

int8_t usb_serial_write(const uint8_t *buffer, uint16_t size)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ec 01       	movw	r28, r24
	uint8_t timeout, intr_state, write_size;

	// if we're not online (enumerated and configured), error
	if (!usb_configuration) return -1;
 31c:	80 91 08 01 	lds	r24, 0x0108
 320:	88 23       	and	r24, r24
 322:	09 f4       	brne	.+2      	; 0x326 <usb_serial_write+0x10>
 324:	1c c1       	rjmp	.+568    	; 0x55e <usb_serial_write+0x248>
	// interrupts are disabled so these functions can be
	// used from the main program or interrupt context,
	// even both in the same program!
	intr_state = SREG;
 326:	3f b7       	in	r19, 0x3f	; 63
	cli();
 328:	f8 94       	cli
	UENUM = CDC_TX_ENDPOINT;
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	80 93 e9 00 	sts	0x00E9, r24
	// if we gave up due to timeout before, don't wait again
	if (transmit_previous_timeout) {
 330:	80 91 0b 01 	lds	r24, 0x010B
 334:	88 23       	and	r24, r24
 336:	09 f4       	brne	.+2      	; 0x33a <usb_serial_write+0x24>
 338:	08 c1       	rjmp	.+528    	; 0x54a <usb_serial_write+0x234>
		if (!(UEINTX & (1<<RWAL))) {
 33a:	80 91 e8 00 	lds	r24, 0x00E8
 33e:	85 fd       	sbrc	r24, 5
 340:	02 c0       	rjmp	.+4      	; 0x346 <usb_serial_write+0x30>
			SREG = intr_state;
 342:	3f bf       	out	0x3f, r19	; 63
 344:	0c c1       	rjmp	.+536    	; 0x55e <usb_serial_write+0x248>
			return -1;
		}
		transmit_previous_timeout = 0;
 346:	10 92 0b 01 	sts	0x010B, r1
 34a:	ff c0       	rjmp	.+510    	; 0x54a <usb_serial_write+0x234>
	}
	// each iteration of this loop transmits a packet
	while (size) {
		// wait for the FIFO to be ready to accept data
		timeout = UDFNUML + TRANSMIT_TIMEOUT;
 34c:	90 91 e4 00 	lds	r25, 0x00E4
 350:	97 5e       	subi	r25, 0xE7	; 231
		while (1) {
			// are we ready to transmit?
			if (UEINTX & (1<<RWAL)) break;
 352:	80 91 e8 00 	lds	r24, 0x00E8
 356:	85 fd       	sbrc	r24, 5
 358:	13 c0       	rjmp	.+38     	; 0x380 <usb_serial_write+0x6a>
			SREG = intr_state;
 35a:	3f bf       	out	0x3f, r19	; 63
			// have we waited too long?  This happens if the user
			// is not running an application that is listening
			if (UDFNUML == timeout) {
 35c:	80 91 e4 00 	lds	r24, 0x00E4
 360:	89 17       	cp	r24, r25
 362:	21 f4       	brne	.+8      	; 0x36c <usb_serial_write+0x56>
				transmit_previous_timeout = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	80 93 0b 01 	sts	0x010B, r24
 36a:	f9 c0       	rjmp	.+498    	; 0x55e <usb_serial_write+0x248>
				return -1;
			}
			// has the USB gone offline?
			if (!usb_configuration) return -1;
 36c:	80 91 08 01 	lds	r24, 0x0108
 370:	88 23       	and	r24, r24
 372:	09 f4       	brne	.+2      	; 0x376 <usb_serial_write+0x60>
 374:	f4 c0       	rjmp	.+488    	; 0x55e <usb_serial_write+0x248>
			// get ready to try checking again
			intr_state = SREG;
 376:	3f b7       	in	r19, 0x3f	; 63
			cli();
 378:	f8 94       	cli
			UENUM = CDC_TX_ENDPOINT;
 37a:	b0 93 e9 00 	sts	0x00E9, r27
 37e:	e9 cf       	rjmp	.-46     	; 0x352 <usb_serial_write+0x3c>
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
 380:	80 91 f2 00 	lds	r24, 0x00F2
 384:	24 2f       	mov	r18, r20
 386:	28 1b       	sub	r18, r24
		if (write_size > size) write_size = size;
 388:	82 2f       	mov	r24, r18
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	68 17       	cp	r22, r24
 38e:	79 07       	cpc	r23, r25
 390:	08 f4       	brcc	.+2      	; 0x394 <usb_serial_write+0x7e>
 392:	26 2f       	mov	r18, r22
		size -= write_size;

		// write the packet
		switch (write_size) {
 394:	82 2f       	mov	r24, r18
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	81 34       	cpi	r24, 0x41	; 65
 39a:	91 05       	cpc	r25, r1
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <usb_serial_write+0x8a>
 39e:	c6 c0       	rjmp	.+396    	; 0x52c <usb_serial_write+0x216>
 3a0:	84 5b       	subi	r24, 0xB4	; 180
 3a2:	9f 4f       	sbci	r25, 0xFF	; 255
 3a4:	fc 01       	movw	r30, r24
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	05 90       	lpm	r0, Z+
 3ac:	f4 91       	lpm	r31, Z+
 3ae:	e0 2d       	mov	r30, r0
 3b0:	09 94       	ijmp
			#if (CDC_TX_SIZE == 64)
			case 64: UEDATX = *buffer++;
 3b2:	89 91       	ld	r24, Y+
 3b4:	80 93 f1 00 	sts	0x00F1, r24
			case 63: UEDATX = *buffer++;
 3b8:	89 91       	ld	r24, Y+
 3ba:	80 93 f1 00 	sts	0x00F1, r24
			case 62: UEDATX = *buffer++;
 3be:	89 91       	ld	r24, Y+
 3c0:	80 93 f1 00 	sts	0x00F1, r24
			case 61: UEDATX = *buffer++;
 3c4:	89 91       	ld	r24, Y+
 3c6:	80 93 f1 00 	sts	0x00F1, r24
			case 60: UEDATX = *buffer++;
 3ca:	89 91       	ld	r24, Y+
 3cc:	80 93 f1 00 	sts	0x00F1, r24
			case 59: UEDATX = *buffer++;
 3d0:	89 91       	ld	r24, Y+
 3d2:	80 93 f1 00 	sts	0x00F1, r24
			case 58: UEDATX = *buffer++;
 3d6:	89 91       	ld	r24, Y+
 3d8:	80 93 f1 00 	sts	0x00F1, r24
			case 57: UEDATX = *buffer++;
 3dc:	89 91       	ld	r24, Y+
 3de:	80 93 f1 00 	sts	0x00F1, r24
			case 56: UEDATX = *buffer++;
 3e2:	89 91       	ld	r24, Y+
 3e4:	80 93 f1 00 	sts	0x00F1, r24
			case 55: UEDATX = *buffer++;
 3e8:	89 91       	ld	r24, Y+
 3ea:	80 93 f1 00 	sts	0x00F1, r24
			case 54: UEDATX = *buffer++;
 3ee:	89 91       	ld	r24, Y+
 3f0:	80 93 f1 00 	sts	0x00F1, r24
			case 53: UEDATX = *buffer++;
 3f4:	89 91       	ld	r24, Y+
 3f6:	80 93 f1 00 	sts	0x00F1, r24
			case 52: UEDATX = *buffer++;
 3fa:	89 91       	ld	r24, Y+
 3fc:	80 93 f1 00 	sts	0x00F1, r24
			case 51: UEDATX = *buffer++;
 400:	89 91       	ld	r24, Y+
 402:	80 93 f1 00 	sts	0x00F1, r24
			case 50: UEDATX = *buffer++;
 406:	89 91       	ld	r24, Y+
 408:	80 93 f1 00 	sts	0x00F1, r24
			case 49: UEDATX = *buffer++;
 40c:	89 91       	ld	r24, Y+
 40e:	80 93 f1 00 	sts	0x00F1, r24
			case 48: UEDATX = *buffer++;
 412:	89 91       	ld	r24, Y+
 414:	80 93 f1 00 	sts	0x00F1, r24
			case 47: UEDATX = *buffer++;
 418:	89 91       	ld	r24, Y+
 41a:	80 93 f1 00 	sts	0x00F1, r24
			case 46: UEDATX = *buffer++;
 41e:	89 91       	ld	r24, Y+
 420:	80 93 f1 00 	sts	0x00F1, r24
			case 45: UEDATX = *buffer++;
 424:	89 91       	ld	r24, Y+
 426:	80 93 f1 00 	sts	0x00F1, r24
			case 44: UEDATX = *buffer++;
 42a:	89 91       	ld	r24, Y+
 42c:	80 93 f1 00 	sts	0x00F1, r24
			case 43: UEDATX = *buffer++;
 430:	89 91       	ld	r24, Y+
 432:	80 93 f1 00 	sts	0x00F1, r24
			case 42: UEDATX = *buffer++;
 436:	89 91       	ld	r24, Y+
 438:	80 93 f1 00 	sts	0x00F1, r24
			case 41: UEDATX = *buffer++;
 43c:	89 91       	ld	r24, Y+
 43e:	80 93 f1 00 	sts	0x00F1, r24
			case 40: UEDATX = *buffer++;
 442:	89 91       	ld	r24, Y+
 444:	80 93 f1 00 	sts	0x00F1, r24
			case 39: UEDATX = *buffer++;
 448:	89 91       	ld	r24, Y+
 44a:	80 93 f1 00 	sts	0x00F1, r24
			case 38: UEDATX = *buffer++;
 44e:	89 91       	ld	r24, Y+
 450:	80 93 f1 00 	sts	0x00F1, r24
			case 37: UEDATX = *buffer++;
 454:	89 91       	ld	r24, Y+
 456:	80 93 f1 00 	sts	0x00F1, r24
			case 36: UEDATX = *buffer++;
 45a:	89 91       	ld	r24, Y+
 45c:	80 93 f1 00 	sts	0x00F1, r24
			case 35: UEDATX = *buffer++;
 460:	89 91       	ld	r24, Y+
 462:	80 93 f1 00 	sts	0x00F1, r24
			case 34: UEDATX = *buffer++;
 466:	89 91       	ld	r24, Y+
 468:	80 93 f1 00 	sts	0x00F1, r24
			case 33: UEDATX = *buffer++;
 46c:	89 91       	ld	r24, Y+
 46e:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 32)
			case 32: UEDATX = *buffer++;
 472:	89 91       	ld	r24, Y+
 474:	80 93 f1 00 	sts	0x00F1, r24
			case 31: UEDATX = *buffer++;
 478:	89 91       	ld	r24, Y+
 47a:	80 93 f1 00 	sts	0x00F1, r24
			case 30: UEDATX = *buffer++;
 47e:	89 91       	ld	r24, Y+
 480:	80 93 f1 00 	sts	0x00F1, r24
			case 29: UEDATX = *buffer++;
 484:	89 91       	ld	r24, Y+
 486:	80 93 f1 00 	sts	0x00F1, r24
			case 28: UEDATX = *buffer++;
 48a:	89 91       	ld	r24, Y+
 48c:	80 93 f1 00 	sts	0x00F1, r24
			case 27: UEDATX = *buffer++;
 490:	89 91       	ld	r24, Y+
 492:	80 93 f1 00 	sts	0x00F1, r24
			case 26: UEDATX = *buffer++;
 496:	89 91       	ld	r24, Y+
 498:	80 93 f1 00 	sts	0x00F1, r24
			case 25: UEDATX = *buffer++;
 49c:	89 91       	ld	r24, Y+
 49e:	80 93 f1 00 	sts	0x00F1, r24
			case 24: UEDATX = *buffer++;
 4a2:	89 91       	ld	r24, Y+
 4a4:	80 93 f1 00 	sts	0x00F1, r24
			case 23: UEDATX = *buffer++;
 4a8:	89 91       	ld	r24, Y+
 4aa:	80 93 f1 00 	sts	0x00F1, r24
			case 22: UEDATX = *buffer++;
 4ae:	89 91       	ld	r24, Y+
 4b0:	80 93 f1 00 	sts	0x00F1, r24
			case 21: UEDATX = *buffer++;
 4b4:	89 91       	ld	r24, Y+
 4b6:	80 93 f1 00 	sts	0x00F1, r24
			case 20: UEDATX = *buffer++;
 4ba:	89 91       	ld	r24, Y+
 4bc:	80 93 f1 00 	sts	0x00F1, r24
			case 19: UEDATX = *buffer++;
 4c0:	89 91       	ld	r24, Y+
 4c2:	80 93 f1 00 	sts	0x00F1, r24
			case 18: UEDATX = *buffer++;
 4c6:	89 91       	ld	r24, Y+
 4c8:	80 93 f1 00 	sts	0x00F1, r24
			case 17: UEDATX = *buffer++;
 4cc:	89 91       	ld	r24, Y+
 4ce:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			#if (CDC_TX_SIZE >= 16)
			case 16: UEDATX = *buffer++;
 4d2:	89 91       	ld	r24, Y+
 4d4:	80 93 f1 00 	sts	0x00F1, r24
			case 15: UEDATX = *buffer++;
 4d8:	89 91       	ld	r24, Y+
 4da:	80 93 f1 00 	sts	0x00F1, r24
			case 14: UEDATX = *buffer++;
 4de:	89 91       	ld	r24, Y+
 4e0:	80 93 f1 00 	sts	0x00F1, r24
			case 13: UEDATX = *buffer++;
 4e4:	89 91       	ld	r24, Y+
 4e6:	80 93 f1 00 	sts	0x00F1, r24
			case 12: UEDATX = *buffer++;
 4ea:	89 91       	ld	r24, Y+
 4ec:	80 93 f1 00 	sts	0x00F1, r24
			case 11: UEDATX = *buffer++;
 4f0:	89 91       	ld	r24, Y+
 4f2:	80 93 f1 00 	sts	0x00F1, r24
			case 10: UEDATX = *buffer++;
 4f6:	89 91       	ld	r24, Y+
 4f8:	80 93 f1 00 	sts	0x00F1, r24
			case  9: UEDATX = *buffer++;
 4fc:	89 91       	ld	r24, Y+
 4fe:	80 93 f1 00 	sts	0x00F1, r24
			#endif
			case  8: UEDATX = *buffer++;
 502:	89 91       	ld	r24, Y+
 504:	80 93 f1 00 	sts	0x00F1, r24
			case  7: UEDATX = *buffer++;
 508:	89 91       	ld	r24, Y+
 50a:	80 93 f1 00 	sts	0x00F1, r24
			case  6: UEDATX = *buffer++;
 50e:	89 91       	ld	r24, Y+
 510:	80 93 f1 00 	sts	0x00F1, r24
			case  5: UEDATX = *buffer++;
 514:	89 91       	ld	r24, Y+
 516:	80 93 f1 00 	sts	0x00F1, r24
			case  4: UEDATX = *buffer++;
 51a:	89 91       	ld	r24, Y+
 51c:	80 93 f1 00 	sts	0x00F1, r24
			case  3: UEDATX = *buffer++;
 520:	89 91       	ld	r24, Y+
 522:	80 93 f1 00 	sts	0x00F1, r24
			case  2: UEDATX = *buffer++;
 526:	89 91       	ld	r24, Y+
 528:	80 93 f1 00 	sts	0x00F1, r24
			default:
			case  1: UEDATX = *buffer++;
 52c:	89 91       	ld	r24, Y+
 52e:	80 93 f1 00 	sts	0x00F1, r24
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 532:	80 91 e8 00 	lds	r24, 0x00E8
 536:	85 fd       	sbrc	r24, 5
 538:	02 c0       	rjmp	.+4      	; 0x53e <usb_serial_write+0x228>
 53a:	50 93 e8 00 	sts	0x00E8, r21
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
		if (write_size > size) write_size = size;
		size -= write_size;
 53e:	62 1b       	sub	r22, r18
 540:	71 09       	sbc	r23, r1
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 542:	a0 93 0a 01 	sts	0x010A, r26
		SREG = intr_state;
 546:	3f bf       	out	0x3f, r19	; 63
 548:	04 c0       	rjmp	.+8      	; 0x552 <usb_serial_write+0x23c>
			// has the USB gone offline?
			if (!usb_configuration) return -1;
			// get ready to try checking again
			intr_state = SREG;
			cli();
			UENUM = CDC_TX_ENDPOINT;
 54a:	b4 e0       	ldi	r27, 0x04	; 4
		}

		// compute how many bytes will fit into the next packet
		write_size = CDC_TX_SIZE - UEBCLX;
 54c:	40 e4       	ldi	r20, 0x40	; 64
			default:
			case  1: UEDATX = *buffer++;
			case  0: break;
		}
		// if this completed a packet, transmit it now!
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
 54e:	5a e3       	ldi	r21, 0x3A	; 58
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
 550:	a5 e0       	ldi	r26, 0x05	; 5
			return -1;
		}
		transmit_previous_timeout = 0;
	}
	// each iteration of this loop transmits a packet
	while (size) {
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	09 f0       	breq	.+2      	; 0x55a <usb_serial_write+0x244>
 558:	f9 ce       	rjmp	.-526    	; 0x34c <usb_serial_write+0x36>
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	01 c0       	rjmp	.+2      	; 0x560 <usb_serial_write+0x24a>
 55e:	8f ef       	ldi	r24, 0xFF	; 255
		if (!(UEINTX & (1<<RWAL))) UEINTX = 0x3A;
		transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
		SREG = intr_state;
	}
	return 0;
}
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
 566:	1f 92       	push	r1
 568:	0f 92       	push	r0
 56a:	0f b6       	in	r0, 0x3f	; 63
 56c:	0f 92       	push	r0
 56e:	11 24       	eor	r1, r1
 570:	8f 93       	push	r24
 572:	9f 93       	push	r25
	uint8_t intbits, t;

        intbits = UDINT;
 574:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
 578:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
 57c:	98 2f       	mov	r25, r24
 57e:	83 ff       	sbrs	r24, 3
 580:	11 c0       	rjmp	.+34     	; 0x5a4 <__vector_10+0x3e>
		UENUM = 0;
 582:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
 58c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
 590:	82 e1       	ldi	r24, 0x12	; 18
 592:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
 596:	88 e0       	ldi	r24, 0x08	; 8
 598:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
 59c:	10 92 08 01 	sts	0x0108, r1
		cdc_line_rtsdtr = 0;
 5a0:	10 92 09 01 	sts	0x0109, r1
        }
	if (intbits & (1<<SOFI)) {
 5a4:	92 ff       	sbrs	r25, 2
 5a6:	13 c0       	rjmp	.+38     	; 0x5ce <__vector_10+0x68>
		if (usb_configuration) {
 5a8:	80 91 08 01 	lds	r24, 0x0108
 5ac:	88 23       	and	r24, r24
 5ae:	79 f0       	breq	.+30     	; 0x5ce <__vector_10+0x68>
			t = transmit_flush_timer;
 5b0:	80 91 0a 01 	lds	r24, 0x010A
			if (t) {
 5b4:	88 23       	and	r24, r24
 5b6:	59 f0       	breq	.+22     	; 0x5ce <__vector_10+0x68>
				transmit_flush_timer = --t;
 5b8:	81 50       	subi	r24, 0x01	; 1
 5ba:	80 93 0a 01 	sts	0x010A, r24
				if (!t) {
 5be:	88 23       	and	r24, r24
 5c0:	31 f4       	brne	.+12     	; 0x5ce <__vector_10+0x68>
					UENUM = CDC_TX_ENDPOINT;
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
 5c8:	8a e3       	ldi	r24, 0x3A	; 58
 5ca:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
 5dc:	1f 92       	push	r1
 5de:	0f 92       	push	r0
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	0f 92       	push	r0
 5e4:	0b b6       	in	r0, 0x3b	; 59
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	2f 93       	push	r18
 5f0:	3f 93       	push	r19
 5f2:	4f 93       	push	r20
 5f4:	5f 93       	push	r21
 5f6:	6f 93       	push	r22
 5f8:	7f 93       	push	r23
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	af 93       	push	r26
 600:	bf 93       	push	r27
 602:	ef 93       	push	r30
 604:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
 606:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
 60a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
 60e:	83 ff       	sbrs	r24, 3
 610:	3c c1       	rjmp	.+632    	; 0x88a <__vector_11+0x2ae>
                bmRequestType = UEDATX;
 612:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
 616:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
 61a:	80 91 f1 00 	lds	r24, 0x00F1
 61e:	68 2f       	mov	r22, r24
 620:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
 622:	20 91 f1 00 	lds	r18, 0x00F1
 626:	92 2f       	mov	r25, r18
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	68 2b       	or	r22, r24
 62c:	79 2b       	or	r23, r25
                wIndex = UEDATX;
 62e:	80 91 f1 00 	lds	r24, 0x00F1
 632:	a8 2f       	mov	r26, r24
 634:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
 636:	20 91 f1 00 	lds	r18, 0x00F1
 63a:	92 2f       	mov	r25, r18
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	a8 2b       	or	r26, r24
 640:	b9 2b       	or	r27, r25
                wLength = UEDATX;
 642:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
 646:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
 64a:	82 ef       	ldi	r24, 0xF2	; 242
 64c:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
 650:	36 30       	cpi	r19, 0x06	; 6
 652:	09 f0       	breq	.+2      	; 0x656 <__vector_11+0x7a>
 654:	5a c0       	rjmp	.+180    	; 0x70a <__vector_11+0x12e>
 656:	21 e2       	ldi	r18, 0x21	; 33
 658:	31 e0       	ldi	r19, 0x01	; 1
 65a:	a9 01       	movw	r20, r18
 65c:	45 50       	subi	r20, 0x05	; 5
 65e:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
 660:	f9 01       	movw	r30, r18
 662:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
 664:	85 91       	lpm	r24, Z+
 666:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
 668:	86 17       	cp	r24, r22
 66a:	97 07       	cpc	r25, r23
 66c:	01 f5       	brne	.+64     	; 0x6ae <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
 66e:	fa 01       	movw	r30, r20
 670:	85 91       	lpm	r24, Z+
 672:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
 674:	8a 17       	cp	r24, r26
 676:	9b 07       	cpc	r25, r27
 678:	d1 f4       	brne	.+52     	; 0x6ae <__vector_11+0xd2>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
 67a:	9a 01       	movw	r18, r20
 67c:	2e 5f       	subi	r18, 0xFE	; 254
 67e:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
 680:	f9 01       	movw	r30, r18
 682:	65 91       	lpm	r22, Z+
 684:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
 686:	2e 5f       	subi	r18, 0xFE	; 254
 688:	3f 4f       	sbci	r19, 0xFF	; 255
 68a:	f9 01       	movw	r30, r18
 68c:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
 68e:	21 2f       	mov	r18, r17
 690:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
 692:	90 2f       	mov	r25, r16
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	28 2b       	or	r18, r24
 698:	39 2b       	or	r19, r25
 69a:	2f 3f       	cpi	r18, 0xFF	; 255
 69c:	31 05       	cpc	r19, r1
 69e:	19 f0       	breq	.+6      	; 0x6a6 <__vector_11+0xca>
 6a0:	10 f0       	brcs	.+4      	; 0x6a6 <__vector_11+0xca>
 6a2:	2f ef       	ldi	r18, 0xFF	; 255
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	24 17       	cp	r18, r20
 6a8:	58 f4       	brcc	.+22     	; 0x6c0 <__vector_11+0xe4>
 6aa:	42 2f       	mov	r20, r18
 6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <__vector_11+0xe4>
 6ae:	29 5f       	subi	r18, 0xF9	; 249
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	49 5f       	subi	r20, 0xF9	; 249
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	2b 34       	cpi	r18, 0x4B	; 75
 6ba:	3f 07       	cpc	r19, r31
 6bc:	89 f6       	brne	.-94     	; 0x660 <__vector_11+0x84>
 6be:	e5 c0       	rjmp	.+458    	; 0x88a <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6c0:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
 6c2:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	c9 01       	movw	r24, r18
 6cc:	85 70       	andi	r24, 0x05	; 5
 6ce:	90 70       	andi	r25, 0x00	; 0
 6d0:	89 2b       	or	r24, r25
 6d2:	b9 f3       	breq	.-18     	; 0x6c2 <__vector_11+0xe6>
				if (i & (1<<RXOUTI)) return;	// abort
 6d4:	22 fd       	sbrc	r18, 2
 6d6:	dc c0       	rjmp	.+440    	; 0x890 <__vector_11+0x2b4>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
 6d8:	34 2f       	mov	r19, r20
 6da:	41 31       	cpi	r20, 0x11	; 17
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <__vector_11+0x104>
 6de:	30 e1       	ldi	r19, 0x10	; 16
 6e0:	23 2f       	mov	r18, r19
 6e2:	cb 01       	movw	r24, r22
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <__vector_11+0x116>
				for (i = n; i; i--) {
 6e6:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	e4 91       	lpm	r30, Z+
 6ec:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
 6f0:	21 50       	subi	r18, 0x01	; 1
 6f2:	22 23       	and	r18, r18
 6f4:	c1 f7       	brne	.-16     	; 0x6e6 <__vector_11+0x10a>
 6f6:	63 0f       	add	r22, r19
 6f8:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
 6fa:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 6fc:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
 700:	44 23       	and	r20, r20
 702:	f9 f6       	brne	.-66     	; 0x6c2 <__vector_11+0xe6>
 704:	30 31       	cpi	r19, 0x10	; 16
 706:	e9 f2       	breq	.-70     	; 0x6c2 <__vector_11+0xe6>
 708:	c3 c0       	rjmp	.+390    	; 0x890 <__vector_11+0x2b4>
			return;
                }
		if (bRequest == SET_ADDRESS) {
 70a:	35 30       	cpi	r19, 0x05	; 5
 70c:	61 f4       	brne	.+24     	; 0x726 <__vector_11+0x14a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 70e:	8e ef       	ldi	r24, 0xFE	; 254
 710:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 714:	80 91 e8 00 	lds	r24, 0x00E8
 718:	80 ff       	sbrs	r24, 0
 71a:	fc cf       	rjmp	.-8      	; 0x714 <__vector_11+0x138>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
 71c:	86 2f       	mov	r24, r22
 71e:	80 68       	ori	r24, 0x80	; 128
 720:	80 93 e3 00 	sts	0x00E3, r24
 724:	b5 c0       	rjmp	.+362    	; 0x890 <__vector_11+0x2b4>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
 726:	39 30       	cpi	r19, 0x09	; 9
 728:	51 f5       	brne	.+84     	; 0x77e <__vector_11+0x1a2>
 72a:	44 23       	and	r20, r20
 72c:	09 f0       	breq	.+2      	; 0x730 <__vector_11+0x154>
 72e:	ad c0       	rjmp	.+346    	; 0x88a <__vector_11+0x2ae>
			usb_configuration = wValue;
 730:	60 93 08 01 	sts	0x0108, r22
			cdc_line_rtsdtr = 0;
 734:	10 92 09 01 	sts	0x0109, r1
			transmit_flush_timer = 0;
 738:	10 92 0a 01 	sts	0x010A, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 73c:	8e ef       	ldi	r24, 0xFE	; 254
 73e:	80 93 e8 00 	sts	0x00E8, r24
 742:	84 e4       	ldi	r24, 0x44	; 68
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	21 e0       	ldi	r18, 0x01	; 1
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
 748:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
 74c:	fc 01       	movw	r30, r24
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	e4 91       	lpm	r30, Z+
				UECONX = en;
 752:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
 756:	ee 23       	and	r30, r30
 758:	69 f0       	breq	.+26     	; 0x774 <__vector_11+0x198>
					UECFG0X = pgm_read_byte(cfg++);
 75a:	ac 01       	movw	r20, r24
 75c:	4f 5f       	subi	r20, 0xFF	; 255
 75e:	5f 4f       	sbci	r21, 0xFF	; 255
 760:	fc 01       	movw	r30, r24
 762:	84 91       	lpm	r24, Z+
 764:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
 768:	ca 01       	movw	r24, r20
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	fa 01       	movw	r30, r20
 76e:	34 91       	lpm	r19, Z+
 770:	30 93 ed 00 	sts	0x00ED, r19
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
 774:	2f 5f       	subi	r18, 0xFF	; 255
 776:	25 30       	cpi	r18, 0x05	; 5
 778:	39 f7       	brne	.-50     	; 0x748 <__vector_11+0x16c>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
 77a:	8e e1       	ldi	r24, 0x1E	; 30
 77c:	81 c0       	rjmp	.+258    	; 0x880 <__vector_11+0x2a4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
 77e:	38 30       	cpi	r19, 0x08	; 8
 780:	61 f4       	brne	.+24     	; 0x79a <__vector_11+0x1be>
 782:	40 38       	cpi	r20, 0x80	; 128
 784:	09 f0       	breq	.+2      	; 0x788 <__vector_11+0x1ac>
 786:	81 c0       	rjmp	.+258    	; 0x88a <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 788:	80 91 e8 00 	lds	r24, 0x00E8
 78c:	80 ff       	sbrs	r24, 0
 78e:	fc cf       	rjmp	.-8      	; 0x788 <__vector_11+0x1ac>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
 790:	80 91 08 01 	lds	r24, 0x0108
 794:	80 93 f1 00 	sts	0x00F1, r24
 798:	50 c0       	rjmp	.+160    	; 0x83a <__vector_11+0x25e>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
 79a:	31 32       	cpi	r19, 0x21	; 33
 79c:	89 f4       	brne	.+34     	; 0x7c0 <__vector_11+0x1e4>
 79e:	41 3a       	cpi	r20, 0xA1	; 161
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <__vector_11+0x1c8>
 7a2:	73 c0       	rjmp	.+230    	; 0x88a <__vector_11+0x2ae>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7a4:	80 91 e8 00 	lds	r24, 0x00E8
 7a8:	80 ff       	sbrs	r24, 0
 7aa:	fc cf       	rjmp	.-8      	; 0x7a4 <__vector_11+0x1c8>
 7ac:	e0 e0       	ldi	r30, 0x00	; 0
 7ae:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
 7b0:	81 91       	ld	r24, Z+
 7b2:	80 93 f1 00 	sts	0x00F1, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	e7 30       	cpi	r30, 0x07	; 7
 7ba:	f8 07       	cpc	r31, r24
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__vector_11+0x1d4>
 7be:	3d c0       	rjmp	.+122    	; 0x83a <__vector_11+0x25e>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
 7c0:	30 32       	cpi	r19, 0x20	; 32
 7c2:	a1 f4       	brne	.+40     	; 0x7ec <__vector_11+0x210>
 7c4:	41 32       	cpi	r20, 0x21	; 33
 7c6:	09 f0       	breq	.+2      	; 0x7ca <__vector_11+0x1ee>
 7c8:	60 c0       	rjmp	.+192    	; 0x88a <__vector_11+0x2ae>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
 7ca:	80 91 e8 00 	lds	r24, 0x00E8
 7ce:	82 ff       	sbrs	r24, 2
 7d0:	fc cf       	rjmp	.-8      	; 0x7ca <__vector_11+0x1ee>
 7d2:	e0 e0       	ldi	r30, 0x00	; 0
 7d4:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
 7d6:	80 91 f1 00 	lds	r24, 0x00F1
 7da:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	e7 30       	cpi	r30, 0x07	; 7
 7e0:	f8 07       	cpc	r31, r24
 7e2:	c9 f7       	brne	.-14     	; 0x7d6 <__vector_11+0x1fa>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
 7e4:	8b ef       	ldi	r24, 0xFB	; 251
 7e6:	80 93 e8 00 	sts	0x00E8, r24
 7ea:	27 c0       	rjmp	.+78     	; 0x83a <__vector_11+0x25e>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
 7ec:	32 32       	cpi	r19, 0x22	; 34
 7ee:	51 f4       	brne	.+20     	; 0x804 <__vector_11+0x228>
 7f0:	41 32       	cpi	r20, 0x21	; 33
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <__vector_11+0x21a>
 7f4:	4a c0       	rjmp	.+148    	; 0x88a <__vector_11+0x2ae>
			cdc_line_rtsdtr = wValue;
 7f6:	60 93 09 01 	sts	0x0109, r22


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 7fa:	80 91 e8 00 	lds	r24, 0x00E8
 7fe:	80 ff       	sbrs	r24, 0
 800:	fc cf       	rjmp	.-8      	; 0x7fa <__vector_11+0x21e>
 802:	1b c0       	rjmp	.+54     	; 0x83a <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
 804:	33 23       	and	r19, r19
 806:	e9 f4       	brne	.+58     	; 0x842 <__vector_11+0x266>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
 808:	80 91 e8 00 	lds	r24, 0x00E8
 80c:	80 ff       	sbrs	r24, 0
 80e:	fc cf       	rjmp	.-8      	; 0x808 <__vector_11+0x22c>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
 810:	42 38       	cpi	r20, 0x82	; 130
 812:	11 f0       	breq	.+4      	; 0x818 <__vector_11+0x23c>
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0d c0       	rjmp	.+26     	; 0x832 <__vector_11+0x256>
				UENUM = wIndex;
 818:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
 81c:	80 91 eb 00 	lds	r24, 0x00EB
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	25 e0       	ldi	r18, 0x05	; 5
 824:	96 95       	lsr	r25
 826:	87 95       	ror	r24
 828:	2a 95       	dec	r18
 82a:	e1 f7       	brne	.-8      	; 0x824 <__vector_11+0x248>
 82c:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
 82e:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
 832:	80 93 f1 00 	sts	0x00F1, r24
			UEDATX = 0;
 836:	10 92 f1 00 	sts	0x00F1, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 83a:	8e ef       	ldi	r24, 0xFE	; 254
 83c:	80 93 e8 00 	sts	0x00E8, r24
 840:	27 c0       	rjmp	.+78     	; 0x890 <__vector_11+0x2b4>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
 842:	31 30       	cpi	r19, 0x01	; 1
 844:	11 f0       	breq	.+4      	; 0x84a <__vector_11+0x26e>
 846:	33 30       	cpi	r19, 0x03	; 3
 848:	01 f5       	brne	.+64     	; 0x88a <__vector_11+0x2ae>
 84a:	42 30       	cpi	r20, 0x02	; 2
 84c:	f1 f4       	brne	.+60     	; 0x88a <__vector_11+0x2ae>
 84e:	67 2b       	or	r22, r23
 850:	e1 f4       	brne	.+56     	; 0x88a <__vector_11+0x2ae>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
 852:	2a 2f       	mov	r18, r26
 854:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
 856:	82 2f       	mov	r24, r18
 858:	81 50       	subi	r24, 0x01	; 1
 85a:	84 30       	cpi	r24, 0x04	; 4
 85c:	b0 f4       	brcc	.+44     	; 0x88a <__vector_11+0x2ae>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
 85e:	8e ef       	ldi	r24, 0xFE	; 254
 860:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
 864:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
 868:	33 30       	cpi	r19, 0x03	; 3
 86a:	79 f0       	breq	.+30     	; 0x88a <__vector_11+0x2ae>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
 86c:	89 e1       	ldi	r24, 0x19	; 25
 86e:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__vector_11+0x2a0>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	2a 95       	dec	r18
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__vector_11+0x29c>
 880:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
 884:	10 92 ea 00 	sts	0x00EA, r1
 888:	03 c0       	rjmp	.+6      	; 0x890 <__vector_11+0x2b4>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
 88a:	81 e2       	ldi	r24, 0x21	; 33
 88c:	80 93 eb 00 	sts	0x00EB, r24
}
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	7f 91       	pop	r23
 89e:	6f 91       	pop	r22
 8a0:	5f 91       	pop	r21
 8a2:	4f 91       	pop	r20
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	0f 90       	pop	r0
 8ae:	0b be       	out	0x3b, r0	; 59
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <adc_start>:
static volatile uint8_t head, tail;
static volatile int16_t buffer[BUFSIZE];

void adc_start(uint8_t mux, uint8_t aref)
{
	ADCSRA = (1<<ADEN) | ADC_PRESCALER;	// enable the ADC, interrupt disabled
 8ba:	ea e7       	ldi	r30, 0x7A	; 122
 8bc:	f0 e0       	ldi	r31, 0x00	; 0
 8be:	96 e8       	ldi	r25, 0x86	; 134
 8c0:	90 83       	st	Z, r25
	ADCSRB = (1<<ADHSM) | (mux & 0x20);
 8c2:	98 2f       	mov	r25, r24
 8c4:	90 72       	andi	r25, 0x20	; 32
 8c6:	90 68       	ori	r25, 0x80	; 128
 8c8:	90 93 7b 00 	sts	0x007B, r25
	ADMUX = aref | (mux & 0x1F);		// configure mux and ref
 8cc:	8f 71       	andi	r24, 0x1F	; 31
 8ce:	86 2b       	or	r24, r22
 8d0:	80 93 7c 00 	sts	0x007C, r24
	head = 0;				// clear the buffer
 8d4:	10 92 0c 01 	sts	0x010C, r1
	tail = 0;				// and then begin auto trigger mode
 8d8:	10 92 0d 01 	sts	0x010D, r1
	ADCSRA = (1<<ADSC) | (1<<ADEN) | (1<<ADATE) | (1<<ADIE) | ADC_PRESCALER;
 8dc:	8e ee       	ldi	r24, 0xEE	; 238
 8de:	80 83       	st	Z, r24
	sei();
 8e0:	78 94       	sei
}
 8e2:	08 95       	ret

000008e4 <adc_read>:
{
	uint8_t h, t;
	int16_t val;

	do {
		h = head;
 8e4:	80 91 0c 01 	lds	r24, 0x010C
		t = tail;		// wait for data in buffer
 8e8:	e0 91 0d 01 	lds	r30, 0x010D
	} while (h == t);
 8ec:	8e 17       	cp	r24, r30
 8ee:	d1 f3       	breq	.-12     	; 0x8e4 <adc_read>
	if (++t >= BUFSIZE) t = 0;
 8f0:	8e 2f       	mov	r24, r30
 8f2:	8f 5f       	subi	r24, 0xFF	; 255
 8f4:	82 33       	cpi	r24, 0x32	; 50
 8f6:	08 f0       	brcs	.+2      	; 0x8fa <adc_read+0x16>
 8f8:	80 e0       	ldi	r24, 0x00	; 0
	val = buffer[t];		// remove 1 sample from buffer
 8fa:	e8 2f       	mov	r30, r24
 8fc:	f0 e0       	ldi	r31, 0x00	; 0
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	e2 5f       	subi	r30, 0xF2	; 242
 904:	fe 4f       	sbci	r31, 0xFE	; 254
 906:	20 81       	ld	r18, Z
 908:	31 81       	ldd	r19, Z+1	; 0x01
	tail = t;
 90a:	80 93 0d 01 	sts	0x010D, r24
	return val;
}
 90e:	c9 01       	movw	r24, r18
 910:	08 95       	ret

00000912 <__vector_29>:

ISR(ADC_vect)
{
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	0b b6       	in	r0, 0x3b	; 59
 91c:	0f 92       	push	r0
 91e:	11 24       	eor	r1, r1
 920:	2f 93       	push	r18
 922:	3f 93       	push	r19
 924:	8f 93       	push	r24
 926:	9f 93       	push	r25
 928:	ef 93       	push	r30
 92a:	ff 93       	push	r31
	uint8_t h;
	int16_t val;

	val = ADC;			// grab new reading from ADC
 92c:	20 91 78 00 	lds	r18, 0x0078
 930:	30 91 79 00 	lds	r19, 0x0079
	h = head + 1;
 934:	90 91 0c 01 	lds	r25, 0x010C
 938:	9f 5f       	subi	r25, 0xFF	; 255
	if (h >= BUFSIZE) h = 0;
 93a:	92 33       	cpi	r25, 0x32	; 50
 93c:	08 f0       	brcs	.+2      	; 0x940 <__vector_29+0x2e>
 93e:	90 e0       	ldi	r25, 0x00	; 0
	if (h != tail) {		// if the buffer isn't full
 940:	80 91 0d 01 	lds	r24, 0x010D
 944:	98 17       	cp	r25, r24
 946:	51 f0       	breq	.+20     	; 0x95c <__vector_29+0x4a>
		buffer[h] = val;	// put new data into buffer
 948:	e9 2f       	mov	r30, r25
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	ee 0f       	add	r30, r30
 94e:	ff 1f       	adc	r31, r31
 950:	e2 5f       	subi	r30, 0xF2	; 242
 952:	fe 4f       	sbci	r31, 0xFE	; 254
 954:	31 83       	std	Z+1, r19	; 0x01
 956:	20 83       	st	Z, r18
		head = h;
 958:	90 93 0c 01 	sts	0x010C, r25
	}
}
 95c:	ff 91       	pop	r31
 95e:	ef 91       	pop	r30
 960:	9f 91       	pop	r25
 962:	8f 91       	pop	r24
 964:	3f 91       	pop	r19
 966:	2f 91       	pop	r18
 968:	0f 90       	pop	r0
 96a:	0b be       	out	0x3b, r0	; 59
 96c:	0f 90       	pop	r0
 96e:	0f be       	out	0x3f, r0	; 63
 970:	0f 90       	pop	r0
 972:	1f 90       	pop	r1
 974:	18 95       	reti

00000976 <_exit>:
 976:	f8 94       	cli

00000978 <__stop_program>:
 978:	ff cf       	rjmp	.-2      	; 0x978 <__stop_program>
